<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Kotlin简介及配置</title>
      <link href="/xiayunquan.github.io/2021/09/23/KotlinIntroduction/"/>
      <url>/xiayunquan.github.io/2021/09/23/KotlinIntroduction/</url>
      
        <content type="html"><![CDATA[<h3 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h3><p><img src="https://img-blog.csdnimg.cn/2021050611440858.jpg"></p><p><strong>Kotlin</strong>是一种运行在java虚拟机上的静态类型编程语言，由<strong>JetBrains</strong>公司设计并开源。</p><p>在2011年，JetBrains就公布了Kotlin的第一个版本；</p><p>并在2012年将其开源，2013年Android Studio也加入了对Kotlin的支持；</p><p>2016年Kotlin发布了1.0正式版；</p><p>2017年Google宣布Kotlin正式成为Android一级开发语言；</p><p>2019年的时候，Google在I/O大会上宣布Kotlin成为Android开发的第一语言，Android官网文档的代码已优先显示Kotlin版本，官方的视频教程以及Google的一些开源项目，也改用了Kotlin来实现。</p><p>到2021年，Kotlin不知不觉已经迈过了10年历程，现在 Kotlin语言在Android领域已经相当完善，目前Google play上面排名前1000的应用中，已经有超过80%的App使用了kotlin语言，而且这个比例还在不断上升。</p><h3 id="Kotlin工作原理"><a href="#Kotlin工作原理" class="headerlink" title="Kotlin工作原理"></a>Kotlin工作原理</h3><p>在Kotlin语言出来之前， Android开发主要使用Java语言进行开发，Java语言的运行机制是将Java源代码编译成特殊的class文件，然后通过Java虚拟机（JVM）将class文件解释成计算机可识别的二进制文件再执行。类似于这种机制，JetBrains设计了一门新的语言—Kotlin，Kotlin源文件通过Kotlin编译器编译出同样的class文件，然后自然就可以运行在JVM了。随着Kotlin不断迭代更新完善，Kotlin编译器可以编译出更多的语言来支持多平台，比如JavaScript、Native等。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4178bac4ec20519074a9a3862af417b8.png"></p><h3 id="使用kotlin进行Android开发"><a href="#使用kotlin进行Android开发" class="headerlink" title="使用kotlin进行Android开发"></a>使用kotlin进行Android开发</h3><p><img src="https://img-blog.csdnimg.cn/2021050611235519.png"></p><p>kotlin非常适合android开发，在2017 Google IO大会上，Google宣布kotlin成为android开发一级语言。使用kotlin进行开发主要有以下优势：</p><ul><li><strong>兼容性：</strong>kotlin与jdk6完全兼容，保障了kotlin应用程序在旧的android设备上运行没有问题，kotlin工具在android studio上完全支持，并且兼容android构建系统</li></ul><ul><li><strong>性能：</strong>kotlin与java有相似的字节码结构，运行速度与java类似，kotlin对内联函数的支持，使用lambda表达式的代码通常会比java代码运行的更快</li></ul><ul><li><p><strong>互操作性：</strong>kotlin可与java进行100%互操作，Kotlin可以直接调用使用Java编写的代码，允许在kotlin应用中使用所有现有的android库</p></li><li><p><strong>占用：</strong>Kotlin的语法更加简洁，对于同样的功能，使用Kotlin开发的代码量</p><p>可能会比使用Java开发的减少50% 甚至更多，kotlin具有非常紧凑的运行时库，可以通过Proguard进一步减小，在实际应用中，apk体积会减小很多</p></li><li><p><strong>编译时长：</strong>kotlin支持高效的增量编译</p></li></ul><h3 id="使用kotlin进行服务端开发"><a href="#使用kotlin进行服务端开发" class="headerlink" title="使用kotlin进行服务端开发"></a>使用kotlin进行服务端开发</h3><p>Kotlin ⾮常适合开发服务器端应⽤程序， 允许编写简明且表现⼒强的代码，  同时保持与现有基于 Java 的技术栈的完全兼容性以及平滑的学习曲线</p><ul><li><strong>表现力</strong>：Kotlin 的革新式语言功能，例如支持<a href="https://www.kotlincn.net/docs/reference/type-safe-builders.html">类型安全的构建器</a>和<a href="https://www.kotlincn.net/docs/reference/delegated-properties.html">委托属性</a>，有助于构建强大而易于使用的抽象。</li><li><strong>可伸缩性</strong>：Kotlin 对<a href="https://www.kotlincn.net/docs/reference/coroutines.html">协程</a>的支持有助于构建服务器端应用程序，伸缩到适度的硬件要求以应对大量的客户端。</li><li><strong>互操作性</strong>：Kotlin 与所有基于 Java 的框架完全兼容，可以让你保持熟悉的技术栈，同时获得更现代化语言的优势。</li><li><strong>迁移</strong>：Kotlin 支持大型代码库从 Java 到 Kotlin 逐步迁移。你可以开始用 Kotlin 编写新代码，同时系统中较旧部分继续用 Java。</li><li><strong>工具</strong>：除了很棒的 IDE 支持之外，Kotlin 还为 IntelliJ IDEA Ultimate 的插件提供了框架特定的工具（例如Spring）。</li><li><strong>学习曲线</strong>：对于 Java 开发人员，Kotlin 入门很容易。包含在 Kotlin 插件中的自动 Java 到 Kotlin 的转换器有助于迈出第一步。</li></ul><h3 id="kotlin对JavaScript平台支持"><a href="#kotlin对JavaScript平台支持" class="headerlink" title="kotlin对JavaScript平台支持"></a>kotlin对JavaScript平台支持</h3><p>Kotlin 提供了 JavaScript 作为⽬标平台的能⼒。 它通过将 Kotlin 转换为 JavaScript 来构建web应用程序。</p><h3 id="Android-Studio配置Kotlin"><a href="#Android-Studio配置Kotlin" class="headerlink" title="Android Studio配置Kotlin"></a>Android Studio配置Kotlin</h3><p>随着Kotlin的快速发展，新版的Android Studio早已内置了Kotlin插件， 我们只需要升级Android Studio，然后新建一个Kotlin项目就可以进行Kotlin开发了，但如果还是使用Android Studio 3.0 版本以下的，需要首先安装Kotlin插件。 settings -&gt; plugins -&gt; 搜索kotlin 进行安装，</p><p>插件安装好了之后需要如下的配置（新版的Android Studio新建Kotlin项目之后自动给我们配置好了）</p><h4 id="1-project目录下的build-gradle文件中添加kotlin的classpath"><a href="#1-project目录下的build-gradle文件中添加kotlin的classpath" class="headerlink" title="1.project目录下的build.gradle文件中添加kotlin的classpath."></a>1.project目录下的build.gradle文件中添加kotlin的classpath.</h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">buildscript <span class="token punctuation">&#123;</span>    ext<span class="token punctuation">.</span>kotlin_version <span class="token operator">=</span> <span class="token string">"1.3.41"</span>        repositories <span class="token punctuation">&#123;</span>        <span class="token function">jcenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    dependencies <span class="token punctuation">&#123;</span>        classpath <span class="token string">'com.android.tools.build:gradle:2.3.2'</span>        <span class="token comment">//添加kotlin的依赖</span>        classpath <span class="token string">"org.jetbrains.kotlin:kotlin-gradle-plugin:<span class="token interpolation"><span class="token delimiter variable">$&#123;</span>kotlin_version<span class="token delimiter variable">&#125;</span></span>"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-然后在module目录下面的build-gradle文件中添加依赖"><a href="#2-然后在module目录下面的build-gradle文件中添加依赖" class="headerlink" title="2.然后在module目录下面的build.gradle文件中添加依赖"></a>2.然后在module目录下面的build.gradle文件中添加依赖</h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">apply plugin<span class="token operator">:</span> <span class="token string">'kotlin-android'</span>android <span class="token punctuation">&#123;</span>    <span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>dependencies <span class="token punctuation">&#123;</span>    compile <span class="token string">"org.jetbrains.kotlin:kotlin-stdlib:<span class="token interpolation"><span class="token delimiter variable">$&#123;</span>kotlin_version<span class="token delimiter variable">&#125;</span></span>"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="http://kotlinlang.org/">kotlin官网地址</a><br><a href="https://www.kotlincn.net/docs/reference/android-overview.html">kotlin中文学习网址</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android简介及发展历程</title>
      <link href="/xiayunquan.github.io/2021/09/22/AndroidIntroduction/"/>
      <url>/xiayunquan.github.io/2021/09/22/AndroidIntroduction/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>Android</strong>是基于Linux系统的开源操作系统，是由Andy Rubin于2003年在美国加州创建，后被Google于2005年收购。在2008年的时候发布了第一部Android智能手机，随后Android不断发展更新，占据了全球大部分的手机市场。<br>Android每一个版本都会用一个按照A-Z开头顺序的甜品来命名，但从Android P之后Google改变了这一传统的命名规则，可能是没有那么多让人熟知的甜品代号供使用以及甜品名字并不能让人直观的了解到哪一个甜品有什么特性，于是Google直接采用数字来命令系统，并且加深了logo的颜色，不再使用甜品作为代号。</p><p>下面是Android各版本代号、图片及市场占有率<br>| Platform Version | API      | Version Code                | Logo                                     | Publish Date | 各系统版本比率（2020-07） |<br>| —————- | ——– | ————————— | —————————————- | ———— | —————- |<br>| 11.0             | 30       | android 11                  | <img src="https://img-blog.csdnimg.cn/20200730190850516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> | 2020（Q3）     | &lt;1%              |<br>| 10.0             | 29       | android 10                  | <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL3RfYW5kcm9pZF8xMF8yOS5wbmc?x-oss-process=image/format,png"> | 2019         | 8.2%             |<br>| 9.0              | 28       | pie（红豆派）                    | <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL3RfcGllJUU3JUJBJUEyJUU4JUIxJTg2JUU2JUI0JUJFXzkuMF8yOC5wbmc?x-oss-process=image/format,png"> | 2018         | 31.3%            |<br>| 8.0/8.1          | 26/27    | Oreo（奥利奥饼干）                 | <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL3Rfb3JlbyVFNSVBNSVBNSVFNSU4OCVBOSVFNSVBNSVBNV84LjBfMjYucG5n?x-oss-process=image/format,png"> | 2017         | 31.3%            |<br>| 7.0/7.1          | 24/25    | Nougat（牛轧糖）                 | <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL3Rfbm91Z2F0JUU3JTg5JTlCJUU4JUJEJUE3JUU3JUIzJTk2XzcuMF8yNC5wbmc?x-oss-process=image/format,png"> | 2016         | 13%              |<br>| 6.0              | 23       | Marshmallow（棉花糖）            | <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL3RfbWFyc2htYWxsb3clRTYlQTMlODklRTglOEElQjElRTclQjMlOTZfNi4wXzIzLnBuZw?x-oss-process=image/format,png"> | 2015         | 11.2%            |<br>| 5.0/5.1          | 21/22    | Lollipop（棒棒糖）               | <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL3RfbG9sbGlwb3AlRTYlQTMlOTIlRTYlQTMlOTIlRTclQjMlOTZfNS4wXzIxLnBuZw?x-oss-process=image/format,png"> | 2014         | 9.2%             |<br>| 4.4              | 19/20    | Kitkat（奇巧）                  | <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL3Rfa2l0a2F0JUU1JUE1JTg3JUU1JUI3JUE3XzQuNF8xOS5wbmc?x-oss-process=image/format,png"> | 2013         | 4%               |<br>| 4.1/4.2/4.3      | 16/17/18 | Jelly_Bean（果冻豆）             | <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL3RfamVsbHlfYmVhbiVFNiU5RSU5QyVFNSU4NiVCQiVFOCVCMSU4Nl80LjFfMTYucG5n?x-oss-process=image/format,png"> | 2012         | 1.7%             |<br>| 4.0.x            | 14/15    | Ice_Cream_Sandwich （冰淇淋三明治） | <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaW1hZ2VzL2NuYmxvZ3NfY29tL3h5cTYvMTU1NjYzMi90X2ljZV9jcmVhbV9zYW5kd2ljaF8lZTUlODYlYjAlZTYlYjclODclZTYlYjclOGIlZTQlYjglODklZTYlOTglOGUlZTYlYjIlYmJfNC4wXzE0LnBuZw?x-oss-process=image/format,png"> | 2011         | 0.2%             |<br>| 3.0/3.1/3.2      | 11/12/13 | Honeycomb（蜂巢）               | <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL3RfaG9uZXlvb21iJUU4JTlDJTgyJUU4JTlDJTlDJUU1JTg2JUIwJUU2JUI3JTg3JUU2JUI3JThCXzMuMF8xMS5wbmc?x-oss-process=image/format,png"> | 2011         | N/A              |<br>| 2.3.x            | 9/10     | Gingerbread  （姜饼）           | <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL3RfZ2luZ2VyYnJlYWQlRTUlQTclOUMlRTklQTUlQkNfMi4zXzkucG5n?x-oss-process=image/format,png"> | 2010         | N/A              |<br>| 2.2.x            | 8        | Froyo （冻酸奶）                 | <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL3RfZnJveW8lRTUlODYlQkIlRTklODUlQjglRTUlQTUlQjZfMi4yXzgucG5n?x-oss-process=image/format,png"> | 2010         | N/A              |<br>| 2.0/2.1          | 5/6/7    | Eclair （泡芙）                 | <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL3RfZWNsYXRyJUU2JUIzJUExJUU4JThBJTk5XzIuMF81LnBuZw?x-oss-process=image/format,png"> | 2009         | N/A              |<br>| 1.6              | 4        | Donut （甜甜圈）                 | <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL3RfZG9udXQlRTclOTQlOUMlRTclOTQlOUMlRTUlOUMlODhfMS42XzQucG5n?x-oss-process=image/format,png"> | 2009         | N/A              |<br>| 1.5              | 3        | Cupcake （纸杯蛋糕）              | <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL3RfY3VwY2FrZSVFNyVCQSVCOCVFNiU5RCVBRiVFOCU5QiU4QiVFNyVCMyU5NV8xLjVfMy5wbmc?x-oss-process=image/format,png"> | 2009         | N/A              |</p><p>下面是截止到2020年7月份各版本市场占有率，最新数据可以在<a href="https://developer.android.google.cn/about/dashboards/">官网</a>上查询，或者在Android Studio里面新建一个项目，当选择支持最低的SDK（Minimum SDK）版本的时候，就可以看到当前选择的SDK版本及以上的版本在市场上面的占有率。从图中可以看到Android每个系统版本都有一定的占有率，这就给手机应用开发者针对不同版本的适配带来很多麻烦；同时可以看出较新的系统版本占有率相当高，这就要求开发者尽早的针对新版本进行学习和适配，让我们的应用支持新的系统版本带给我们的新功能和特性。<br><img src="https://img-blog.csdnimg.cn/20200730193259154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="系统版本市场占有率"></p><h3 id="Android平台架构"><a href="#Android平台架构" class="headerlink" title="Android平台架构"></a>Android平台架构</h3><p>Android 是一种基于 Linux 的开放源代码软件栈，为各类设备和机型而创建。<br>下图所示为 Android 平台的主要组件。 <a href="https://developer.android.google.cn/guide/platform/">官网地址</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL29fYW5kcm9pZC1zdGFja18yeC5wbmc?x-oss-process=image/format,png"></p><h4 id="Linux内核层"><a href="#Linux内核层" class="headerlink" title="Linux内核层"></a>Linux内核层</h4><p>Android平台的基础是Linux内核，例如Android Runtime（ART）依靠Linux内核来执行底层功能，如线程和底层内层管理。使用 Linux 内核可让 Android 利用主要安全功能，并且允许设备制造商为著名的内核开发硬件驱动程序。如蓝牙、相机、WiFi等驱动</p><h4 id="硬件抽象层（HAL）"><a href="#硬件抽象层（HAL）" class="headerlink" title="硬件抽象层（HAL）"></a>硬件抽象层（HAL）</h4><p>硬件抽象层 (HAL) 提供标准界面，向更高级别的 Java API 框架显示设备硬件功能。HAL 包含多个库模块，其中每个模块都为特定类型的硬件组件实现一个界面，例如相机或蓝牙模块。当框架 API 要求访问设备硬件时，Android 系统将为该硬件组件加载库模块。 </p><h4 id="Android-Runtime"><a href="#Android-Runtime" class="headerlink" title="Android Runtime"></a>Android Runtime</h4><p> 对于运行 Android 5.0（API 级别 21）或更高版本的设备，每个应用都在其自己的进程中运行，并且有其自己的 Android Runtime (ART) 实例。ART 编写为通过执行 DEX 文件在低内存设备上运行多个虚拟机，DEX 文件是一种专为 Android 设计的字节码格式，经过优化，使用的内存很少。编译工具链（例如 Jack）将 Java 源代码编译为 DEX 字节码，使其可在 Android 平台上运行。</p><p>ART 的部分主要功能包括：</p><ul><li>预先 (AOT) 和即时 (JIT) 编译    </li><li>优化的垃圾回收 (GC)</li><li>在 Android 9（API 级别 28）及更高版本的系统中，支持将应用软件包中的 Dalvik Executable 格式 (DEX) 文件转换为更紧凑的机器代码。</li><li>更好的调试支持，包括专用采样分析器、详细的诊断异常和崩溃报告，并且能够设置观察点以监控特定字段</li></ul><p>在 Android 版本 5.0（API 级别 21）之前，Dalvik 是 Android Runtime。如果您的应用在 ART 上运行效果很好，那么它应该也可在 Dalvik 上运行，但反过来不一定。</p><p>Android 还包含一套核心运行时库，可提供 Java API 框架所使用的 Java 编程语言中的大部分功能，包括一些 Java 8 语言功能。 </p><h4 id="原生C-C-库"><a href="#原生C-C-库" class="headerlink" title="原生C/C++库"></a>原生C/C++库</h4><p> 许多核心 Android 系统组件和服务（例如 ART 和 HAL）构建自原生代码，需要以 C 和 C++ 编写的原生库。Android 平台提供 Java 框架 API 以向应用显示其中部分原生库的功能。例如，您可以通过 Android 框架的 Java OpenGL API 访问 OpenGL ES，以支持在应用中绘制和操作 2D 和 3D 图形。</p><p>如果开发的是需要 C 或 C++ 代码的应用，可以使用 Android NDK 直接从原生代码访问某些原生平台库。 </p><h4 id="Java-API框架"><a href="#Java-API框架" class="headerlink" title="Java API框架"></a>Java API框架</h4><p>我们可通过以 Java 语言编写的 API 使用 Android OS 的整个功能集。这些 API 形成创建 Android 应用所需的构建块，它们可简化核心模块化系统组件和服务的重复使用，包括以下组件和服务： </p><ul><li>丰富、可扩展的视图系统，可用以构建应用的 UI，包括列表、网格、文本框、按钮甚至可嵌入的网络浏览器</li><li>资源管理器，用于访问非代码资源，例如本地化的字符串、图形和布局文件</li><li>通知管理器，可让所有应用在状态栏中显示自定义提醒</li><li>Activity 管理器，用于管理应用的生命周期，提供常见的导航返回栈</li><li>内容提供程序，可让应用访问其他应用（例如“联系人”应用）中的数据或者共享其自己的数据</li></ul><p>开发者可以完全访问 Android 系统应用使用的框架 API。 无论系统内置或者我们自己编写的App，都需要使用到这层，比如我们想弄来电黑名单，自动挂断电话，我们就需要用到电话管理(TelephonyManager) 通过该层我们就可以很轻松的实现挂断操作，而不需要关心底层实现。</p><h4 id="系统应用层"><a href="#系统应用层" class="headerlink" title="系统应用层"></a>系统应用层</h4><p>每个 Android手机默认都会有一套用于电子邮件、短信、日历、互联网浏览和联系人等核心应用。这些应用与用户可以选择安装的应用一样，没有特殊状态。但一般没有root权限不能卸载这些系统应用。<br>我们自己开发的APP也是属于这一层，我们可以在自己的应用中使用一些系统应用的主要功能。例如我们的应用需要发短信，我们无需自己构建该功能，而是调用已安装的短信应用向指定的接收者发送消息。 </p><p>作为普通的应用层开发者，我们一般只会与应用层和Java API系统框架能打交道；而底层开发者还需要涉及到原生C/C++库层进行NDK开发。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
