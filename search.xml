<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用Hexo免费搭建个人博客教程</title>
      <link href="/HexoBlogBuildAndConfig/"/>
      <url>/HexoBlogBuildAndConfig/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>现在各种互联网博客非常的，常见的如CSDN、简书、掘金、博客园等平台，这些博客平台做的都很好，可以直接在上面注册自己的账号写文章，发表的文章在百度、Bing等搜索引擎上也能收到，但缺点是受于平台的各种限制，个人定制化不自由，而且大多数平台都会有各种广告。</p><p>于是想到自己搭建一个博客网站，但对大多数人而言，自己购买服务器和域名来搭建博客成本实在太高的了，而且有点浪费，还需要定期维护，这时一种不错的选择就是使用第三方开源托管平台（GitHub、GitLab等）来当作我们的服务器，并使用快速简洁的博客搭建框架-<a href="https://hexo.io/zh-cn/">Hexo</a>来搭建博客网站就非常容易了，下面就来介绍一下使用hexo搭建博客的步骤及一些配置吧。</p><h3 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h3><p>Hexo是由台湾大佬开发的一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub、Coding、Gitlab等平台上，是搭建博客的首选框架。而且Hexo支持Markdown的所有语法功能来编辑网页内容，编辑的内容生产静态网页速度很快，上百个页面在几秒内瞬间完成渲染。Hexo部署发布也很方便，只需要一条指令即可发布到配置GitHub、 Heroku 等平台。下面就开始一步步的完成搭建吧，大家也可以进入<a href="https://hexo.io/zh-cn/">Hexo官网</a>查看详细的搭建教程。</p><h3 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1. 安装Git"></a>1. 安装Git</h3><p><a href="https://git-scm.com/downloads">Git</a>是目前世界上最先进的分布式版本控制系统，可以有效、快速的处理各种项目版本管理。在这里就是用来管理我们写的Hexo博客文章，并上传到GitHub等平台的工具。</p><p>在Mac和Linux系统上安装Git非常容易。</p><p><strong>Mac</strong>电脑上安装只需要执行下面的命令即可，使用<a href="https://brew.sh/index_zh-cn">Homebrew</a>来安装</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">brew install git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Linux</strong>是一个开源的操作系统，市面上有很多优秀的Linux系统，不同的系统上安装Git执行的命令可能略有不同，具体的查看<a href="https://git-scm.com/download/linux">Git官网</a>上对应系统的安装命令，这里以Ubuntu系统安装Git为例。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo apt-get install git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Windows</strong> 上安装需要先<a href="%5Bhttps://gitforwindows.org/">下载Git安装包</a>，然后点击安装包使用默认的配置一步步安装就可以了。</p><p>安装完成之后在命令执行窗口输入<code>git --version</code>即可检查是否安装成功，并能看到安装的git版本号。</p><p><img src="/HexoBlogBuildAndConfig/GitCmd.jpg" alt="GitCmd" title="Git"></p><p>Git有一个专门命令行工具Git Bash，Windows在任何地方只要鼠标右键，然后点击<code>Git Bash Here</code>就可以在当前目录路径下打开命令行窗口了。</p><p><img src="/HexoBlogBuildAndConfig/Git.jpg" alt="Git"></p><h3 id="2-安装nodejs"><a href="#2-安装nodejs" class="headerlink" title="2. 安装nodejs"></a>2. 安装nodejs</h3><p>Hexo是基于<a href="https://nodejs.org/en/download/">nodeJS</a>编写的，所以需要安装一下nodeJs和里面的npm工具。</p><p>Windows和Mac上面安装，下载nodejs的LTS版本的进行安装就可以了。</p><p>Linux上面安装直接执行下面的命令即可：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo apt-get install nodejssudo apt-get install npm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装成功之后可以使用下面的命令查看是否安装成功及对应版本号：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">node -vnpm -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3. 安装Hexo"></a>3. 安装Hexo</h3><p>前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹如blog，然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接右键git bash here打开）。</p><p>输入下面的命令安装Hexo：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后可以使用<code>hexo -v</code>查看是否安装成功及hexo的版本号。</p><p>Hexo安装之后，再执行下面命令初始化Hexo项目，这里的<code>Blog</code>名称可以随便取。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo init Blogcd Blognpm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>初始化成功之后，会在当前目录下面创建一个Blog文件夹，Blog文件下面会生成下面这些目录文件：</p><ul><li>node_modules: 依赖包</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>_config.yml: 博客的配置文件</li></ul><p>然后可以使用下面的命令生成静态网页</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo generate 或简写成 hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后启动本地服务可以让我们在浏览器上本地预览一下网页</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&#x2F;&#x2F; 开启本地服务，可以使用 Ctrl + C 停止服务hexo server 或简写成 hexo s <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>服务开启之后，就可以在浏览器上面输入下面的地址访问Hexo网页了</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span><span class="token header-name keyword">localhost:</span>4000 或 http://127.0.0.1:4000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/HexoBlogBuildAndConfig/HelloHexo.png" alt="hello hexo"></p><p>到此，我们的博客已经实现了在本地服务器上面访问了，但是我们还需要将我们的博客发布到远程服务器上，让更多的人访问。</p><h3 id="4-将Hexo博客托管到第三方平台"><a href="#4-将Hexo博客托管到第三方平台" class="headerlink" title="4. 将Hexo博客托管到第三方平台"></a>4. 将Hexo博客托管到第三方平台</h3><p>我们可以将我们的博客托管到GitHub、Gitlab、Coding等平台上面，这里以GitHub为例，其他平台操作步骤大致相同。</p><h4 id="4-1-创建一个GitHub个人仓库"><a href="#4-1-创建一个GitHub个人仓库" class="headerlink" title="4.1 创建一个GitHub个人仓库"></a>4.1 创建一个GitHub个人仓库</h4><p>首先，你先要有一个GitHub账户，可以使用邮箱注册。</p><p>注册完登录后，在github.com中看到一个New repository，点击新建仓库。</p><p><img src="/HexoBlogBuildAndConfig/NewRepository.png" alt="New Repository"></p><p>创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxx.github.io，其中xxx就是你注册GitHub的用户名。我这里是已经创建过了。</p><p><img src="/HexoBlogBuildAndConfig/CreateRepository.png" alt="Create Repository"></p><p>输入仓库名之后直接点击Create repository就可以了。</p><h4 id="4-2-生成SSH并添加到GitHub"><a href="#4-2-生成SSH并添加到GitHub" class="headerlink" title="4.2 生成SSH并添加到GitHub"></a>4.2 生成SSH并添加到GitHub</h4><p>首先需要配置一下Git的user.name和user.email信息，直接使用下面的命令：</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git config user.name <span class="token string">"your github account"</span>git config user.email <span class="token string">"your email"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里的user.name输入你的GitHub用户名，user.email输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。配置之后可以使用</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git config user.namegit config user.email<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>来查看配置的信息，然后执行下面的命令创建SSH。</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa -C &quot;your email&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入命令之后会提示输入密码，不用管直接一路回车，最后会在你的计算机用户（如WIndows为C:/Users/xyq/）下面生成一个<code>.ssh</code>文件夹（需要设置显示隐藏文件及文件夹），可以看到.ssh文件下面有2个文件<code>id_rsa</code>和<code>id_rsa.pub</code>,</p><p>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>而后在GitHub的Setting中，找到SSH keys的设置选项，点击New SSH key<br>把你的id_rsa.pub用记事本打开，然后把里面的全部信息复制到Key里面，Title可以随便填写，然后点击Add SSH Key就可以了。</p><p><img src="/HexoBlogBuildAndConfig/AddSSH.png" alt="Add SSH Key"></p><p>然后输入下面的命令可以查看我们的配置是否成功：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-3-将Hexo发布到GitHub"><a href="#4-3-将Hexo发布到GitHub" class="headerlink" title="4.3 将Hexo发布到GitHub"></a>4.3 将Hexo发布到GitHub</h4><p>这一步，我们就可以将Hexo和GitHub关联起来，也就是将Hexo生成的文章部署到GitHub上，打开站点配置文件 <code>_config.yml</code>，翻到最后，修改为如下配置：</p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repo:     github: git@github.com:xiayunquan&#x2F;xiayunquan.github.io.git,master    coding: your_coding_project_url,master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>type就是仓库管理系统，我们用的是git；repo就是代码托管平台，这里需要配置你的仓库地址和git分支，仓库地址可以使用<code>https</code>地址或<code>ssh</code>地址2种方式，因为我们已经配置了ssh公钥，所以这里使用ssh地址的形式，使用https地址形式在提交git代码的时候可能要输入账号和密码，不方便，还有就是国内使用https形式提交到GitHub服务器上的时候，可能存在网络代理的问题。</p><p>配置文件修改好了之后，接下来就是发布网站了，但首先我们要安装一下<code>hexo-deployer-git</code>这个插件，</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后执行下面的命令就可以把网站部署到GitHub了</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&#x2F;&#x2F; 清除生成的缓存数据hexo clean&#x2F;&#x2F; 生成静态网页内容hexo generate 或 hexo g&#x2F;&#x2F; 发布hexo deploy 或 hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当看到命令窗口打印<code>INFO Deploy done:git</code>就说明部署成功了，过一会儿就可以在<code>https://yourGithubName.github.io</code> 这个网站看到你的博客了！！</p><h4 id="4-4-绑定个人域名"><a href="#4-4-绑定个人域名" class="headerlink" title="4.4 绑定个人域名"></a>4.4 绑定个人域名</h4><p>现在你的个人网站的地址是 yourname.github.io，如果觉得这个网址逼格不太够，这就需要你设置个人域名了，但是需要花钱。如果不需要绑定个人域名就可以直接跳过这一步。</p><p>域名注册平台有很多，如阿里云、Godaddy、Namesilo等，不同的平台收费和续费价格不一样，注册的域名不同的后缀的价格也不一样，比如最广泛的.com就比较贵，看个人喜好咯。这里以Namesilo为例看一下如何购买域名。</p><p>首先需要注册一个Namesilo账号并登录，然后在输入框输入你想要创建的域名（不带后缀），</p><p>然后看到有很多不同后缀的域名可以选择，选一个你喜欢的域名点击Add添加到购物车，</p><p><img src="/HexoBlogBuildAndConfig/domain.jpg" alt="选择域名"></p><p>购买成功后,需要到注册时填写的邮箱地址确认，然后需要先去进行实名认证,然后在域名控制台中，就能看到你购买的域名。</p><p><img src="/HexoBlogBuildAndConfig/dns.jpg" alt="域名解析"></p><p>接下来需要点击右边的蓝色按钮进行DNS解析，</p><p>默认会生成几条解析记录，把后面的删除，只留下两条记录<code>A</code>和<code>CNAME</code>，可以点击<code>EDIT</code>修改内容。也可以全部删除，自己创建新的记录。可以看到我们需要输入ip地址，这个ip地址就是前面我们博客对应的ip，在命令窗口使用下面的命令就可以得到ip了：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ping yourgithubname.github.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/HexoBlogBuildAndConfig/ping.jpg" alt="ping"></p><p>有了ip地址之后，我们编辑<code>A</code>记录的ip为刚刚的pin出来的ip就行了，A记录的作用就是输入个人域名后会跳转到 github博客的ip站点，然后再编辑<code>CNAME</code>记录，HOSTNAME输入框中输入<code>www</code> ，地址框中输入个人域名yourgithubname.github.io就可以了，CNAME记录的作用就是输入个人域名后，会跳转到github博客的域yourgithubname.github.io，通过域名跳转到对应ip站点。</p><p><img src="/HexoBlogBuildAndConfig/dns2.jpg" alt="域名解析"></p><p>最后，需要把这个申请的个人域名配置到GitHub你的仓库的Setting中，</p><p><img src="/HexoBlogBuildAndConfig/binddomain.jpg" alt="绑定域名"></p><p>点击Save保存成功之后，过一会儿就可以使用个人域名进行访问了，当然使用yourgithubname.github.io也是可以访问博客的，只是会自动的跳转到你什么的域名。</p><p>最后需要注意的是我们购买的域名有效期是1年，如果你需要到期后自动续费，可以在刚开始购买的时候配置自动续费，默认是不自动续费，第一次购买的时候一般有折扣，自动续费的时候就没有折扣了，这个看自己的需求了。</p><h4 id="4-5-将博客源文件提交到GitHub分支"><a href="#4-5-将博客源文件提交到GitHub分支" class="headerlink" title="4.5 将博客源文件提交到GitHub分支"></a>4.5 将博客源文件提交到GitHub分支</h4><p>由于<code>hexo d</code>上传部署到GitHub的其实是hexo编译后的文件，是用来生成网页的，不包含源文件。也就是上传的是在本地目录里自动生成的<code>.deploy_git</code>里面。而其他文件 ，包括我们写在source 里面的，和配置文件，主题文件，都没有上传到GitHub。如果你现在在自己的笔记本上写的博客，部署在了网站上，那么你在家里用台式机，或者实验室的台式机，发现你电脑里面没有博客的文件，或者要换电脑了，最后不知道怎么移动文件，怎么办？</p><p>在这里我们就可以新建一个git的分支专门管理我们的源文件，这样每次打开不一样的电脑，只需要进行简单的配置和并把GitHub上的文件同步下来，就可以无缝操作了。</p><p>首先，需要在GitHub上新建一个分支，如“source”分支，名字随便起。并在这个仓库的Settings中，设置默认分支为刚刚创建的分支source（这样每次同步的时候就不用指定分支，比较方便）。</p><p><img src="/HexoBlogBuildAndConfig/DefaultBranchs.jpg" alt="默认分支设置"></p><p>然后在本地的任意目录下执行下面命令</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; git clone git@github.com:xiayunquan&#x2F;xiayunquan.github.io.gitgit clone your_repository_git_address<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将你的仓库克隆到本地，因为默认分支已经设成了source，所以clone时只会clone了source分支。</p><p>接下来在克隆到本地的yourgithubname.github.io中，把除了.git 文件夹外的所有文件都删掉</p><p>把之前我们写的博客源文件全部复制过来，除了.deploy_git。复制过来的源文件应该有一个.gitignore，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下内容，表示这些类型文件不需要上传到git：</p><pre class="line-numbers language-none"><code class="language-none">.DS_StoreThumbs.dbdb.json*.lognode_modules&#x2F;public&#x2F;.deploy*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，如果你之前克隆过theme中的主题文件，那么应该把主题文件中的.git文件夹删掉，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候导致你的themes下面的主题文件无法上传，上传之后GitHub的themes下面的文件夹是空的，文件夹图标上有一个向右的白色箭头，如下所示</p><p><img src="/HexoBlogBuildAndConfig/ChildGitProject.jpg" alt="Git子系统文件夹"></p><p>这就说明themes下面还有一个.get目录，解决办法就是删除themes下面的这个.git文件，然后再执行下面的命令即可。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git rm --cached [文件夹名，比如这里的hexo-themes-matery]git add .git commit -m &quot;commit messge&quot;git push origin [branch_name]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样所有的源文件就上传完了，可以在你的github上看一看创建的分支上有没有上传上去，其中<code>node_modules</code>、<code>public</code>、<code>db.json</code>已经被忽略掉了，没有关系，这些是自动生成的，不需要上传，因为在别的电脑上需要重新输入命令会重新生成 。</p><p><strong>更换电脑操作</strong><br>在另一台电脑上搭建博客的环境，跟之前的环境搭建流程一样，</p><ul><li>安装git，并设置git全局邮箱和用户名</li><li>安装nodejs</li><li>安装hexo</li><li>然后在任意文件夹下，克隆source分支到文件夹</li><li>进入这个文件夹，执行<code>npm install</code>和<code>npm install hexo-deployer-git --save</code>，安装nodejs环境及部署插件</li><li>最后执行<code>hexo g</code>和<code>hexo d</code>生成并部署网站就可以在新电脑上开始写你的博客了</li></ul><p>但是不要忘了，每次写完最好都把源文件上传到GitHub，这样在其他电脑上每次先拉去一下最新的源文件就能继续写文章了。</p><p>到此，我们的博客基本框架搭建就已经完成了，接下来就可以开始你的博客文章创作以及修改博客主题的一些配置。</p><h3 id="Hexo的基本配置"><a href="#Hexo的基本配置" class="headerlink" title="Hexo的基本配置"></a>Hexo的基本配置</h3><p>在博客的根目录下的<code>_config.yml</code>就是整个hexo框架的配置文件了。可以在里面修改大部分的配置。详细的配置可参考<a href="https://hexo.io/zh-cn/docs/configuration">官方配置</a> 。</p><p><img src="/HexoBlogBuildAndConfig/config.jpg" alt="Hexo配置文件"></p><p>配置参数非常多，这里看一些必须的配置</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>网站标题</td></tr><tr><td>subtitle</td><td>网站副标题</td></tr><tr><td>description</td><td>网站描述</td></tr><tr><td>author</td><td>你的名字，文章的作者</td></tr><tr><td>language</td><td>网站使用的语言</td></tr><tr><td>timezone</td><td>网站时区。Hexo 默认使用您电脑的时区。</td></tr><tr><td>url</td><td>网址，需要把<code>url</code>改成你的网站域名。</td></tr><tr><td>root</td><td>网站根目录，这里写/即可</td></tr><tr><td>permalink</td><td>文章的 永久链接 格式</td></tr><tr><td>theme</td><td>网站的主题，如果你不喜欢默认的主题，你可以去<a href="https://hexo.io/themes/">官网</a>下载一个你喜欢的主题，然后放到themes目录下面，再将这个theme参数修改为你的主题就可以了，具体的稍后会讲</td></tr><tr><td>deploy</td><td>网站部署配置</td></tr><tr><td></td><td>仓库类型</td></tr><tr><td></td><td>仓库地址，这个我们前面已经配置过了</td></tr><tr><td></td><td>仓库分支，如果有多个仓库，则分支直接写在repo地址后面</td></tr></tbody></table><p>permalink，也就是你生成某篇文章时的那个链接格式，具体的格式选项请参考<a href="https://hexo.io/zh-cn/docs/permalinks">官方配置的永久链接</a>格式。</p><p>trailing_index，为true表示不显示文章链接最后的.html，</p><p>比如我新建一个文章叫temp.md，那么这个时候他自动生成的地址就是<a href="http://yoursite.com/temp/%E3%80%82">http://yoursite.com/temp/。</a></p><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>Hexo官网上面有非常多好看的主题，你可以选择自己喜欢的主题下载下来放到themes文件夹下面，个人觉得比较好看的主题有Butterfly、Indigo、Matery等，这里以更换为Matery主题为例。</p><p>首先点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">官方下载地址</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>git clone</code> 命令来下载:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>记得下载之后把hexo-theme-matery目录下面的.git目录删除，不然会出现上面说过的源文件无法上传到GitHub的情况</p></blockquote><p>然后修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><p>建议把根目录下的_config.yml配置文件中的per_page的分页条数值修改为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示，我设置的10，但是主题会默认给我们修改成6的倍数，一页显示了12条数据。</p><h4 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h4><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h4><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h4><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="新建留言板-contact-页（可选的）"><a href="#新建留言板-contact-页（可选的）" class="headerlink" title="新建留言板 contact 页（可选的）"></a>新建留言板 contact 页（可选的）</h4><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> contact<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h4 id="新建友情链接-friends-页（可选的）"><a href="#新建友情链接-friends-页（可选的）" class="headerlink" title="新建友情链接 friends 页（可选的）"></a>新建友情链接 friends 页（可选的）</h4><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-09-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://img-blog.csdnimg.cn/20200401094829557.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"郭霖的专栏"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"每当你在感叹，如果有这样一个东西就好了的时候，请注意，其实这是你的机会"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://guolin.blog.csdn.net/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://liuwangshu.cn/img/my.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"刘望舒"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"Android进阶三部曲系列图书作者、腾讯云TVP、前华为技术专家"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://liuwangshu.cn/system.html"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://pic1.zhimg.com/v2-fbfbfc97fee159541dd5a7ec4579a83c_xl.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"扔物线"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"Google认证开发专家，Compose、Kotlin、自定义View系列教程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://rengwuxian.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/medias/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去探索"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="新建-404-页"><a href="#新建-404-页" class="headerlink" title="新建 404 页"></a>新建 404 页</h4><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token number">404</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/404/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"Oops～，我崩溃了！找不到你想要的页面 :("</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找   </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ol><li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)     </li><li>在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.      </li><li>注意每个二级菜单模块前要加 <code>-</code>.     </li><li>注意缩进格式  </li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token punctuation">...</span>  <span class="token key atrule">Medias</span><span class="token punctuation">:</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list    <span class="token key atrule">children</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Music        <span class="token key atrule">url</span><span class="token punctuation">:</span> /music        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>music      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Movies        <span class="token key atrule">url</span><span class="token punctuation">:</span> /movies        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>film<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="中文链接转拼音"><a href="#中文链接转拼音" class="headerlink" title="中文链接转拼音"></a>中文链接转拼音</h4><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment"># default: '-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h4 id="文章字数统计插件"><a href="#文章字数统计插件" class="headerlink" title="文章字数统计插件"></a>文章字数统计插件</h4><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置文章字数统计为 true.</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置站点文章总字数统计为 true.</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读时长.</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读次数.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="访问量和访问人次统计"><a href="#访问量和访问人次统计" class="headerlink" title="访问量和访问人次统计"></a>访问量和访问人次统计</h4><p>在网站页脚位置显示不蒜子访问人数统计，只需修改主题下的 <code>_config.yml</code>的这些属性就可以了。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 不蒜子(http://busuanzi.ibruce.info/) 网站统计</span><span class="token key atrule">busuanziStatistics</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">totalTraffic</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 总访问量</span>  <span class="token key atrule">totalNumberOfvisitors</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 总人次</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h4><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h4 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h4><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h4 id="修改网页标签图标和网站logo"><a href="#修改网页标签图标和网站logo" class="headerlink" title="修改网页标签图标和网站logo"></a>修改网页标签图标和网站logo</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">favicon</span><span class="token punctuation">:</span> /favicon.png<span class="token key atrule">logo</span><span class="token punctuation">:</span> /medias/logo.png<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h4><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector">.bg-color</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #4cbf30 0%<span class="token punctuation">,</span> #0f9d58 100%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">&#123;</span>   <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h4><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h4 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h4><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 是否在首页显示音乐</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span>         <span class="token comment"># 非吸底模式有效</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">server</span><span class="token punctuation">:</span> netease   <span class="token comment"># require music platform: netease, tencent, kugou, xiami, baidu</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> playlist    <span class="token comment"># require song, playlist, album, search, artist</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">503838841</span>     <span class="token comment"># require song id / playlist id / album id / search keyword</span>  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token comment"># 开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span>       <span class="token comment"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'random'</span>   <span class="token comment"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span>   <span class="token comment"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7</span>       <span class="token comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 列表默认折叠</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p><code>id</code>获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，<code>playlist</code>的<code>id</code></p><p>即为这串数字。</p></blockquote><h3 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p><strong>最简示例</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>最全示例</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">hide</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="为文章添加评论功能"><a href="#为文章添加评论功能" class="headerlink" title="为文章添加评论功能"></a>为文章添加评论功能</h3><p>Hexo评论模块的配置有很多种方式，这里推荐一个<a href="https://www.livere.com/apply">livere</a> ，是韩国的一个评论系统，支持免费和收费2中模式，一般个人博客使用免费版本就可以了。</p><p>首先需要注册一个账号并登录，然后安装免费版本（City版），</p><p><img src="/HexoBlogBuildAndConfig/LivereInstall.jpg" alt="LivereInstall"></p><p>点击现在安装然后填写相关信息就可以看到一个配置js代码了，我们这里只需要使用代码里面的uid就可以了。</p><p><img src="/HexoBlogBuildAndConfig/livere.jpg" alt="livere"></p><p>拿到uid之后，我们需要配置一下我们的themes目录下面的_config.yml文件中的livere信息就好了，我使用的主题是hexo-theme-matery，配置如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">livere:  enable: <span class="token boolean">true</span>  uid: 刚刚拿到的uid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后执行<code>hexo g</code> 和 <code>hexo d</code>命令来成本网页并发布就可以看到每篇文章后面出现来必力评论模块了。</p><h3 id="安装本地图片插件"><a href="#安装本地图片插件" class="headerlink" title="安装本地图片插件"></a>安装本地图片插件</h3><p>在Markdown语法中显示一张图片，需要这张图片的链接地址，如果是本地使用，则直接使用本地图片的绝对路径就可以了，而如果生成静态网页就需要先把图片上传到服务器获取图片链接，市面上有一些免费的图片服务器，你也可以购买自己的服务器专门来管理图片，其实我们可以为Hexo安装一个插件<a href="https://github.com/CodeFalling/hexo-asset-image">hexo-asset-image</a> 把本地图片直接发布到托管平台，然后生成图片链接。</p><p>首先需要安装hexo-asset-image插件：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> https://github.com/CodeFalling/hexo-asset-image --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后我们新建一篇文章“HexoImageExample”的时候，会在<code>_posts</code> 目录下面同时生成一个以“HexoImageExample”命名的文件夹以及一个HexoImageExample.md文件，这个文件夹就是用来存放图片的。</p><p>我们打开HexoImageExample.md文件，使用下面的语法来定义图片及显示图片：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token font-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> HexoImageExample<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2021-10-13 14:41:03</span></span><span class="token punctuation">---</span></span>// 定义图片<span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">image</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ./HexoImageExample/image.jpg<span class="token string">"ImageTitle"</span></span><span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">image2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ./HexoImageExample/image2.jpg</span>// 显示图片![image]// 或者直接使用下面这种常规方式显示![image3]( ./HexoImageExample/image3.jpg)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里需要注意的是图片的路径需要加上<code>./HexoImageExample</code></p><p>最后改一下配置文件<code>_config.yml</code>里面的<code>post_asset_folder</code>属性值，改成<code>true</code>。</p><p>最后直接执行<code>hexo g</code> 和 <code>hexo d</code>命令来成本网页并发布就可以了。</p><blockquote><p> 参考链接：<a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">https://blog.csdn.net/sinat_37781304/article/details/82729029</a></p></blockquote><h3 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h3><p>推广是很麻烦的事情，怎么样别人才能知道我们呢，首先需要让搜索引擎收录你的这个网站，别人才能搜索的到。那么这就需要SEO优化了。</p><blockquote><p>SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。</p></blockquote><p>刚建站的时候是没有搜索引擎收录我们的网站的。可以在如在百度搜索引擎中输入<code>site:域名</code>来查看一下。</p><p><img src="/HexoBlogBuildAndConfig/site.jpg" alt="Hexo配置文件"></p><p><strong>百度seo</strong></p><ol><li>登录百度站长平台添加网站</li></ol><p>登录<a href="https://ziyuan.baidu.com/linksubmit/index">百度站长平台</a>，在站点管理中添加你自己的网站。</p><p>验证网站有三种方式：文件验证、HTML标签验证、CNAME验证。</p><p>第三种方式最简单，只要将它提供给你的那个xxxxx使用CNAME解析到xxx.baidu.com就可以了。也就是前面购买域名的时候，进行DNS解析的地方再添加一条CNAME记录。</p><ol start="2"><li>提交链接</li></ol><p>我们需要使用npm自动生成网站的sitemap，然后将生成的sitemap提交到百度和其他搜索引擎</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-generator-sitemap --save     npm install hexo-generator-baidu-sitemap --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这时候你需要在你的根目录下_config.xml中看看url有没有改成你自己购买的域名：</p><p>重新部署后，就可以在public文件夹下看到生成的sitemap.xml和baidusitemap.xml了。</p><p>然后就可以向百度提交你的站点地图了。</p><p>这里建议使用自动提交。</p><p>自动提交又分为三种：主动推送、自动推送、sitemap。</p><p>可以三个一起提交不要紧。</p><p>自动推送：把百度生成的自动推送代码，放在主题文件/layout/common/head.ejs的适当位置，然后验证一下就可以了。<br>sitemap：把两个sitemap地址，提交上去，看到状态正常就OK了。</p><p>百度收录比较慢，慢慢等个十天半个月再去<code>site:域名</code>看看有没有被收录。</p><p><strong>Google的SEO</strong><br>流程一样，Google更简单，而且收录更快，进入<a href="https://search.google.com/search-console/sitemaps?resource_id=http://fangzh.top/&hl=zh-CN">Google站点地图</a>，提交网站和sitemap.xml，就可以了。如果你这个域名在Google这里出了问题，那你就提交 yourname.github.io，这个链接，效果是一样的。不出意外的话一天内Google就能收录你的网站了。不过Google站点平台需要VPN才能进去。</p><p>其他的搜索平台，如搜狗搜索，360搜索，流程是一样的。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>好了，到这里整个Hexo搭建博客的流程就结束了，相信你也搭建了一个属于你自己的博客！如有任何问题，欢迎在下面评论留言！</p><p>下面就是我的博客：<a href="https://xiayunquan.xyz/">https://xiayunquan.xyz</a> 或 <a href="https://xiayunquan.github.io/">https://xiayunquan.github.io</a></p><p><img src="/HexoBlogBuildAndConfig/MyBlog.png" alt="我的博客"></p>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础语法-关键字的使用</title>
      <link href="/JavaKeywords/"/>
      <url>/JavaKeywords/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Java关键字是Java程序语言结构的一部分，它对于编译器有特殊的含义及作用，我们不能用将它们用变量名称（编译会报错）。Java中一共有50个关键字，包含2个保留字<code>const</code>和<code>goto</code>，所有的关键字都是小写，全部的关键字如下表所示：</p><table><thead><tr><th>char</th><th>byte</th><th>short</th><th>int</th><th>long</th></tr></thead><tbody><tr><td><strong>float</strong></td><td><strong>double</strong></td><td><strong>boolean</strong></td><td><strong>if</strong></td><td><strong>else</strong></td></tr><tr><td><strong>switch</strong></td><td><strong>case</strong></td><td><strong>break</strong></td><td><strong>default</strong></td><td><strong>do</strong></td></tr><tr><td><strong>while</strong></td><td><strong>continue</strong></td><td><strong>for</strong></td><td><strong>try</strong></td><td><strong>catch</strong></td></tr><tr><td><strong>throw</strong></td><td><strong>throws</strong></td><td><strong>finally</strong></td><td><strong>return</strong></td><td><strong>private</strong></td></tr><tr><td><strong>protected</strong></td><td><strong>public</strong></td><td><strong>class</strong></td><td><strong>interface</strong></td><td><strong>extends</strong></td></tr><tr><td><strong>implements</strong></td><td><strong>this</strong></td><td><strong>super</strong></td><td><strong>new</strong></td><td><strong>import</strong></td></tr><tr><td><strong>package</strong></td><td><strong>instanceof</strong></td><td><strong>enum</strong></td><td><strong>abstract</strong></td><td><strong>void</strong></td></tr><tr><td><strong>final</strong></td><td><strong>static</strong></td><td><strong>volatile</strong></td><td><strong>transient</strong></td><td><strong>synchronized</strong></td></tr><tr><td><strong>native</strong></td><td><strong>strictfp</strong></td><td><strong>assert</strong></td><td><strong>const</strong></td><td><strong>goto</strong></td></tr></tbody></table><p>另外还有3个标志符<strong>true</strong>、<strong>false</strong>、<strong>null</strong> 一共53个，这些标志符在Java语法中都有特殊的含义，不能当作变量名使用，掌握这些关键字的作用以及熟练的使用它们是学好Java的必备技能。</p><p>上面的表格中列出了所有的关键字，它们主要分为几大类：8中基本数据类型、程序逻辑控制、异常处理、类方法和变量修饰符、类和接口的相关修饰。下面就以各个分类来简单说一下每一个关键字的作用。</p><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>java是一门强类型语言，Java的数据类型分为基本数据类型和引用数据类型.</p><p>Java一共有8种基本数据类型。分为：整型、浮点型、布尔型、字符型，每种类型占用的字节长度以及取值范围如下表所示。</p><table><thead><tr><th>名称</th><th>类型</th><th>长度</th><th>默认值</th><th>取值范围</th><th>示例</th></tr></thead><tbody><tr><td>byte</td><td>字节型</td><td>占1个字节</td><td>0</td><td>-128 ~ 127</td><td>21</td></tr><tr><td>short</td><td>短整型</td><td>占2个字节</td><td>0</td><td>-32768 ~ 32767</td><td>123</td></tr><tr><td>int</td><td>整型</td><td>占4个字节</td><td>0</td><td>-2^31 ~ 2^31 - 1</td><td>433</td></tr><tr><td>long</td><td>长整型</td><td>占8个字节</td><td>0L</td><td>-2^63 ~ 2^63 - 1</td><td>34L</td></tr><tr><td>float</td><td>浮点型</td><td>占4个字节</td><td>0.0F</td><td>-2^128 ~ 2^128</td><td>32.2f</td></tr><tr><td>double</td><td>双精度浮点型</td><td>占8个字节</td><td>0.0D</td><td>-2^1024 ~ 2^1024</td><td>55D</td></tr><tr><td>boolean</td><td>布尔型</td><td>占1或4个字节</td><td>false</td><td>true or false</td><td>true</td></tr><tr><td>char</td><td>字符型</td><td>占2个字节</td><td>空</td><td>‘\u0000’ ~ ‘\uffff’</td><td>‘a’</td></tr></tbody></table><blockquote><ul><li>boolean类型被编译为int类型，等于是说JVM里占用字节和int完全一样，int是4个字节，于是boolean也是4字节</li><li>boolean数组在Oracle的JVM中，编码为byte数组，每个boolean元素占用8位=1字节</li></ul></blockquote><h3 id="程序逻辑控制"><a href="#程序逻辑控制" class="headerlink" title="程序逻辑控制"></a>程序逻辑控制</h3><p>Java逻辑控制包含条件控制和循环控制，条件控制可以使用if、else，循环控制可以使用for、while。具体包含下面这些关键字。</p><table><thead><tr><th>关键字</th><th>含义</th><th>作用</th></tr></thead><tbody><tr><td>if</td><td>如果…</td><td>if(…){}，如果小括号中的条件成立返回true，则执行大括号中的内容</td></tr><tr><td>else</td><td>否则…</td><td>else 必须与if连用，不能单独使用，else后面可以接if语句</td></tr><tr><td>switch</td><td>开关</td><td>switch(表达式) {<br>case   常量表达式1: 语句1; <br>break;<br>case   常量表达式2: 语句2; <br>default: 默认语句<br>}<br>case后面的常量表达式的数据类型要和switch后面的表达式的数据类型一致，且只能是基本数据类型或String类型（Java 1.7及以上支持）</td></tr><tr><td>case</td><td>案例</td><td>用于switch语法中，表示switch的一个条件分支，如上面的常量表达式1等于switch表达式的值时，则执行语句1，否则继续判断下面的case</td></tr><tr><td>break</td><td>打破、中断</td><td>用于提前退出 for、while 或 do 循环，或者在 switch 语句中用来结束 case 块。 break 总是退出最深层的 while、for、do 或 switch 语句。</td></tr><tr><td>default</td><td>默认</td><td>用来标记 switch 语句中的默认分支，如果switch中没有break语句或者任何一个break语句没有执行到，则都会执行default语句；default语句一般写在switch的最后，如果写在最上面或中间，则default下面的所有case永远不会被执行。</td></tr><tr><td>for</td><td>为…</td><td>for 语句的形式为 for(initialize; condition; increment) 。每次执行循环体之前将计算 condition 的结果。如果 condition 为 true，则执行循环体。 每次执行循环体之后，在计算下一个迭代的 condition 之前，将执行 increment 语句。</td></tr><tr><td>do</td><td>执行</td><td>do {<br>} while(condition);<br>do 循环体至少执行一次。循环体执行结束后判断condition是否成立，成立则再次执行循环体，直到condition返回false</td></tr><tr><td>while</td><td>当…</td><td>while(condition) {<br>}<br>当condition为true时则会执行循环体内容</td></tr><tr><td>continue</td><td>继续</td><td>for(int i = 0; i &lt; 5; i++) {<br>if (i == 3) continue;<br>Log.i(“index”, i);<br>}<br>出现在循环体中，当执行到continue语句时，其后面的循环体内容将不再执行，直接进行下一次循环操作，如上面的例子中将不会打印3</td></tr></tbody></table><p>###异常处理</p><p>异常是程序运行中出现的错误。会打断程序正常执行。是java中提供的一种错误提示和处理的机制。</p><p> 异常分为2类：</p><ul><li>错误(ERROR)：通常指不是由程序造成并且在程序中不能处理或避免的错误。比如：内存溢出，Java虚拟机出错等</li><li>异常(Exception)：通常指由于程序代码不严谨造成的可以避免的错误或在程序中可以预先处理的错误。</li></ul><p>抛出一个异常使用throw关键字，通过throws关键字在方法上标注有可能会发生的异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">printAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NumberFormatException</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token string">"年龄不能小于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序抛出的异常可以使用try-catch进行捕获处理，</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token comment">// 尝试执行可能会发生异常的代码块</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 捕捉try块中发生的异常并处理</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 多重catch时父类异常必须写到子类之后，同级的异常没有先后顺序。</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 必须执行块，无论try中是否发生异常，该块都会被执行，即使try中有return也会在return之前被执行，但是如果try中有System.exit()，则Java虚拟机会退出，则不会执行finally。</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>###类方法和变量修饰符</p><p>在Java中一共有4中访问修饰符。用于控制类和数据的访问权限。</p><p>按权限范围由小到大依次为：private、空（default）、protected、public.</p><p>控制的范围如下所示：</p><table><thead><tr><th>访问范围</th><th>public</th><th>protected</th><th>default</th><th>private</th></tr></thead><tbody><tr><td>同类</td><td>ok</td><td>ok</td><td>ok</td><td>ok</td></tr><tr><td>同包</td><td>ok</td><td>ok</td><td>ok</td><td></td></tr><tr><td>子类（不同包）</td><td>ok</td><td>ok</td><td></td><td></td></tr><tr><td>不同包无继承的类</td><td>ok</td><td></td><td></td><td></td></tr></tbody></table><ul><li>抽象方法必须为public或者protected（因为如果为private，则不能被子类继承，子类便无法实现该方法），缺省情况下默认为public。</li><li>接口中的方法必须是public abstract的</li></ul><h3 id="类和接口的相关修饰符"><a href="#类和接口的相关修饰符" class="headerlink" title="类和接口的相关修饰符"></a>类和接口的相关修饰符</h3><p><strong>class</strong>：用来声明新的 Java类，该类是相关变量和/或方法的集合。类是面向对象的程序设计方法的基本构造单位。类通常代表某种实际实体，如几何形状或人。类是对象的模板。每个对象都是类的一个实例。要使用类，通常使用 new 操作符将类的对象实例化，然后调用类的方法来访问类的功能。</p><p> <strong>interface</strong> ：用来声明新的Java接口，接口是方法和常量的集合。接口是 Java 语言的一项强大功能。任何类都可声明它实现一个或多个接口，这意味着它实现了在这些接口中所定义的所有方法。任何非抽象类如果实现了接口则必须提供在该接口中的所有方法的实现，若是抽象类实现了接口则抽象类或其子类要实现接口中的全部方法。</p><p><strong>abstract</strong>：可以修改类或方法。abstract类可以扩展（增加子类），但不能直接实例化。abstract方法不在声明它的类中实现，但必须在某个子类中重写。采用abstract方法的类一定是抽象类，并且必须声明为abstract类。</p><p><strong>extends</strong>：用在 class 或 interface 声明中，用于标识所声明的类或接口是 extends 关键字后的类或接口的子类或子接口。子类继承父类的所有 public 和 protected 变量和方法。 子类可以重写父类的任何非 final 方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ContextImpl</span> <span class="token keyword">extends</span> <span class="token class-name">Context</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Closeable</span> <span class="token keyword">extends</span> <span class="token class-name">AutoCloseable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>implements</strong>：在 class 声明中使用，表示所声明的类提供了在 implements 关键字后面的名称所指定的接口中所声明的所有方法的实现。类必须提供在接口中所声明的所有方法的实现。一个类可以实现多个接口。</p><p> <strong>this</strong> ：用于引用当前实例。 当引用可能不明确时，可以使用 this 关键字来引用当前的实例。</p><p><strong>super</strong> ：用于引用使用该关键字的类的超类。 作为独立语句出现的 super 表示调用超类的构造方法。 super.methodName() 表示调用超类的方法。</p><p><strong>new</strong>：用于创建类的新实例。 new 关键字后面的参数必须是类名，并且类名的后面必须是一组构造方法参数（必须带括号）。</p><p><strong>static</strong></p><p>static表示“全局”或者“静态”的意思，用来修饰成员变量和成员方法，也可以形成静态static代码块，但是Java语言中没有全局变量的概念。</p><p>被static修饰的成员变量和成员方法独立于该类的任何对象。也就是说，它不依赖类特定的实例，被类的所有实例共享。</p><p>只要这个类被加载，Java虚拟机就能根据类名在运行时数据区的方法区内找到他们。因此，static对象可以在它的任何对象创建之前访问，无需引用任何对象。</p><p>用public修饰的static成员变量和成员方法本质是全局变量和全局方法，当声明它类的对象时，不生成static变量的副本，而是类的所有实例共享同一个static变量。static表示不要实例化就可以使用，这样就容易理解多了。</p><p><strong>static变量</strong></p><p>被static修饰的变量，叫静态变量或类变量；没有被static修饰的变量，叫实例变量。</p><p>对于静态变量在内存中只有一个拷贝（节省内存），JVM只为静态分配一次内存，在加载类的过程中完成静态变量的内存分配，可用类名直接访问（方便），当然也可以通过对象来访问（但是这是不推荐的）。</p><p>对于实例变量，每创建一个实例，就会为实例变量分配一次内存，实例变量可以在内存中有多个拷贝，互不影响（灵活）。</p><p><strong>static方法</strong></p><p>静态方法可以直接通过类名调用，任何的实例也都可以调用，因此静态方法中不能用this和super关键字，不能直接访问所属类的实例变量和实例方法(就是不带static的成员变量和成员成员方法)，只能访问所属类的静态成员变量和成员方法。</p><p><strong>static代码块</strong></p><p>static代码块也叫静态代码块，是在类中独立于类成员的static语句块，可以有多个，位置可以随便放，它不在任何的方法体内，JVM加载类时会执行这些静态的代码块，如果static代码块有多个，JVM将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次，利用静态代码块可以对一些static变量进行赋值。</p><p><strong>final</strong>：final可以修饰类、方法和变量。</p><p>修饰类： 最终类，不能被继承。</p><p>修饰方法：最终方法，不能被重写。</p><p>修饰变量：最终变量，常量，一旦赋值不能被改变。</p><p><strong>enum</strong>：枚举是Java中一个特殊的类，一般表示一组常量，比如一年的 4 个季节，一个年的 12 个月份，Java 枚举类使用 enum 关键字来定义，各个常量使用逗号 , 来分割。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">&#123;</span>     RED<span class="token punctuation">,</span> GREEN<span class="token punctuation">,</span> BLUE<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>枚举可以用来创建单例模式，枚举类中也可以定义变量和方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>      INSTANCE<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>native</strong> ：修饰方法，表示该方法是用 Java 以外的语言实现的。Java的不足除了体现在运行速度上要比传统的C++慢许多之外，Java无法直接访问到<br> 操作系统底层（如系统硬件等)，为此Java使用native方法来扩展Java程序的功能。 </p><p>可以将native方法比作Java程序同Ｃ程序的接口，其实现步骤： </p><p>１.  在Java中声明native()方法，然后编译； </p><p>２. 用javah产生一个.h文件； </p><p>３. 写一个.cpp文件实现native导出方法，其中需要包含第二步产生的.h文件（注意其中又包含了JDK带的jni.h文件）； </p><p>４. 将第三步的.cpp文件编译成动态链接库文件； </p><p>５. 在Java中用System.loadLibrary()方法加载第四步产生的动态链接库文件，这个native()方法就可以在Java中被访问了。</p><p> <strong>strictfp</strong>：strictfp的意思是FP-strict，也就是精确浮点的意思。在Java虚拟机进行浮点运算时，如果没有指定strictfp关键字时，Java的编译器以及运行环境在对浮点运算的表达式是采取一种近似于我行我素的行为来完成这些操作，以致于得到的结果往往无法令人满意。而一旦使用了strictfp来声明一个类、接口或者方法时，那么所声明的范围内Java的编译器以及运行环境会完全依照浮点规范IEEE-754来执行。因此如果想让浮点运算更加精确，而且不会因为不同的硬件平台所执行的结果不一致的话，那就用关键字strictfp。可以将一个类、接口以及方法声明为strictfp，但是不允许对接口中的方法以及构造函数声明strictfp关键字。</p><p><strong>transient</strong> ：修饰类的成员变量，表示该类对象在序列化时，这个变量不被序列化。</p><p>我们都知道一个对象只要实现了Serilizable接口，这个对象就可以被序列化，java的这种序列化模式为开发者提供了很多便利，我们可以不必关系具体序列化的过程，只要这个类实现了Serilizable接口，这个类的所有属性和方法都会自动序列化。</p><p>然而在实际开发过程中，我们常常会遇到这样的问题，这个类的有些属性需要序列化，而其他属性不需要被序列化，打个比方，如果一个用户有一些敏感信息（如密码，银行卡号等），为了安全起见，不希望在网络操作（主要涉及到序列化操作，本地序列化缓存也适用）中被传输，这些信息对应的变量就可以加上transient关键字。换句话说，这个字段的生命周期仅存于调用者的内存中而不会写到磁盘里持久化。</p><p><strong>synchronized</strong>：可以应用于方法或语句块，并为一次只应由一个线程执行的关键代码段提供保护。 可防止代码的关键代码段一次被多个线程执行。 如果应用于静态方法，那么，当该方法一次由一个线程执行时，整个类将被锁定。 如果应用于实例方法，那么，当该方法一次由一个线程访问时，该实例将被锁定。 如果应用于对象或数组，当关联的代码块一次由一个线程执行时，对象或数组将被锁定。</p><p><strong>volatile</strong> ：用于表示可以被多个线程异步修改的成员变量。 volatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，所有线程所看到的指定变量的值都是相同的。Java 语言中的 volatile 变量可以被看作是一种 “程度较轻的 synchronized”；与 synchronized 块相比，volatile 变量所需的编码较少，并且运行时开销也较少，但是它所能实现的功能也仅是 synchronized 的一部分。</p><p><strong>instanceof</strong> ：instanceof 是 Java 的一个二元操作符，类似于 ==，&gt;，&lt; 等操作符。它的作用是测试它左边的对象是否是它右边的类的实例，返回 boolean 的数据类型。</p><p><strong>import</strong>：使一个包中的一个或所有类在当前 Java 源文件中可见。可以不使用完全限定的类名来引用导入的类，使用*来引入包下面所有的类。 </p><p><strong>package</strong>：指定在 Java 源文件中声明的类所驻留的 Java 包。 </p><p><strong>goto</strong> ：但无任何作用。结构化程序设计完全不需要 goto 语句即可完成各种流程，而 goto 语句的使用往往会使程序的可读性降低，所以 Java 不允许 goto 跳转。</p><p><strong>const</strong>：是一个类型修饰符，使用const声明的对象不能更新。与final某些类似。</p><p> <strong>null</strong> ：表示无值。 将 null 赋给非原始变量相当于释放该变量先前所引用的对象。 不能将 null 赋给原始类型（byte、short、int、long、char、float、double、boolean）变量。</p><p><strong>true/false</strong> ：表示 boolean 变量的两个合法值中的一个。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java关键字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发者必备工具-常见Android模拟器</title>
      <link href="/AndroidEmulators/"/>
      <url>/AndroidEmulators/</url>
      
        <content type="html"><![CDATA[<h3 id="模拟器的用途介绍"><a href="#模拟器的用途介绍" class="headerlink" title="模拟器的用途介绍"></a>模拟器的用途介绍</h3><p>作为一名Android开发者，模拟器是我们调试和测试应用必备的神器。</p><p>模拟器主要有以下用途：</p><p>第一个是用于<strong>游戏</strong>。游戏玩家可以在他们的电脑上使用模拟器来让一些游戏更容易玩。他们不必依赖设备的电池寿命，借助于键盘、鼠标以及更大的屏幕视野等技巧有助于更好的游戏体验。在大多数情况下，这些小技巧并不违法（在大多数游戏中），所以没有人真正有问题。比较不错的安卓游戏模拟器包括 LDPlayer、BlueStacks、MeMu、KoPlayer 和 Nox等。</p><p>第二个最常见的场景是<strong>开发</strong>。 Android 应用和游戏开发人员在发布前需要尽可能在更多的设备上测试应用和游戏。然后现实情况是并没有太多的手机供开发人员测试，幸运的是，Android Studio 附带的模拟器以及其他众多厂商开发的模拟器为我们解决了这个问题。可以通过设置模拟器的分辨率、设备尺寸、API版本等属性来模拟不同场景的运行效果。</p><p>目前除了Android Studio自带的模拟器外，没有模拟器可以运行最新版本的 Android。 幸运的是，大多数应用程序和游戏仍然可以在旧版本的 Android 上运行，所以这应该不是什么大问题。 而且现在大多数模拟器已经支持 Android 7.0 Nougat 和 Android 9.0 Pie 运行，这些模拟器制造商也一直对模拟器不断的更新升级，相信以后肯定会对Android新版本支持得更加完善。</p><p>另外，从 Windows 11 开始，Windows 将允许使用原生 Android 应用程序。 Windows 11 于 2021 年 10 月 6 日发布，并且应该会在几个月后的某个时间推出 Android 应用程序支持。</p><p>下面列举的这些常见的模拟器各有优势，具体选择用什么模拟器根据实际需求和个人喜好来定。<br><br><br></p><h3 id="1-MuMu（网易MuMu）"><a href="#1-MuMu（网易MuMu）" class="headerlink" title="1. MuMu（网易MuMu）"></a>1. MuMu（网易MuMu）</h3><hr><p>官方下载链接：<a href="http://mumu.163.com/">http://mumu.163.com/</a> 或 <a href="https://www.mumuglobal.com/">https://www.mumuglobal.com/</a></p><blockquote><p> 第一个是国内中文网站，第二个是全球英文网站</p></blockquote><p>支持平台：Windows、Mac        </p><p>目前最新支持：Android 6.0.1，Android 9.0版本还处于测试阶段</p><p>是否收费：免费</p><p><img src="https://img-blog.csdnimg.cn/77fd6c6e895c4ec789eef9d72b4528fd.jpg" alt="MuMu模拟器"></p><p><strong>基本介绍</strong></p><p>网易MuMu目前旗下有2款产品，一款MuMu模拟器，一款MuMu手游助手，都是针对手游玩家开发的安卓模拟器类软件，可在电脑上大屏体验各类游戏与应用。</p><p>MuMu模拟器基于传统安卓模拟器引擎、Android6.0内核、x64架构，是一款相对稳定，能够适配市面99%主流手游和应用的安卓模拟器；</p><p>MuMu手游助手在MuMu模拟器的基础上，增配网易自研星云引擎、Android7.1内核、x64架构，拓展性更强，更能迎合热门新游的配置要求；</p><p>2款产品加持几乎100%覆盖你想体验的热门手游，兼容性超越同类手游安卓模拟器，还可以享受120帧高带来的丝滑感受，免费的海外加速、操作录制、多开、智能键鼠功能满足你不同的游戏需求。</p><p>总体来说MuMu模拟器是一款很不错的模拟器，使用起来很流畅，页面做的很好。而且网易目前一直在对它进行维护更新。</p><p><strong>使用MuMu调试Android应用</strong></p><p>默认MuMu不能自动连接ADB，我们需要在CMD窗口中手动执行下面命令来连接</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb connect 127.0.0.1:7555<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>7555</code>是MuMu模拟器默认端口，然后使用<code>adb devices</code>就可以看到电脑已经连接的所有设备了，如果要断开模拟器ADB连接，只需要执行下面的命令即可。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb disconnect 127.0.0.1:7555<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><br><br></p><h3 id="2-BlueStacks（蓝叠）"><a href="#2-BlueStacks（蓝叠）" class="headerlink" title="2. BlueStacks（蓝叠）"></a>2. BlueStacks（蓝叠）</h3><hr><p>官方下载链接：<a href="https://www.bluestacks.cn/">https://www.bluestacks.cn/</a> 或 <a href="https://www.bluestacks.com/">https://www.bluestacks.com/</a></p><p>支持平台：Windows        </p><p>目前最新支持：Android 7.1.2</p><p>是否收费：免费<br><img src="https://img-blog.csdnimg.cn/fdf2bfd2f2e347b898c7980031813a8a.jpg" alt="BlueStacks"></p><p><strong>基本介绍</strong></p><p>蓝叠安卓模拟器是全球唯一一个拥有核心技术专利的安卓模拟器，并获得高通、英特尔、AMD等行业巨头的投资。<br>“安卓模拟器中的英特尔”、“安卓模拟器的心脏”，这既是合作伙伴对蓝叠安卓模拟器的描述，也是给予的荣誉称号。 由于具有核心技术优势，以及快速的服务响应，经过近年的快速发展，腾讯、网易、阿里巴巴等都成为蓝叠安卓模拟器重要的合作伙伴。与此同时，蓝叠安卓模拟器相比于其他同类产品具有更加良好的兼容性、稳定性和流畅度，以及更好的游戏体验，因此，蓝叠安卓模拟器在普通玩家中拥有良好的口碑和许多忠实的用户，其中不乏痴迷于安卓模拟器引擎的技术极客粉丝。</p><p><strong>连接ADB调试应用</strong></p><p>和MuMu模拟器一样，蓝叠默认也不会自动建立ADB连接，我们需要找到它对应的端口号进行，然后手动执行连接，一般情况下有2种方法找到对应模拟器的端口号，如上这个参考链接<a href="https://www.cnblogs.com/rogunt/p/13047394.html">https://www.cnblogs.com/rogunt/p/13047394.html</a> 。这里我用的是第一种方式。</p><p>首先在cmd窗口（快捷键：Win + R），输入<code>regedit</code>打开注册表编辑器</p><p>然后定位到如下目录</p><p><code>计算机\HKEY_LOCAL_MACHINE\SOFTWARE\BlueStacks_china_gmgr\Guests\Android\Network\0</code><br><img src="https://img-blog.csdnimg.cn/bb5146fc4e644ac2b08b2c9d69d978fe.jpg" alt="注册表编辑器"></p><p>最后找到”InboundRules“的值，打开它可以看到其中有很多端口号，一般第一个的选项就是可以用adb连接的端口号，然后同样执行下面命令连接即可。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb connect 127.0.0.1:5555<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><br><br></p><h3 id="3-Nox（夜神）"><a href="#3-Nox（夜神）" class="headerlink" title="3. Nox（夜神）"></a>3. Nox（夜神）</h3><hr><p>官方下载链接：<a href="https://www.yeshen.com/">https://www.yeshen.com/</a> 或者 <a href="https://www.bignox.com/">https://www.bignox.com/</a></p><p>支持平台：Windows、Mac        </p><p>目前最新支持：Android 5.1/7.1/9.0</p><p>是否收费：免费<br><img src="https://img-blog.csdnimg.cn/d66e4323f8964f37a99b88618533b74f.jpg" alt="Noxi模拟器"></p><p><strong>基本介绍</strong></p><p>夜神模拟器进行了全面的优化，无论是游戏还是应用，用起来都会更稳定、更流畅。除此之外更有超凡的端游操作体验，让你快人一步。</p><ul><li>键鼠操控<ul><li>一键应用云端键盘，即刻享受端游般的游戏体验。使用键盘鼠标，操作快人一步。</li></ul></li><li>极致多开<ul><li>打开多个模拟器，每个模拟器可独立运行游戏。更有多开同步，轻松实现多账号。</li></ul></li><li>操作助手<ul><li>记录下你的复杂操作，下次执行时只需轻轻一点， 即可解放双手。</li></ul></li></ul><p>夜神模拟器默认会自动连接ADB的，所以不用手动连接，一般模拟器都是支持多开的，即可以同时打开运行模拟器，夜神模拟器也是支持多开的，可以同时创建运行不同的模拟器。<br><img src="https://img-blog.csdnimg.cn/c77d7125fcb141b5a79a1d0ce9b2325f.jpg" alt="Nox多开器"><br><br><br></p><h3 id="4-MEmu（逍遥安卓模拟器）"><a href="#4-MEmu（逍遥安卓模拟器）" class="headerlink" title="4. MEmu（逍遥安卓模拟器）"></a>4. MEmu（逍遥安卓模拟器）</h3><hr><p>官方下载链接：<a href="http://www.microvirt.com/">http://www.microvirt.com/</a> 或 <a href="https://www.memuplay.com/">https://www.memuplay.com/</a></p><p>支持平台：Windows        </p><p>目前最新支持：Android 7.1</p><p>是否收费：免费<br><img src="https://img-blog.csdnimg.cn/55f2b53d8eae4c7eaa59cfb75fa963f4.jpg" alt="逍遥模拟器"></p><p><strong>基本介绍</strong></p><ul><li>逍遥模拟器7<ul><li>全新<br>引擎，跑分领先；性能更强，多开挂机更省资源。</li></ul></li><li>超清画质<ul><li>支持OpenGL和DirectX渲染模式；畅享120帧超清电影画质。</li></ul></li><li>智能按键<ul><li>电脑键鼠玩手游，轻松易上手；零延迟电竞级体验，真正端游操控。</li></ul></li><li>全面兼容<ul><li>高配、低配电脑都能玩；适配更多手游应用，稳定更流畅。</li></ul></li></ul><p><strong>连接ADB调试应用</strong></p><p>和MuMu模拟器一样，默认也不会自动建立ADB连接，我们需要找到它对应的端口号进行，然后手动执行连接，一般情况下有2种方法找到对应模拟器的端口号，如上这个参考链接<a href="https://www.cnblogs.com/rogunt/p/13047394.html">https://www.cnblogs.com/rogunt/p/13047394.html</a> 。这里我用的是第二种方式。</p><p>首先打开任务管理器窗口（快捷键：Ctrl + Shift + Esc；</p><p>然后切换到<code>详细信息</code>栏目，并找到逍遥模拟器对应的进程PID；<br><img src="https://img-blog.csdnimg.cn/64ce5053e45445acb8c55f7ce8cf699c.jpg" alt="任务管理器"><br>最后在cmd窗口（win + r）中执行下面的命令，<code>17748</code>为找到的对应PID。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">netstat -ano|findstr &quot;17748&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后可以看到一些端口号，使用这些端口号执行ADB连接命令就行了，有时候端口号太多，不确定是哪个只能一个一个试了。</p><p><img src="https://img-blog.csdnimg.cn/d0450bf51cee4f73b2c1103bf0f67aba.jpg" alt="ADB Connect"></p><p><br><br></p><h3 id="5-LDPlayer（雷电模拟器）"><a href="#5-LDPlayer（雷电模拟器）" class="headerlink" title="5. LDPlayer（雷电模拟器）"></a>5. LDPlayer（雷电模拟器）</h3><hr><p>官方下载链接：<a href="https://www.ldmnq.com/">https://www.ldmnq.com</a> 或 <a href="https://www.ldplayer.net/">https://www.ldplayer.net</a></p><p>支持平台：Windows</p><p>目前最新支持：Android 7.1.2</p><p>是否收费：免费<br><img src="https://img-blog.csdnimg.cn/fdf6600550164541b89d66cc09cb0abc.jpg" alt="LDPlayer"></p><p><strong>基本介绍</strong></p><p>LDPlayer是一款轻量级的安卓模拟器，专注于游戏性能。运行 Android Nougat 7.1，它具有一系列面向游戏玩家的常用功能，包括良好的键盘映射控件、多实例、高 FPS 和图形支持。它借鉴了 Bluestacks 的一些设计，但这并不是一件坏事。这是一个很好的多面手，应该能满足大多数人的需求。</p><p>雷电模拟器默认是开启ADB调试的，可以在模拟器设置中开启或关闭ADB本地链接。</p><p><br><br></p><h3 id="6-Android-Studio-模拟器"><a href="#6-Android-Studio-模拟器" class="headerlink" title="6. Android Studio 模拟器"></a>6. Android Studio 模拟器</h3><hr><p>官方下载链接：<a href="https://developer.android.google.cn/studio/releases/emulator?hl=en">https://developer.android.google.cn/studio?hl=en</a></p><p>支持平台：Windows、Mac、Linux</p><p>目前最新支持：Android 12.0<br><img src="https://img-blog.csdnimg.cn/fd37ac2a31f84f66a2924af967e82033.jpg" alt="Android Studio Emulator"></p><p><strong>基本介绍</strong></p><p>Android Studio 是 Android 的默认集成开发环境或 IDE。它附带了一系列工具，可帮助开发人员专门为 Android 制作应用程序和游戏。Android Studio内置的模拟器就是为了更加方便的测试应用程序或游戏。</p><p>它的功能非常强大，设置比较复杂，而且需要依赖于Android Studio开发环境，因此它的使用对象一般都是Android开发人员。但它是Google官方打造的模拟器，功能丰富，支持添加自定义启动器和键盘，并模拟任何尺寸或外形的设备，包括手机、电视大屏、穿戴设备、车载设备等，甚至可以模拟可折叠设备、挖孔屏！还有一个其他模拟器不能与之匹敌的特点就是它能一直支持最新的Android版本，可以抢先模拟体验Android最新开发的功能及特性。</p><p><img src="https://img-blog.csdnimg.cn/e4bd43db84b24144bb66e9f6f8ea9090.jpg" alt="Android Studio Emulators"><br><img src="https://img-blog.csdnimg.cn/b4d3c5a4e0e44092a9a0256a3563a71c.jpg" alt="New Android Studio Emulator"></p><p>另外，Android Studio模拟器可以支持常见的手机CPU架构（ABI：x86、<code>x86_64</code>、armeabi、armeabi-v7a、arm64-v8a）。x86 、<code>x86_64</code> 在平板和模拟器中用得比较多；armeabi是第5代、第6代的ARM处理器，早期的手机用的比较多；armeabi-v7a是第7代ARM处理器，2011年以后的Android设备基本都使用它；arm64-v8a是第8代64位的ARM处理器，是目前主流的版本。Android Studio模拟器推荐使用x86的CPU架构，运行更加快一点。</p><p>可以使用如下ADB命令查看设备的ABI：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb shell getprop ro.product.cpu.abi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><br><br></p><h3 id="7-Genymotion模拟器"><a href="#7-Genymotion模拟器" class="headerlink" title="7. Genymotion模拟器"></a>7. Genymotion模拟器</h3><hr><p>官方下载链接：<a href="https://www.genymotion.com/download/">https://www.genymotion.com/download/</a></p><p>支持平台：Windows、Mac、Linux</p><p>目前最新支持：Android 10.0</p><p>是否收费：个人使用免费<br><img src="https://img-blog.csdnimg.cn/dd0e7a77406b4e89b723f97daa792a24.jpg" alt="Genymotion"></p><p><strong>基本介绍</strong></p><p>Genymotion 模拟器也是主要面向Android开发人员。 它的功能非常强大，可以创建不同设备尺寸、分辨率、API版本任意组合的模拟器，支持各种常见的设备尺寸及分辨率，满足日常开发需求。<br><img src="https://img-blog.csdnimg.cn/b3e2f0eaf27d40d596fa0bb2176e8ce0.jpg" alt="Genymotion Emulators"></p><p><strong>连接ADB调试应用</strong></p><p>我们可以在Android Studio上安装Genymotion插件，然后可以很方便的像内置模拟器一样在Android Studio开发工具上面调试我们的应用程序及游戏，具体的安装步骤及Genymotion常见的使用问题可以参考<a href="https://www.cnblogs.com/whycxb/p/6850454.html">这篇博客</a>。</p><p><br><br></p><h3 id="8-Phoenix-OS（凤凰系统）"><a href="#8-Phoenix-OS（凤凰系统）" class="headerlink" title="8. Phoenix OS（凤凰系统）"></a>8. Phoenix OS（凤凰系统）</h3><hr><p>官方下载链接：<a href="http://www.phoenixos.com/download_x86/">http://www.phoenixos.com/download_x86</a></p><p>支持平台：Windows、Mac</p><p>目前最新支持：Android 7.1</p><p>是否收费：免费<br><img src="https://img-blog.csdnimg.cn/37db7148e664485488e39f5447b43a20.png" alt="Phoenix OS"></p><p><strong>基本介绍</strong></p><p>Phoenix OS 是适用于 PC 的较新的 Android 模拟器之一，实际上它更像一个操作系统。 像现在的大多数情况一样，它拥有游戏玩家体验。 然而，它也拥有类似桌面的体验，因此它实际上也能很好地提高生产力。 它有 Google Play 服务，虽然更新这些服务有时会有点痛苦。 这意味着您可以在 Google Play 商店中获得所有应用和游戏。 Phoenix OS 支持 Android 5.1和7.1。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上介绍的8个常见模拟器各自有自己独特的优势，有些适合游戏玩家，有些更利于Android开发调试，下面以一张表格整理一下它们的特点及区别。</p><table><thead><tr><th>模拟器</th><th>支持系统</th><th>安卓系统</th><th>是否收费</th><th>优势特点</th></tr></thead><tbody><tr><td><a href="http://mumu.163.com/">MuMu</a></td><td>Windows、Mac</td><td>6.0、9.0</td><td>免费</td><td>稳定快速、网易出品</td></tr><tr><td><a href="https://www.bluestacks.cn/">蓝叠</a></td><td>Windows</td><td>7.1.2</td><td>免费</td><td>游戏、开发调试均可</td></tr><tr><td><a href="https://www.yeshen.com/">夜神</a></td><td>Windows、Mac</td><td>7.1、9.0</td><td>免费</td><td>稳定流畅、游戏、开发调试均可</td></tr><tr><td><a href="http://www.microvirt.com/">逍遥</a></td><td>Windows</td><td>7.1</td><td>免费</td><td>游戏、开发调试均可</td></tr><tr><td><a href="https://www.ldmnq.com/">雷电</a></td><td>Windows</td><td>7.1.2</td><td>免费</td><td>游戏、开发调试均可</td></tr><tr><td><a href="https://developer.android.google.cn/studio/releases/emulator?hl=en">AS模拟器</a></td><td>Windows、Mac、Linux</td><td>支持所有</td><td>免费</td><td>官方、适合开发调试</td></tr><tr><td><a href="https://www.genymotion.com/download">Genymotion</a></td><td>Windows、Mac、Linux</td><td>几乎所有</td><td>个人免费</td><td>稳定快速、适合开发调试</td></tr><tr><td><a href="http://www.phoenixos.com/download_x86">Phoenix OS</a></td><td>Windows、Mac</td><td>7.1</td><td>免费</td><td>类似于操作系统</td></tr></tbody></table><p>好了，关于常见的Android模拟器就介绍到这里了。Android模拟器远不止这些，有一些模拟器已经不再维护，还有一些通过安装Chrome插件在浏览器上运行Android应用，我只是整理了比较常见且一直在维护更新的模拟器。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程同步与多线程通信本质（待完善）</title>
      <link href="/ThreadSynchronized/"/>
      <url>/ThreadSynchronized/</url>
      
        <content type="html"><![CDATA[<h3 id="进程与线程的概念"><a href="#进程与线程的概念" class="headerlink" title="进程与线程的概念"></a>进程与线程的概念</h3><p><strong>进程</strong></p><p>操作系统中运行的软件就是进程，一个运行的软件可能包含多个进程，至少有一个进程。</p><p>比如Windows电脑运行的文件管理器、浏览器等，下面是我电脑上打开任务管理器（Ctrl + Shift + Esc）所看到的进程信息。</p><p><img src="https://img-blog.csdnimg.cn/37999eab1a4b4785a0f075e6ee4dce90.jpg" alt="Windows进程"></p><p><img src="https://img-blog.csdnimg.cn/7a66da87d02a48cdb3833154b56fba07.jpg" alt="Windows进程详细信息"></p><p>再比如Android系统正在运行的日历、电话等也都是进程，要查看Android设备上所有的进程信息，只需要执行<code>adb shell ps</code>命令即可。</p><p><img src="https://img-blog.csdnimg.cn/c01a624b24d34adaa6be2a5a19f01b69.jpg" alt="Android进程"></p><p>从上面的图中可以看到设备上有很多的进程，每一个进程的id（PID）、父进程id（PPID）、进程名称（NAME）、进程的虚拟内存大小（VSIZE）以及进程驻留在内存中的实际内存大小等信息都能看见。</p><p>为了简洁，我去掉了部分打印信息，可以看到图中用1、2、3、4标识的位置，首先位置１对应的是<strong>init</strong>进程，它是Android系统的根进程；然后位置2对应的是<strong>zygote</strong>进程，它的PPID是1，即init进程的PID，说明zygote的父进程是init进程；最后看看位置3、4，位置3是一些系统应用对应的进程，可以看到它们的父进程id是zygote进程的PID，位置4是我自己的应用，它的PPID同样也是zygote的PID，说明系统默认应用和我们自己安装的应用的进程都是由zygote进程孵化出来的。</p><p><strong>线程</strong></p><p>线程是进程的一个最小执行单元，用编程的思维去理解线程的概念就是程序按代码顺序执⾏下来，执⾏完毕就结束的⼀条线。一个运行中的进程可能包含多个线程，比如一个运行中的App包含一个主线程（UI线程），包含一个GC线程，还可能包含一个或多个子线程（工作线程）。</p><p>UI 线程为什么不会结束？因为它在初始化完毕后会执⾏死循环，循环的内容是刷新界⾯。</p><h3 id="如何开启一个线程？"><a href="#如何开启一个线程？" class="headerlink" title="如何开启一个线程？"></a>如何开启一个线程？</h3><p>知道了进程和线程的基本概念，然后看看如何创建并开启一个线程，主要有以下几种方式。</p><ul><li><h4 id="Thread和Runnable方式"><a href="#Thread和Runnable方式" class="headerlink" title="Thread和Runnable方式"></a>Thread和Runnable方式</h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 创建线程</span><span class="token keyword">val</span> thread <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> <span class="token function">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"Thread"</span><span class="token punctuation">,</span> <span class="token string">"Thread Started!"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 开启线程</span>thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 上面的代码可以使用下面的Kotlin扩展函数，效果一样</span>thread <span class="token punctuation">&#123;</span>    Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"Thread"</span><span class="token punctuation">,</span> <span class="token string">"Thread Started!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建Runnable</span><span class="token keyword">val</span> runnable <span class="token operator">=</span> Runnable <span class="token punctuation">&#123;</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread with Runnable started!"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token keyword">val</span> thread <span class="token operator">=</span> <span class="token function">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span>thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="ThreadFactory方式"><a href="#ThreadFactory方式" class="headerlink" title="ThreadFactory方式"></a>ThreadFactory方式</h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> factory <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> <span class="token function">ThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">newThread</span><span class="token punctuation">(</span>r<span class="token operator">:</span> Runnable<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> Thread <span class="token punctuation">&#123;</span>        num <span class="token operator">++</span>        <span class="token keyword">return</span> <span class="token function">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"Thread <span class="token interpolation variable">$num</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">val</span> runnable <span class="token operator">=</span> Runnable <span class="token punctuation">&#123;</span>    Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"ThreadFactory"</span><span class="token punctuation">,</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"started!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">val</span> thread1 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newThread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span>thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> thread2 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newThread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span>thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="Executor-和线程池方式"><a href="#Executor-和线程池方式" class="headerlink" title="Executor 和线程池方式"></a>Executor 和线程池方式</h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> runnable <span class="token operator">=</span> Runnable <span class="token punctuation">&#123;</span>     <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread with Runnable started!"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token comment">// 创建线程池</span><span class="token keyword">val</span> executor<span class="token operator">:</span> Executor <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// val executor: ExecutorService = Executors.newFixedThreadPool(5)</span><span class="token comment">// val executor: ExecutorService = Executors.newSingleThreadExecutor()</span><span class="token comment">// val executor: ExecutorService = Executors.newScheduledThreadPool(2)</span>executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span>executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span>executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="Callable-和-Future方式"><a href="#Callable-和-Future方式" class="headerlink" title="Callable 和 Future方式"></a>Callable 和 Future方式</h4><p>Callable接口实际是属于Executor框架中的功能接口，Callable接口与Runnable接口的功能相似，但功能比Runnable更加强大，主要有以下3点：</p><ol><li>Callable可以在任务接受后提供一个返回值，Runnable无法提供这个功能。</li><li>Callable中的call()方法可以抛出异常，而Runnable的run()方法不能抛出异常。</li><li>运行Callable可以拿到一个Future对象，Future对象表示异步计算的结果，他提供了检查计算是否完成的方法。由于线程属于异步计算模型，因此无法从别的线程中得到函数的返回值，在这种情况下就可以使用Future来监视目标线程调用call()方法的情况，但调用Future的get()方法以获取结果时，当前线程就会阻塞，直到call()方法的返回结果。</li></ol><p>​</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> callable<span class="token operator">:</span> Callable<span class="token operator">&lt;</span>String<span class="token operator">?</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> Callable<span class="token operator">&lt;</span>String<span class="token operator">?</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String<span class="token operator">?</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> InterruptedException<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token string">"Done!"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">val</span> executor <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> future<span class="token operator">:</span> Future<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token operator">=</span> executor<span class="token punctuation">.</span>submit<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> result<span class="token operator">:</span> String <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"Callable"</span><span class="token punctuation">,</span> <span class="token string">"result: <span class="token interpolation variable">$result</span>"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> InterruptedException<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> ExecutionException<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>线程的创建方式主要就上面几种，因为线程的创建需要内存开销，如果在我们的程序中需要开启多个线程，一般建议使用线程池缓存方式来管理线程的创建，直接使用new Thread不仅会带来很大的性能消耗，而且不能主动停止线程，不利于统一管理，而Callable一般使用的场景较少。</p><h3 id="线程间的交互"><a href="#线程间的交互" class="headerlink" title="线程间的交互"></a>线程间的交互</h3><p>知道了如何创建线程，那么当创建了多个线程之后，它们之间如何进行通信，按照什么顺序执行，多个线程执行同一块代码如何保证数据同步，下面就来说说多线程之间的通信。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序列化-Serializable和Parcelable的简单介绍</title>
      <link href="/JavaSerializable/"/>
      <url>/JavaSerializable/</url>
      
        <content type="html"><![CDATA[<h1 id="序列化的本质"><a href="#序列化的本质" class="headerlink" title="序列化的本质"></a>序列化的本质</h1><p>序列化是一种用来处理对象流的机制。序列化是为了解决在对对象流进行读写操作时所引发的问题。</p><p>序列化：将java对象转换成字节序列的过程，字节码可以保存到数据库、内存、文件等，也可用于网络传输</p><p>反序列化：将字节序列恢复为java对象的过程。</p><p>序列化实现的方式有很多方案，在java中是使用的JDK内置的Serializable接口来实现序列化，而Android SDK中增加Parcelable方式来实现序列化，除了常见的这2种还有很多其他优秀的序列化和反序列化方案（Twitter的Serial、Google的Protocol Buffers和flatbuffers等），这里先了解一下Serializable和Parcelable2种方式的原理和区别。</p><h1 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h1><p>Serializable是一个空的标记接口，没有任何方法和属性，implement Serializable只用于标记该对象是可以序列化的。如果一个类implement Serializable，则子类也是可以序列化的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Serializability of a class is enabled by the class implementing the * java.io.Serializable interface. Classes that do not implement this * interface will not have any of their state serialized or * deserialized.  All subtypes of a serializable class are themselves * serializable.  The serialization interface has no methods or fields * and serves only to identify the semantics of being serializable. &lt;p> * * To allow subtypes of non-serializable classes to be serialized, the * subtype may assume responsibility for saving and restoring the * state of the supertype's public, protected, and (if accessible) * package fields.  The subtype may assume this responsibility only if * the class it extends has an accessible no-arg constructor to * initialize the class's state.  It is an error to declare a class * Serializable if this is not the case.  The error will be detected at * runtime. &lt;p> * * During deserialization, the fields of non-serializable classes will * be initialized using the public or protected no-arg constructor of * the class.  A no-arg constructor must be accessible to the subclass * that is serializable.  The fields of serializable subclasses will * be restored from the stream. &lt;p> * * When traversing a graph, an object may be encountered that does not * support the Serializable interface. In this case the * NotSerializableException will be thrown and will identify the class * of the non-serializable object. &lt;p> * * Classes that require special handling during the serialization and * deserialization process must implement special methods with these exact * signatures: * * &lt;PRE> * private void writeObject(java.io.ObjectOutputStream out) *     throws IOException * private void readObject(java.io.ObjectInputStream in) *     throws IOException, ClassNotFoundException; * private void readObjectNoData() *     throws ObjectStreamException; * &lt;/PRE> * * &lt;p>The writeObject method is responsible for writing the state of the * object for its particular class so that the corresponding * readObject method can restore it.  The default mechanism for saving * the Object's fields can be invoked by calling * out.defaultWriteObject. The method does not need to concern * itself with the state belonging to its superclasses or subclasses. * State is saved by writing the individual fields to the * ObjectOutputStream using the writeObject method or by using the * methods for primitive data types supported by DataOutput. * * &lt;p>The readObject method is responsible for reading from the stream and * restoring the classes fields. It may call in.defaultReadObject to invoke * the default mechanism for restoring the object's non-static and * non-transient fields.  The defaultReadObject method uses information in * the stream to assign the fields of the object saved in the stream with the * correspondingly named fields in the current object.  This handles the case * when the class has evolved to add new fields. The method does not need to * concern itself with the state belonging to its superclasses or subclasses. * State is saved by writing the individual fields to the * ObjectOutputStream using the writeObject method or by using the * methods for primitive data types supported by DataOutput. * * &lt;p>The readObjectNoData method is responsible for initializing the state of * the object for its particular class in the event that the serialization * stream does not list the given class as a superclass of the object being * deserialized.  This may occur in cases where the receiving party uses a * different version of the deserialized instance's class than the sending * party, and the receiver's version extends classes that are not extended by * the sender's version.  This may also occur if the serialization stream has * been tampered; hence, readObjectNoData is useful for initializing * deserialized objects properly despite a "hostile" or incomplete source * stream. * * &lt;p>Serializable classes that need to designate an alternative object to be * used when writing an object to the stream should implement this * special method with the exact signature: * * &lt;PRE> * ANY-ACCESS-MODIFIER Object writeReplace() throws ObjectStreamException; * &lt;/PRE>&lt;p> * * This writeReplace method is invoked by serialization if the method * exists and it would be accessible from a method defined within the * class of the object being serialized. Thus, the method can have private, * protected and package-private access. Subclass access to this method * follows java accessibility rules. &lt;p> * * Classes that need to designate a replacement when an instance of it * is read from the stream should implement this special method with the * exact signature. * * &lt;PRE> * ANY-ACCESS-MODIFIER Object readResolve() throws ObjectStreamException; * &lt;/PRE>&lt;p> * * This readResolve method follows the same invocation rules and * accessibility rules as writeReplace.&lt;p> * * The serialization runtime associates with each serializable class a version * number, called a serialVersionUID, which is used during deserialization to * verify that the sender and receiver of a serialized object have loaded * classes for that object that are compatible with respect to serialization. * If the receiver has loaded a class for the object that has a different * serialVersionUID than that of the corresponding sender's class, then * deserialization will result in an &#123;@link InvalidClassException&#125;.  A * serializable class can declare its own serialVersionUID explicitly by * declaring a field named &lt;code>"serialVersionUID"&lt;/code> that must be static, * final, and of type &lt;code>long&lt;/code>: * * &lt;PRE> * ANY-ACCESS-MODIFIER static final long serialVersionUID = 42L; * &lt;/PRE> * * If a serializable class does not explicitly declare a serialVersionUID, then * the serialization runtime will calculate a default serialVersionUID value * for that class based on various aspects of the class, as described in the * Java(TM) Object Serialization Specification.  However, it is &lt;em>strongly * recommended&lt;/em> that all serializable classes explicitly declare * serialVersionUID values, since the default serialVersionUID computation is * highly sensitive to class details that may vary depending on compiler * implementations, and can thus result in unexpected * &lt;code>InvalidClassException&lt;/code>s during deserialization.  Therefore, to * guarantee a consistent serialVersionUID value across different java compiler * implementations, a serializable class must declare an explicit * serialVersionUID value.  It is also strongly advised that explicit * serialVersionUID declarations use the &lt;code>private&lt;/code> modifier where * possible, since such declarations apply only to the immediately declaring * class--serialVersionUID fields are not useful as inherited members. Array * classes cannot declare an explicit serialVersionUID, so they always have * the default computed value, but the requirement for matching * serialVersionUID values is waived for array classes. * * Android implementation of serialVersionUID computation will change slightly * for some classes if you're targeting android N. In order to preserve compatibility, * this change is only enabled is the application target SDK version is set to * 24 or higher. It is highly recommended to use an explicit serialVersionUID * field to avoid compatibility issues. * * &lt;h3>Implement Serializable Judiciously&lt;/h3> * Refer to &lt;i>Effective Java&lt;/i>'s chapter on serialization for thorough * coverage of the serialization API. The book explains how to use this * interface without harming your application's maintainability. * * &lt;h3>Recommended Alternatives&lt;/h3> * &lt;strong>JSON&lt;/strong> is concise, human-readable and efficient. Android * includes both a &#123;@link android.util.JsonReader streaming API&#125; and a &#123;@link * org.json.JSONObject tree API&#125; to read and write JSON. Use a binding library * like &lt;a href="http://code.google.com/p/google-gson/">GSON&lt;/a> to read and * write Java objects directly. * * @author  unascribed * @see java.io.ObjectOutputStream * @see java.io.ObjectInputStream * @see java.io.ObjectOutput * @see java.io.ObjectInput * @see java.io.Externalizable * @since   JDK1.1 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面就是Serializable接口，可以看到注释特别长，总结一下大致如下：</p><ol><li>Serializable接口没有方法和属性字段，用于标记类可以序列化。</li><li>父类可序列化，则子类也可序列化。</li><li>static或用transient关键字标记的字段不会被序列化</li><li>Serializable内部是使用的ObjectOutputStream和ObjectInputStream来序列化和反序列化的，序列化时通过ObjectOutputStream的writeObject写入对象序列化流数据及状态，默认的保存机制是调用out.defaultWriteObject；反序列化时使用ObjectInputStream.readObject方法将流数据还原成类对象。</li><li>序列化运行时是通过serialVersionUID来判断版本的一致性，我们可以在要序列化的类中显式的声明一个static final long serialVerisonUID值，默认情况下java编译器会自动给我们生成一个serialVersionUID，但由于不同的java编译器可能生成的serialVersionUID不同，反序列化期间可能导致InvalidClassException，所以强烈建议我们自己定义serialVersionUID值。</li><li>Serializable在使用是会产生大量临时变量，频繁GC，使用了反射，序列化过程较慢，所以官方推荐使用简洁高效的JSON代替Serializable。</li></ol><h3 id="序列化过程"><a href="#序列化过程" class="headerlink" title="序列化过程"></a>序列化过程</h3><p>下面看看ObjectOutputStream的writeObject相关的源码，简单看看序列化的过程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 外部调用，序列化入口 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">writeObject0</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 写数据，unshared=false */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeObject0</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token keyword">boolean</span> unshared<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">//判断序列化对象的类型</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">writeClass</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span> obj<span class="token punctuation">,</span> unshared<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">ObjectStreamClass</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">writeClassDesc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ObjectStreamClass</span><span class="token punctuation">)</span> obj<span class="token punctuation">,</span> unshared<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// END Android-changed:  Make Class and ObjectStreamClass replaceable.</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">writeString</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> obj<span class="token punctuation">,</span> unshared<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cl<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">writeArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> unshared<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Enum</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">writeEnum</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Enum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> obj<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> unshared<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Serializable</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//如果是可序列化的，开始写入数据</span>        <span class="token function">writeOrdinaryObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> unshared<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//不可序列化，抛出异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>extendedDebugInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotSerializableException</span><span class="token punctuation">(</span>                cl<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> debugInfoStack<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotSerializableException</span><span class="token punctuation">(</span>cl<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 写object数据 */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeOrdinaryObject</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">ObjectStreamClass</span> desc<span class="token punctuation">,</span> <span class="token keyword">boolean</span> unshared<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>extendedDebugInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        debugInfoStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span>depth <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">"root "</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"object (class \""</span> <span class="token operator">+</span>            obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\", "</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        desc<span class="token punctuation">.</span><span class="token function">checkSerialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//写入标记类型，读的时候根据这个来判断</span>        bout<span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span>TC_OBJECT<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//写入类的描述信息</span>        <span class="token function">writeClassDesc</span><span class="token punctuation">(</span>desc<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        handles<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>unshared <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>desc<span class="token punctuation">.</span><span class="token function">isExternalizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>desc<span class="token punctuation">.</span><span class="token function">isProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">//如果是实现了Externalizable接口，则写入ExternalData(</span>            <span class="token function">writeExternalData</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Externalizable</span><span class="token punctuation">)</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token comment">//写序列化数据</span>            <span class="token function">writeSerialData</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>extendedDebugInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            debugInfoStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 真正写object data的入口 */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeSerialData</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">ObjectStreamClass</span> desc<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ObjectStreamClass<span class="token punctuation">.</span>ClassDataSlot</span><span class="token punctuation">[</span><span class="token punctuation">]</span> slots <span class="token operator">=</span> desc<span class="token punctuation">.</span><span class="token function">getClassDataLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//遍历父类和自己，for循环从父类开始写入数据</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> slots<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ObjectStreamClass</span> slotDesc <span class="token operator">=</span> slots<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>desc<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>slotDesc<span class="token punctuation">.</span><span class="token function">hasWriteObjectMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">PutFieldImpl</span> oldPut <span class="token operator">=</span> curPut<span class="token punctuation">;</span>            curPut <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token class-name">SerialCallbackContext</span> oldContext <span class="token operator">=</span> curContext<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>extendedDebugInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                debugInfoStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>                    <span class="token string">"custom writeObject data (class \""</span> <span class="token operator">+</span>                    slotDesc<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                curContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SerialCallbackContext</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> slotDesc<span class="token punctuation">)</span><span class="token punctuation">;</span>                bout<span class="token punctuation">.</span><span class="token function">setBlockDataMode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                slotDesc<span class="token punctuation">.</span><span class="token function">invokeWriteObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                bout<span class="token punctuation">.</span><span class="token function">setBlockDataMode</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                bout<span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span>TC_ENDBLOCKDATA<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                curContext<span class="token punctuation">.</span><span class="token function">setUsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                curContext <span class="token operator">=</span> oldContext<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>extendedDebugInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    debugInfoStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            curPut <span class="token operator">=</span> oldPut<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token comment">//写入字段属性值</span>            <span class="token function">defaultWriteFields</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> slotDesc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 写基本数据类型数据 */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">defaultWriteFields</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">ObjectStreamClass</span> desc<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> cl <span class="token operator">=</span> desc<span class="token punctuation">.</span><span class="token function">forClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cl <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> obj <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>cl<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassCastException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    desc<span class="token punctuation">.</span><span class="token function">checkDefaultSerialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> primDataSize <span class="token operator">=</span> desc<span class="token punctuation">.</span><span class="token function">getPrimDataSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>primVals <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> primVals<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> primDataSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        primVals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>primDataSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    desc<span class="token punctuation">.</span><span class="token function">getPrimFieldValues</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> primVals<span class="token punctuation">)</span><span class="token punctuation">;</span>    bout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>primVals<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> primDataSize<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ObjectStreamField</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> desc<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objVals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>desc<span class="token punctuation">.</span><span class="token function">getNumObjFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> numPrimFields <span class="token operator">=</span> fields<span class="token punctuation">.</span>length <span class="token operator">-</span> objVals<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    desc<span class="token punctuation">.</span><span class="token function">getObjFieldValues</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> objVals<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> objVals<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>extendedDebugInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            debugInfoStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>                <span class="token string">"field (class \""</span> <span class="token operator">+</span> desc<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\", name: \""</span> <span class="token operator">+</span>                fields<span class="token punctuation">[</span>numPrimFields <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\", type: \""</span> <span class="token operator">+</span>                fields<span class="token punctuation">[</span>numPrimFields <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token function">writeObject0</span><span class="token punctuation">(</span>objVals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>                         fields<span class="token punctuation">[</span>numPrimFields <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">isUnshared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>extendedDebugInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                debugInfoStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="反序列化过程"><a href="#反序列化过程" class="headerlink" title="反序列化过程"></a>反序列化过程</h3><p>再看看ObjectInputStream的readObject相关的源码，反序列化的过程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token function">readObject0</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 读object数据 */</span><span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">readObject0</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> unshared<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">byte</span> tc<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tc <span class="token operator">=</span> bin<span class="token punctuation">.</span><span class="token function">peekByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> TC_RESET<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        bin<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">handleReset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    depth<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// Android-removed: ObjectInputFilter logic, to be reconsidered. http://b/110252929</span>    <span class="token comment">// totalObjectRefs++;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>tc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> TC_NULL<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token function">readNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> TC_REFERENCE<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token function">readHandle</span><span class="token punctuation">(</span>unshared<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> TC_CLASS<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token function">readClass</span><span class="token punctuation">(</span>unshared<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">case</span> TC_CLASSDESC<span class="token operator">:</span>            <span class="token keyword">case</span> TC_PROXYCLASSDESC<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token function">readClassDesc</span><span class="token punctuation">(</span>unshared<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> TC_STRING<span class="token operator">:</span>            <span class="token keyword">case</span> TC_LONGSTRING<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token function">checkResolve</span><span class="token punctuation">(</span><span class="token function">readString</span><span class="token punctuation">(</span>unshared<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> TC_ARRAY<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token function">checkResolve</span><span class="token punctuation">(</span><span class="token function">readArray</span><span class="token punctuation">(</span>unshared<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> TC_ENUM<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token function">checkResolve</span><span class="token punctuation">(</span><span class="token function">readEnum</span><span class="token punctuation">(</span>unshared<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//判断类型如果是object类型，则读取object对象流</span>            <span class="token keyword">case</span> TC_OBJECT<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token function">checkResolve</span><span class="token punctuation">(</span><span class="token function">readOrdinaryObject</span><span class="token punctuation">(</span>unshared<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> TC_EXCEPTION<span class="token operator">:</span>                <span class="token class-name">IOException</span> ex <span class="token operator">=</span> <span class="token function">readFatalException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">WriteAbortedException</span><span class="token punctuation">(</span><span class="token string">"writing aborted"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> TC_BLOCKDATA<span class="token operator">:</span>            <span class="token keyword">case</span> TC_BLOCKDATALONG<span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>oldMode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    bin<span class="token punctuation">.</span><span class="token function">setBlockDataMode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bin<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// force header read</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OptionalDataException</span><span class="token punctuation">(</span>                        bin<span class="token punctuation">.</span><span class="token function">currentBlockRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StreamCorruptedException</span><span class="token punctuation">(</span>                        <span class="token string">"unexpected block data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token keyword">case</span> TC_ENDBLOCKDATA<span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>oldMode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OptionalDataException</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StreamCorruptedException</span><span class="token punctuation">(</span>                        <span class="token string">"unexpected end of block data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StreamCorruptedException</span><span class="token punctuation">(</span>                    <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"invalid type code: %02X"</span><span class="token punctuation">,</span> tc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        depth<span class="token operator">--</span><span class="token punctuation">;</span>        bin<span class="token punctuation">.</span><span class="token function">setBlockDataMode</span><span class="token punctuation">(</span>oldMode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 读取流数据 */</span><span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">readOrdinaryObject</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> unshared<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bin<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> TC_OBJECT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">ObjectStreamClass</span> desc <span class="token operator">=</span> <span class="token function">readClassDesc</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    desc<span class="token punctuation">.</span><span class="token function">checkDeserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> cl <span class="token operator">=</span> desc<span class="token punctuation">.</span><span class="token function">forClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cl <span class="token operator">==</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">||</span> cl <span class="token operator">==</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span>            <span class="token operator">||</span> cl <span class="token operator">==</span> <span class="token class-name">ObjectStreamClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidClassException</span><span class="token punctuation">(</span><span class="token string">"invalid class descriptor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Object</span> obj<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        obj <span class="token operator">=</span> desc<span class="token punctuation">.</span><span class="token function">isInstantiable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> desc<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">InvalidClassException</span><span class="token punctuation">(</span>            desc<span class="token punctuation">.</span><span class="token function">forClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"unable to create instance"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initCause</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    passHandle <span class="token operator">=</span> handles<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>unshared <span class="token operator">?</span> unsharedMarker <span class="token operator">:</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ClassNotFoundException</span> resolveEx <span class="token operator">=</span> desc<span class="token punctuation">.</span><span class="token function">getResolveException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resolveEx <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        handles<span class="token punctuation">.</span><span class="token function">markException</span><span class="token punctuation">(</span>passHandle<span class="token punctuation">,</span> resolveEx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>desc<span class="token punctuation">.</span><span class="token function">isExternalizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//读取自定义序列化数据</span>        <span class="token function">readExternalData</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Externalizable</span><span class="token punctuation">)</span> obj<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//读取序列化数据</span>        <span class="token function">readSerialData</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 读取序列化数据 */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readSerialData</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">ObjectStreamClass</span> desc<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ObjectStreamClass<span class="token punctuation">.</span>ClassDataSlot</span><span class="token punctuation">[</span><span class="token punctuation">]</span> slots <span class="token operator">=</span> desc<span class="token punctuation">.</span><span class="token function">getClassDataLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> slots<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ObjectStreamClass</span> slotDesc <span class="token operator">=</span> slots<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>desc<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>slots<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>hasData<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> handles<span class="token punctuation">.</span><span class="token function">lookupException</span><span class="token punctuation">(</span>passHandle<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">defaultReadFields</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> slotDesc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// skip field values</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>slotDesc<span class="token punctuation">.</span><span class="token function">hasReadObjectMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// BEGIN Android-changed: ThreadDeath cannot cause corruption on Android.</span>                <span class="token comment">// Android does not support Thread.stop() or Thread.stop(Throwable) so this</span>                <span class="token comment">// does not need to protect against state corruption that can occur when a</span>                <span class="token comment">// ThreadDeath Error is thrown in the middle of the finally block.</span>                <span class="token class-name">SerialCallbackContext</span> oldContext <span class="token operator">=</span> curContext<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>oldContext <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    oldContext<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    curContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SerialCallbackContext</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> slotDesc<span class="token punctuation">)</span><span class="token punctuation">;</span>                    bin<span class="token punctuation">.</span><span class="token function">setBlockDataMode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    slotDesc<span class="token punctuation">.</span><span class="token function">invokeReadObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">/*                     * In most cases, the handle table has already                     * propagated a CNFException to passHandle at this                     * point; this mark call is included to address cases                     * where the custom readObject method has cons'ed and                     * thrown a new CNFException of its own.                     */</span>                    handles<span class="token punctuation">.</span><span class="token function">markException</span><span class="token punctuation">(</span>passHandle<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                    curContext<span class="token punctuation">.</span><span class="token function">setUsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldContext<span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                        oldContext<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    curContext <span class="token operator">=</span> oldContext<span class="token punctuation">;</span>                    <span class="token comment">// END Android-changed: ThreadDeath cannot cause corruption on Android.</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">/*                 * defaultDataEnd may have been set indirectly by custom                 * readObject() method when calling defaultReadObject() or                 * readFields(); clear it to restore normal read behavior.                 */</span>                defaultDataEnd <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">defaultReadFields</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> slotDesc<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>slotDesc<span class="token punctuation">.</span><span class="token function">hasWriteObjectData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">skipCustomData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                bin<span class="token punctuation">.</span><span class="token function">setBlockDataMode</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>                slotDesc<span class="token punctuation">.</span><span class="token function">hasReadObjectNoDataMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                handles<span class="token punctuation">.</span><span class="token function">lookupException</span><span class="token punctuation">(</span>passHandle<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                slotDesc<span class="token punctuation">.</span><span class="token function">invokeReadObjectNoData</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 读取字段属性数据 */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">defaultReadFields</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">ObjectStreamClass</span> desc<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> cl <span class="token operator">=</span> desc<span class="token punctuation">.</span><span class="token function">forClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cl <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> obj <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>cl<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassCastException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> primDataSize <span class="token operator">=</span> desc<span class="token punctuation">.</span><span class="token function">getPrimDataSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>primVals <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> primVals<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> primDataSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        primVals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>primDataSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        bin<span class="token punctuation">.</span><span class="token function">readFully</span><span class="token punctuation">(</span>primVals<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> primDataSize<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        desc<span class="token punctuation">.</span><span class="token function">setPrimFieldValues</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> primVals<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> objHandle <span class="token operator">=</span> passHandle<span class="token punctuation">;</span>    <span class="token class-name">ObjectStreamField</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> desc<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objVals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>desc<span class="token punctuation">.</span><span class="token function">getNumObjFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> numPrimFields <span class="token operator">=</span> fields<span class="token punctuation">.</span>length <span class="token operator">-</span> objVals<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> objVals<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ObjectStreamField</span> f <span class="token operator">=</span> fields<span class="token punctuation">[</span>numPrimFields <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>        objVals<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">readObject0</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isUnshared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            handles<span class="token punctuation">.</span><span class="token function">markDependency</span><span class="token punctuation">(</span>objHandle<span class="token punctuation">,</span> passHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        desc<span class="token punctuation">.</span><span class="token function">setObjFieldValues</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> objVals<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    passHandle <span class="token operator">=</span> objHandle<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到ObjectInputStream反序列化和ObjectOutputStream方法是一一对应，怎么写就怎么读取，其实java io API内部设计都是这样，所有的Input和Output，Reader和Writer方法基本都是一一对应，掌握了输出流就知道输入流对应该怎么写。</p><h3 id="Externalizable"><a href="#Externalizable" class="headerlink" title="Externalizable"></a>Externalizable</h3><p>从上面的源码中可以看到有一个这个判断：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//ObjectOutputStream</span><span class="token keyword">if</span> <span class="token punctuation">(</span>desc<span class="token punctuation">.</span><span class="token function">isExternalizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>desc<span class="token punctuation">.</span><span class="token function">isProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">writeExternalData</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Externalizable</span><span class="token punctuation">)</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//ObjectInputStream</span><span class="token keyword">if</span> <span class="token punctuation">(</span>desc<span class="token punctuation">.</span><span class="token function">isExternalizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">readExternalData</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Externalizable</span><span class="token punctuation">)</span> obj<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Serializable有一个直接子类Externalizable接口，该接口有两个方法<code>writeExternal(ObjectOutput out)</code>、<code>readExternal(ObjectInput in)</code>，可以使用该接口来实现自定义序列化细节。看下源码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Only the identity of the class of an Externalizable instance is * written in the serialization stream and it is the responsibility * of the class to save and restore the contents of its instances. * * The writeExternal and readExternal methods of the Externalizable * interface are implemented by a class to give the class complete * control over the format and contents of the stream for an object * and its supertypes. These methods must explicitly * coordinate with the supertype to save its state. These methods supersede * customized implementations of writeObject and readObject methods.&lt;br> * * Object Serialization uses the Serializable and Externalizable * interfaces.  Object persistence mechanisms can use them as well.  Each * object to be stored is tested for the Externalizable interface. If * the object supports Externalizable, the writeExternal method is called. If the * object does not support Externalizable and does implement * Serializable, the object is saved using * ObjectOutputStream. &lt;br> When an Externalizable object is * reconstructed, an instance is created using the public no-arg * constructor, then the readExternal method called.  Serializable * objects are restored by reading them from an ObjectInputStream.&lt;br> * * An Externalizable instance can designate a substitution object via * the writeReplace and readResolve methods documented in the Serializable * interface.&lt;br> * * @author  unascribed * @see java.io.ObjectOutputStream * @see java.io.ObjectInputStream * @see java.io.ObjectOutput * @see java.io.ObjectInput * @see java.io.Serializable * @since   JDK1.1 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Externalizable</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * The object implements the writeExternal method to save its contents     * by calling the methods of DataOutput for its primitive values or     * calling the writeObject method of ObjectOutput for objects, strings,     * and arrays.     *     * @serialData Overriding methods should use this tag to describe     *             the data layout of this Externalizable object.     *             List the sequence of element types and, if possible,     *             relate the element to a public/protected field and/or     *             method of this Externalizable class.     *     * @param out the stream to write the object to     * @exception IOException Includes any I/O exceptions that may occur     */</span>    <span class="token keyword">void</span> <span class="token function">writeExternal</span><span class="token punctuation">(</span><span class="token class-name">ObjectOutput</span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>    <span class="token comment">/**     * The object implements the readExternal method to restore its     * contents by calling the methods of DataInput for primitive     * types and readObject for objects, strings and arrays.  The     * readExternal method must read the values in the same sequence     * and with the same types as were written by writeExternal.     *     * @param in the stream to read data from in order to restore the object     * @exception IOException if I/O errors occur     * @exception ClassNotFoundException If the class for an object being     *              restored cannot be found.     */</span>    <span class="token keyword">void</span> <span class="token function">readExternal</span><span class="token punctuation">(</span><span class="token class-name">ObjectInput</span> in<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看一个示例，android.telephony.mbms.DownloadRequest中的SerializationDataContainer内部类实现了Externalizable接口来自定义序列化内容，代码如下。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SerializationDataContainer</span> <span class="token keyword">implements</span> <span class="token class-name">Externalizable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> fileServiceId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Uri</span> source<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Uri</span> destination<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> subscriptionId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> appIntent<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> version<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SerializationDataContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token class-name">SerializationDataContainer</span><span class="token punctuation">(</span><span class="token class-name">DownloadRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fileServiceId <span class="token operator">=</span> request<span class="token punctuation">.</span>fileServiceId<span class="token punctuation">;</span>        source <span class="token operator">=</span> request<span class="token punctuation">.</span>sourceUri<span class="token punctuation">;</span>        destination <span class="token operator">=</span> request<span class="token punctuation">.</span>destinationUri<span class="token punctuation">;</span>        subscriptionId <span class="token operator">=</span> request<span class="token punctuation">.</span>subscriptionId<span class="token punctuation">;</span>        appIntent <span class="token operator">=</span> request<span class="token punctuation">.</span>serializedResultIntentForApp<span class="token punctuation">;</span>        version <span class="token operator">=</span> request<span class="token punctuation">.</span>version<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeExternal</span><span class="token punctuation">(</span><span class="token class-name">ObjectOutput</span> objectOutput<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        objectOutput<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutput<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span>fileServiceId<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutput<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutput<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span>destination<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutput<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>subscriptionId<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutput<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span>appIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readExternal</span><span class="token punctuation">(</span><span class="token class-name">ObjectInput</span> objectInput<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        version <span class="token operator">=</span> objectInput<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileServiceId <span class="token operator">=</span> objectInput<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source <span class="token operator">=</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>objectInput<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        destination <span class="token operator">=</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>objectInput<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        subscriptionId <span class="token operator">=</span> objectInput<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        appIntent <span class="token operator">=</span> objectInput<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Do version checks here -- future versions may have other fields.</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//写入序列化数据</span><span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SerializationDataContainer</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SerializationDataContainer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>        stream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Really should never happen</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>LOG_TAG<span class="token punctuation">,</span> <span class="token string">"Got IOException trying to serialize opaque data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//还原序列化对象</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Builder</span> <span class="token function">fromSerializedRequest</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Builder</span> builder<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ObjectInputStream</span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SerializationDataContainer</span> dataContainer <span class="token operator">=</span>                <span class="token punctuation">(</span><span class="token class-name">SerializationDataContainer</span><span class="token punctuation">)</span> stream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Builder</span><span class="token punctuation">(</span>dataContainer<span class="token punctuation">.</span>source<span class="token punctuation">,</span> dataContainer<span class="token punctuation">.</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span>version <span class="token operator">=</span> dataContainer<span class="token punctuation">.</span>version<span class="token punctuation">;</span>        builder<span class="token punctuation">.</span>appIntent <span class="token operator">=</span> dataContainer<span class="token punctuation">.</span>appIntent<span class="token punctuation">;</span>        builder<span class="token punctuation">.</span>fileServiceId <span class="token operator">=</span> dataContainer<span class="token punctuation">.</span>fileServiceId<span class="token punctuation">;</span>        builder<span class="token punctuation">.</span>subscriptionId <span class="token operator">=</span> dataContainer<span class="token punctuation">.</span>subscriptionId<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Really should never happen</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>LOG_TAG<span class="token punctuation">,</span> <span class="token string">"Got IOException trying to parse opaque data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>LOG_TAG<span class="token punctuation">,</span> <span class="token string">"Got ClassNotFoundException trying to parse opaque data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> builder<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此Serializable了解的差不多了，下面看下Android中的Parcelable实现序列化的一些细节。</p><h1 id="Parcelable"><a href="#Parcelable" class="headerlink" title="Parcelable"></a>Parcelable</h1><p>Parcelable是Android中的一种序列化机制，Parcelable的原理是通过Parcel将一个完整的对象进行分解，而分解后的每一部分都是Intent所支持的数据类型，Parcel机制是将序列化的数据写入到一个共享内存当中，其他进程可以通过Parcel从这块共享内存中读出字节流，因此可以实现在Binder中跨进程传输数据，实现传递对象的功能。</p><p>看下Parcelable接口的源码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">android<span class="token punctuation">.</span>os</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">IntDef</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">;</span><span class="token comment">/** * Interface for classes whose instances can be written to * and restored from a &#123;@link Parcel&#125;.  Classes implementing the Parcelable * interface must also have a non-null static field called &lt;code>CREATOR&lt;/code> * of a type that implements the &#123;@link Parcelable.Creator&#125; interface. *  * &lt;p>A typical implementation of Parcelable is:&lt;/p> *  * &lt;pre> * public class MyParcelable implements Parcelable &#123; *     private int mData; * *     public int describeContents() &#123; *         return 0; *     &#125; * *     public void writeToParcel(Parcel out, int flags) &#123; *         out.writeInt(mData); *     &#125; * *     public static final Parcelable.Creator&amp;lt;MyParcelable&amp;gt; CREATOR *             = new Parcelable.Creator&amp;lt;MyParcelable&amp;gt;() &#123; *         public MyParcelable createFromParcel(Parcel in) &#123; *             return new MyParcelable(in); *         &#125; * *         public MyParcelable[] newArray(int size) &#123; *             return new MyParcelable[size]; *         &#125; *     &#125;; *      *     private MyParcelable(Parcel in) &#123; *         mData = in.readInt(); *     &#125; * &#125;&lt;/pre> */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Parcelable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/** @hide */</span>    <span class="token annotation punctuation">@IntDef</span><span class="token punctuation">(</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> prefix <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"PARCELABLE_"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            PARCELABLE_WRITE_RETURN_VALUE<span class="token punctuation">,</span>            PARCELABLE_ELIDE_DUPLICATES<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>SOURCE<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">WriteFlags</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Flag for use with &#123;@link #writeToParcel&#125;: the object being written     * is a return value, that is the result of a function such as     * "&lt;code>Parcelable someFunction()&lt;/code>",     * "&lt;code>void someFunction(out Parcelable)&lt;/code>", or     * "&lt;code>void someFunction(inout Parcelable)&lt;/code>".  Some implementations     * may want to release resources at this point.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PARCELABLE_WRITE_RETURN_VALUE <span class="token operator">=</span> <span class="token number">0x0001</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Flag for use with &#123;@link #writeToParcel&#125;: a parent object will take     * care of managing duplicate state/data that is nominally replicated     * across its inner data members.  This flag instructs the inner data     * types to omit that data during marshaling.  Exact behavior may vary     * on a case by case basis.     * @hide     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PARCELABLE_ELIDE_DUPLICATES <span class="token operator">=</span> <span class="token number">0x0002</span><span class="token punctuation">;</span>    <span class="token comment">/*     * Bit masks for use with &#123;@link #describeContents&#125;: each bit represents a     * kind of object considered to have potential special significance when     * marshalled.     */</span>    <span class="token comment">/** @hide */</span>    <span class="token annotation punctuation">@IntDef</span><span class="token punctuation">(</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> prefix <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"CONTENTS_"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            CONTENTS_FILE_DESCRIPTOR<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>SOURCE<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ContentsFlags</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Descriptor bit used with &#123;@link #describeContents()&#125;: indicates that     * the Parcelable object's flattened representation includes a file descriptor.     *     * @see #describeContents()     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CONTENTS_FILE_DESCRIPTOR <span class="token operator">=</span> <span class="token number">0x0001</span><span class="token punctuation">;</span>        <span class="token comment">/**     * Describe the kinds of special objects contained in this Parcelable     * instance's marshaled representation. For example, if the object will     * include a file descriptor in the output of &#123;@link #writeToParcel(Parcel, int)&#125;,     * the return value of this method must include the     * &#123;@link #CONTENTS_FILE_DESCRIPTOR&#125; bit.     *       * @return a bitmask indicating the set of special object types marshaled     * by this Parcelable object instance.     */</span>    <span class="token keyword">public</span> <span class="token annotation punctuation">@ContentsFlags</span> <span class="token keyword">int</span> <span class="token function">describeContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**     * Flatten this object in to a Parcel.     *      * @param dest The Parcel in which the object should be written.     * @param flags Additional flags about how the object should be written.     * May be 0 or &#123;@link #PARCELABLE_WRITE_RETURN_VALUE&#125;.     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeToParcel</span><span class="token punctuation">(</span><span class="token class-name">Parcel</span> dest<span class="token punctuation">,</span> <span class="token annotation punctuation">@WriteFlags</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Interface that must be implemented and provided as a public CREATOR     * field that generates instances of your Parcelable class from a Parcel.     */</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Creator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         * Create a new instance of the Parcelable class, instantiating it         * from the given Parcel whose data had previously been written by         * &#123;@link Parcelable#writeToParcel Parcelable.writeToParcel()&#125;.         *          * @param source The Parcel to read the object's data from.         * @return Returns a new instance of the Parcelable class.         */</span>        <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">createFromParcel</span><span class="token punctuation">(</span><span class="token class-name">Parcel</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">/**         * Create a new array of the Parcelable class.         *          * @param size Size of the array.         * @return Returns an array of the Parcelable class, with every entry         * initialized to null.         */</span>        <span class="token keyword">public</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">newArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Specialization of &#123;@link Creator&#125; that allows you to receive the     * ClassLoader the object is being created in.     */</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ClassLoaderCreator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">Creator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         * Create a new instance of the Parcelable class, instantiating it         * from the given Parcel whose data had previously been written by         * &#123;@link Parcelable#writeToParcel Parcelable.writeToParcel()&#125; and         * using the given ClassLoader.         *         * @param source The Parcel to read the object's data from.         * @param loader The ClassLoader that this object is being created in.         * @return Returns a new instance of the Parcelable class.         */</span>        <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">createFromParcel</span><span class="token punctuation">(</span><span class="token class-name">Parcel</span> source<span class="token punctuation">,</span> <span class="token class-name">ClassLoader</span> loader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用Parcelable接口实现序列化需要：</p><ol><li><p>创建一个实现了Parcelable.Creator接口的静态常量，其中createFromParcel方法用于反序列化时创建新的实例。</p></li><li><p>重写<code>writeToParcel(Parcel out, int flags)</code> 方法通过Parcel将数据写入共享内存，parcel可以写入原始数据类型（如：writeInt()、writeFloat()、writeString()等）、也可以写入一个Parcelable对象<code>writeParcelable(Parcelable p, int parcelableFlags)</code>、还提供了2种写入序列化对象集合的方式<code>writeList(List)</code>、<code>writeTypedList(List)</code></p></li><li><p>声明一个Parcel参数的构造方法读取Parcel数据</p></li></ol><p>Parcel中的写和读都是native方法，底层采用c语言编写，具体的源码就不去研究了。</p><p>在内存上序列化的时候，Parcelable比Serializable性能高，所以尽量使用Parcelable来序列化；但是Parcelable不适合磁盘上的数据持久化，所以这种情况使用Serializable更好。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分享一款思维导图工具-幕布</title>
      <link href="/ToolsMubu/"/>
      <url>/ToolsMubu/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>思维导图在日常工作中有着非常重要的作用，它可以帮助我们列待办计划、理清思路、发散思维、记录笔记等。市面上有很多的思维导图工具（<a href="https://www.xmind.cn/xmind2020/">Xmind</a>、<a href="https://mm.edrawsoft.cn/">MindMaster</a>、<a href="https://www.mindmanager.cn/">MindManager</a>、<a href="https://naotu.baidu.com/">百度脑图</a>），这些工具我基本都使用过，各有优势，但是都有一些不足的地方，直到前段时间看到别人分享了一款工具-<a href="https://mubu.com/">幕布</a>，我才知道这才是我想要的那个导图工具。</p><h3 id="幕布的优势"><a href="#幕布的优势" class="headerlink" title="幕布的优势"></a>幕布的优势</h3><pre><code>1. **多端同步**，支持桌面版（Windows、Mac OS）、手机版（ios、Android）和网页版2. **极简操作**，支持一键切换大纲视图和思维导图视图，2种模式都可轻松编辑3. **自动保存同步**，编辑时会自动保存更新，可以邀请协作，高效合作完成4. **免费**，有免费版和高级版，免费版基本上就可以满足绝大多数的需求5. **快捷键支持很到位**、可以复制文字、链接、或者图片直接粘贴到导图里面6. **分享**，分享自己的文档链接，别人无需登录可以直接打开，也可将幕布优秀的文档保存到自己的空间</code></pre><p>还有很多优秀的地方就不一 一列举了，使用的时候慢慢去体会。</p><h3 id="我的分享"><a href="#我的分享" class="headerlink" title="我的分享"></a>我的分享</h3><p>上面说了思维导图有很多种用途，这里分享2个我自己使用幕布的运用场景（书签、知识体系大纲笔记）</p><h4 id="网页书签"><a href="#网页书签" class="headerlink" title="网页书签"></a>网页书签</h4><p>我们经常访问的一些网页会把它保存成书签，但是经常会遇到一个问题就是在使用不同的浏览器的时候还需要把之前保存的书签导入到新的浏览器，如果是换了一个电脑会更麻烦。但是现在好了，我们把保存的书签做成一个导图，并进行分类，下次想要访问哪个网页的时候就会更方便，幕布支持链接直接在一个新窗口打开。给大家看看我收集的一些常用工具和学习网站。点击这个链接<a href="https://share.mubu.com/doc/zW64YsiuTw#mindmap">https://share.mubu.com/doc/zW64YsiuTw#mindmap</a>就可以看到下面的导图了（每次点击进去可能看到的和下面的图不一样，因为我长期在更新完善它）<br><img src="https://img-blog.csdnimg.cn/20200821100959749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70#pic_center" alt="在线百宝箱">根据这个图，想要找到相应的网页非常方便。在其他浏览器、其他电脑、手机上只需要打开这个链接就可以找到我们收藏的网页了。在我的在线网站收藏中主要分为：</p><ol><li>在线工具（文档处理工具类、图片处理工具类、各种搜索引擎、编程相关的工具网站等）</li><li>在线图片素材网站</li><li>在线视频观看网站</li><li>在线学习网站（主要是Android相关的）</li></ol><h4 id="Android知识体系"><a href="#Android知识体系" class="headerlink" title="Android知识体系"></a>Android知识体系</h4><p>因为我自己是做Android开发的，一直都是学一些零零散散的知识点，没有一个完整的知识体系，整天就是东看看西看看技术文章，从这个知识点跳到那个知识点，而且学过了就忘记了，等到用的时候又不知道自己以前写的笔记去哪儿了。所以经过一段时间的整理，我把Android相关的知识点整理到了一起。如下图所示，点击这个链接<a href="https://share.mubu.com/doc/56tYRt3ATnw#mindmap">https://share.mubu.com/doc/56tYRt3ATnw#mindmap</a>即可。<br><img src="https://img-blog.csdnimg.cn/20200815144053133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70#pic_center" alt="Android知识体系大纲"><br>展开详细如下：<br><img src="https://img-blog.csdnimg.cn/20200815144133195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70#pic_center" alt="Android知识体系">在Android进阶知识体系主要分为以下几个模块：<br>一、Java基础知识及原理</p><ul><li>泛型原理</li><li>反射原理</li><li>java虚拟机原理</li><li>线程池原理</li><li>java IO原理</li><li>注解原理</li><li>序列化与数据自动解析原理</li><li>并发编程</li></ul><p>二、高级UI与FrameWork API解析</p><ul><li>自定义view</li><li>fragment内核</li><li>service内核原理</li><li>activity相关</li><li>组件之间通信</li><li>WebView</li><li>Binder机制</li><li>Handler消息机制</li><li>WMS</li><li>PMS</li><li>AMS</li></ul><p>三、App性能调优</p><ul><li>屏幕适配</li><li>apk大小优化</li><li>耗电优化</li><li>内存优化</li><li>代码质量优化</li><li>代码架构优化</li></ul><p>四、项目架构</p><ul><li>MVC 架构</li><li>MVP 架构</li><li>MVVM架构</li><li>Jetpack</li></ul><p>五、前沿技术</p><ul><li>热升级</li><li>热修复</li><li>App instant</li><li>强制更新</li><li>组件化框架设计</li><li>IOC架构设计</li><li>hook技术</li><li>响应式编程框架设计</li><li>插件化</li></ul><p>六、NDK开发相关技术</p><ul><li>NDK基础开发流程</li><li>图像处理</li><li>音视频开发</li><li>人工智能开发</li></ul><p>七、算法和数据结构</p><ul><li>算法</li><li>表</li><li>队列/栈</li><li>树</li></ul><p>八、Android开发相关热门语言</p><ul><li>kotlin</li><li>Flutter</li></ul><p>每个模块下面又细分很多知识点，想要学好Android，还有相当长一条路要走啊，按照这个图，一天弄懂一个知识点，一直坚持下去我想肯定会有收获的。一起加油吧！<br>好啦，就说这么多了。</p>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分享一些实用的小工具（Windows版）</title>
      <link href="/WindowsTools/"/>
      <url>/WindowsTools/</url>
      
        <content type="html"><![CDATA[<h2 id="屏幕捕获取色类"><a href="#屏幕捕获取色类" class="headerlink" title="屏幕捕获取色类"></a>屏幕捕获取色类</h2><h3 id="FsCapture"><a href="#FsCapture" class="headerlink" title="FsCapture"></a><font color="#ff502f">FsCapture</font></h3><p><strong>FsCapture</strong>是一款很好用的Windows电脑截屏、录屏工具。同时还有取色器和屏幕放大演示功能。软件大小3MB左右、免安装。<br>截屏支持活动窗口截屏、矩形区域选择截屏、自定义形状区域截屏、自定义范围滚动截屏、全屏截屏等强大功能满足各种截屏需求；<br>录屏功能也很完善，支持自定义录屏范围、是否包含导航栏录屏、鼠标的显示的效果设置、声音来源设置（麦克风、你听到的声音）；<br>还有放大镜和取色器也很好用</p><p><strong>工具条</strong><br>工具条上包含常用的操作按钮（截屏、录屏、截屏之后保存方式），我们可以设置（F12）工具条上显示哪些按钮，还可以设置工具条拖动到屏幕顶部是隐藏工具条以及各种操作的快捷键设置。<br><img src="https://img-blog.csdnimg.cn/20191015034124415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="FsCapture工具条"></p><p><strong>编辑器</strong><br>在编辑器里面我们可以对图片进行各种处理，包括涂鸦、设置标题信息、调整图片边缘及大小、模糊和聚光灯特效、保存复制分享等操作，具体功能自己慢慢去研究和体会。<br><img src="https://img-blog.csdnimg.cn/20191015034137401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="图片编辑"></p><p>软件下载可以通过官网或者我提供的百度网盘分享链接下载：<br>网盘链接:<a href="https://pan.baidu.com/s/1mu7xwW_bpEof1WMFeD0a3w">https://pan.baidu.com/s/1mu7xwW_bpEof1WMFeD0a3w</a>  提取码:7fgf<br>官网下载地址：<a href="https://faststone-capture.en.softonic.com/">https://faststone-capture.en.softonic.com/</a></p><h3 id="LICEcap"><a href="#LICEcap" class="headerlink" title="LICEcap"></a><font color="#ff502f">LICEcap</font></h3><p><strong>LICEcap</strong>是一款屏幕录制工具，文件保存的格式为GIF的格式，轻量级、使用简单，可以任意设置录制的窗口尺寸大小；录制过程中可以随意改变录屏位置但是不能改变窗口尺寸。软件大小200多KB，免安装。</p><p><img src="https://img-blog.csdnimg.cn/20191015034307225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="LICEcap"></p><p>网盘链接地址：<a href="https://pan.baidu.com/s/1dUpG66MBwVzr8AXB_4ssGw">https://pan.baidu.com/s/1dUpG66MBwVzr8AXB_4ssGw</a> 提取码: xh00<br>官网下载地址：<a href="https://licecap.en.softonic.com/">https://licecap.en.softonic.com/</a></p><h3 id="ColorCop"><a href="#ColorCop" class="headerlink" title="ColorCop"></a><font color="#ff502f">ColorCop</font></h3><p><strong>ColorCop</strong> 是一款适合网页设计师，程序员使用的多用途的颜色采取器。它包含多种功能特性，具有取色器，放大镜，不同点阵的采样，抓取为网页安全色，颜色历史记录和一个辅助的调色板。同时，Color Cop 也可以将 RGB 十进制转换为十六进制颜色代码。软件大小37KB，免安装。</p><p><img src="https://img-blog.csdnimg.cn/20191015034325180.png" alt="ColorCop"></p><p>网盘链接地址：<a href="https://pan.baidu.com/s/11h8VqlVgSVQ87HpqFalh3Q">https://pan.baidu.com/s/11h8VqlVgSVQ87HpqFalh3Q</a> 提取码:6241<br>官网下载地址：<a href="http://colorcop.net/download/">http://colorcop.net/download/</a></p><h2 id="文件及文件操作类"><a href="#文件及文件操作类" class="headerlink" title="文件及文件操作类"></a>文件及文件操作类</h2><h3 id="QuickLook"><a href="#QuickLook" class="headerlink" title="QuickLook"></a><font color="#ff502f">QuickLook</font></h3><p><strong>QuickLook</strong> 是一款 Windows 下的桌面快速预览工具，开源、免费。只需要用鼠标选中文件，然后点击空格，即可预览。就像 macOS 里的那样，支持图片、压缩包、PDF、Office 文档、视频等等。软件大小48MB，免安装，使用之前得先运行QuickLook。<br><img src="https://img-blog.csdnimg.cn/20191015034342358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="QuickLook"></p><p>网盘链接地址：<a href="https://pan.baidu.com/s/1wJDuZDmjHOVQWvGweGiDKA">https://pan.baidu.com/s/1wJDuZDmjHOVQWvGweGiDKA</a> 提取码:3q17<br>官网下载地址：<a href="https://www.microsoft.com/zh-cn/p/quicklook/9nv4bs3l1h4s?activetab=pivot:overviewtab">https://www.microsoft.com/zh-cn/p/quicklook/9nv4bs3l1h4s?activetab=pivot:overviewtab</a></p><h3 id="Feep"><a href="#Feep" class="headerlink" title="Feep"></a><font color="#ff502f">Feep</font></h3><p><strong>Feep</strong>是一款超级好用的图片查看工具，Windows自带的图片查看工具特别难看好不好用，而且不支持GIF动态图片预览。而Feep就是来解决这些问题的，可以设置预览背景颜色、预览框大小及位置；可以对图片进行旋转、水平和垂直方向变换；支持GIF图片查看，软件大小200KB左右，免安装只需要配置一下即可。<br>点击目录下面的Feep.Configure.exe文件出现下面的弹框，可以对背景、关联文件等设置</p><p><img src="https://img-blog.csdnimg.cn/2019101609280676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="Feep"><br>也可以打开configure.ini配置文件进行配置</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>Location<span class="token punctuation">]</span>X<span class="token operator">=</span><span class="token number">440</span>Y<span class="token operator">=</span><span class="token number">249</span><span class="token punctuation">[</span>Size<span class="token punctuation">]</span>Width<span class="token operator">=</span><span class="token number">574</span>Height<span class="token operator">=</span><span class="token number">416</span><span class="token punctuation">[</span>Form<span class="token punctuation">]</span>Screen<span class="token operator">=</span>NoneBackColor<span class="token operator">=</span>#EFEFEFStartState<span class="token operator">=</span><span class="token number">0</span>ShowInTaskbar<span class="token operator">=</span>True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是软件关联文件后不同格式显示不同的icon以及运行截图示例</p><p><img src="https://img-blog.csdnimg.cn/20191016093337890.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="Feep示例"><br><img src="https://img-blog.csdnimg.cn/20191015034822386.gif" alt="在这里插入图片描述"><br>支持鼠标和快捷键操作：<br><strong>鼠标操作方法</strong><br>查看原始比例：单击鼠标 左键（移动鼠标可以拖动图片）<br>锁定原始比例：查看原始比例时单击 鼠标中键 （再次操作可解除锁定）<br>切换图片：滚轮向上 为上一张，滚轮向下 为下一张<br>全屏/窗口：单击鼠标 中键<br>移动窗口：按住 鼠标中键 拖动<br>调整窗口：在窗口边缘和角落按住  鼠标左键  移动<br>水平翻转：<em>调整窗口</em>宽度到 0<br>垂直翻转：<em>调整窗口</em>高度到 0<br>旋转图片：按住鼠标<code>右键</code>+<code>滚轮</code><br>退出程序：在图片上单击  鼠标右键</p><p><strong>键盘操作方法</strong><br>定位文件：Ctrl + B<br>复制图像：Ctrl + C<br>删除文件：Shift`+Delete（Delete：移入回收站）<br>切换图片：Up / Down<br>旋转图片：Left / Right<br>全屏/窗口：空格 键<br>退出程序：Esc 键<br>幻灯片模式：数字键 1 至 9 能够设置秒数并开始播放幻灯片（先按几次数字键 0 能够将单位设置成十、百、千、万、十万秒）</p><p>网盘链接地址：<a href="https://pan.baidu.com/s/1agbijX-YYy35bPtZlDy1oA">https://pan.baidu.com/s/1agbijX-YYy35bPtZlDy1oA</a> 提取码:25vu<br>在线下载地址：<a href="https://www.lanzous.com/i38hjmj">https://www.lanzous.com/i38hjmj</a></p><h3 id="EveryThing"><a href="#EveryThing" class="headerlink" title="EveryThing"></a><font color="#ff502f">EveryThing</font></h3><p>Everything是一款文件、文件夹名称快速搜索软件。在搜索之前就会把所用的文件和文件夹都列出来，这一点与Windows自带的搜索系统不一样，所以称之Everything。在搜索框输入文字，它就会只显示过滤后的文件和目录。软件大小1.4MB，</p><p>基于名称快速定位文件和文件夹。</p><ul><li>轻量安装文件</li><li>干净简洁的用户界面</li><li>快速文件索引</li><li>快速搜索</li><li>最小资源使用</li><li>便于文件分享</li><li>实时更新<br><img src="https://img-blog.csdnimg.cn/2019101609563498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="Everything"><br>网盘链接地址：<a href="https://pan.baidu.com/s/1CE_8uI-lTsVeZWFy8ekHFg">https://pan.baidu.com/s/1CE_8uI-lTsVeZWFy8ekHFg</a> 提取码:b688<br>官网下载地址：<a href="https://www.voidtools.com/zh-cn/">https://www.voidtools.com/zh-cn/</a></li></ul><h3 id="7-zip"><a href="#7-zip" class="headerlink" title="7-zip"></a><font color="#ff502f">7-zip</font></h3><p><strong>7-Zip</strong>是一款高压缩比的压缩软件，不仅支持独有的7z文件格式，而且还支持各种其它压缩文件格式，其中包括 ZIP、RAR、CAB、GZIP、BZIP2和TAR等格式。此软件压缩的压缩比要比普通ZIP文件高30-50%。软件大小1.58MB<br><img src="https://img-blog.csdnimg.cn/20191015034848729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="7-Zip"></p><p>网盘链接地址：<a href="https://pan.baidu.com/s/1xNU7nHX36GSdggEs0fUgIQ">https://pan.baidu.com/s/1xNU7nHX36GSdggEs0fUgIQ</a> 提取码:7k2z<br>官网下载地址：<a href="https://www.7-zip.org/">https://www.7-zip.org/</a></p><h3 id="Beyond-Compare"><a href="#Beyond-Compare" class="headerlink" title="Beyond Compare"></a><font color="#ff502f">Beyond Compare</font></h3><p><strong>Beyond Compare</strong>是智能的比较工具：它只需使用简单而强大的命令和操作，即可开启最优质的对比体验，找出你感兴趣的差异，合并变化，然后同步文件，并生成报告。可随时随地访问数据：用户可以从Windows、Mac OSX和Linux工作站直接访问FTP网站、媒体设备、WebDAV资源，svn存储库和云存储。Beyond Compare因其强悍而独特的文件比较功能早就声名鹊起，更是被编程人员、网站管理人员所运用，也被用于网吧管理及公司多文档管理。 Beyond Compare支持11种文件类型对比及功能，包括文件夹比较、文件夹合并、文件夹同步、文本比较、文本合并、表格比较、16进制比较、MP3比较、图片比较、注册表比较和版本比较，比较类型非常多，所以说Beyond Compare对比文件更专业。<br><img src="https://img-blog.csdnimg.cn/20191015034900968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="Beyond Compare"></p><p>网盘链接地址：<a href="https://pan.baidu.com/s/1IiJyehSiOf5a1ZO6yfUgHg">https://pan.baidu.com/s/1IiJyehSiOf5a1ZO6yfUgHg</a> 提取码:fjg5<br>官网下载地址：<a href="http://www.scootersoftware.com/download.php">http://www.scootersoftware.com/download.php</a></p><h3 id="SQLiteExpert"><a href="#SQLiteExpert" class="headerlink" title="SQLiteExpert"></a><font color="#ff502f">SQLiteExpert</font></h3><p><strong>SQLite</strong>可视化管理工具。允许用户在 SQLite 服务器上执行创建、编辑、复制、提取等操作。SQLite Expert Professional是一款可视化的数据库管理工具，允许用户在 SQLite 服务器上执行创建、编辑、复制、提取等操作。SQLite Expert支持所有的图形界面的SQLite特征。它包括一个可视化查询生成器，一个SQL编辑与语法突出和代码自动完成，强大的table和view设计与导入导出功能。软件大小21MB。<br><img src="https://img-blog.csdnimg.cn/20191015034914183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="SQLiteExpert"></p><p>网盘链接地址：<a href="https://pan.baidu.com/s/18CKbZcnpD0VjmwGTysSvXg">https://pan.baidu.com/s/18CKbZcnpD0VjmwGTysSvXg </a> 提取码:aul4<br>官网下载地址：<a href="http://www.sqliteexpert.com/download.html">http://www.sqliteexpert.com/download.html</a></p><h2 id="编辑器类"><a href="#编辑器类" class="headerlink" title="编辑器类"></a>编辑器类</h2><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a><font color="#ff502f">vim</font></h3><p><strong>vim</strong>是一款编辑文本的强大工具，使用命令对文本进行操作，熟练使用将会大大提升工作效率，但是上手相对较难，而且得经常使用才能记住那些命令，提升开发速度。下面是一些常用的命令</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token keyword">vi</span> test<span class="token operator">.</span>txt  打开或创建一个文件，默认是命令模式<span class="token keyword">vi</span> <span class="token punctuation">:</span><span class="token function">Explore</span><span class="token punctuation">(</span><span class="token punctuation">:</span>Ex<span class="token punctuation">)</span>  打当前文件目录树<span class="token keyword">vi</span> <span class="token punctuation">:</span><span class="token function">Vexplore</span><span class="token punctuation">(</span><span class="token punctuation">:</span>Ve<span class="token punctuation">)</span> 垂直分割窗口打开文件目录树<span class="token keyword">vi</span> <span class="token punctuation">:</span><span class="token function">Sexlpore</span><span class="token punctuation">(</span><span class="token punctuation">:</span>Se<span class="token punctuation">)</span> 水平分割窗口打开文件目录树切换到可插入模式：    i  是在光标前面插入内容，    a  在光标后面插入内容<span class="token punctuation">,</span>    <span class="token keyword">o</span>  在光标下一行插入内容，    I  在行首插入内容，    A  在行尾插入内容<span class="token punctuation">,</span>    O  在光标上一行插入内容esc键       退回到命令模式<span class="token punctuation">:</span>          切换到末行模式<span class="token punctuation">:</span><span class="token keyword">wq</span>         保存退出<span class="token punctuation">:</span><span class="token keyword">wq</span><span class="token operator">!</span>        强制保存并退出<span class="token punctuation">:</span><span class="token keyword">q</span><span class="token operator">!</span>         不保存退出Shilt <span class="token operator">+</span> zz  相当于<span class="token keyword">wq</span>复制、剪切、删除、撤销：    yy    复制光标所在行    4yy   复制光标所在行向下<span class="token number">4</span>行    <span class="token keyword">p</span>     粘贴    dd    剪切光标所在行    3dd   剪切光标所在行向下<span class="token number">3</span>行    d0    剪切光标到第一行的内容    D     从当前光标开始到末尾剪切    <span class="token keyword">x</span>     删除光标后面一个字母    <span class="token keyword">X</span>     删除光标前面一个字母    dw    删除一个单词    <span class="token keyword">u</span>     撤销当前操作    Ctrl  <span class="token operator">+</span> <span class="token keyword">r</span> 反撤销    光标定位：    <span class="token keyword">h</span>   光标向左         <span class="token keyword">j</span>   光标向下    <span class="token keyword">k</span>   光标向上    <span class="token keyword">l</span>   光标向右    M   光标定位到当前页中间    H   光标定位到当前页第一行    L   光标定位到当前页最后一行    <span class="token punctuation">:</span><span class="token keyword">n</span>  编辑模式下，将光标移动到指定行，如<span class="token punctuation">:</span><span class="token number">20</span>移动到第<span class="token number">20</span>行    20G 快速定位到第<span class="token number">20</span>行    G   快速到代码最后一行    gg  快速回到代码第一行    <span class="token keyword">w</span><span class="token operator">/</span>W 跳至下一个单词词首（前面可加数字，光标移动多个单词，如4w）    <span class="token keyword">b</span><span class="token operator">/</span>B 跳至上一个单词词首（前面可加数字，光标移动多个单词<span class="token punctuation">,</span>如20B）    <span class="token keyword">e</span><span class="token operator">/</span>E 跳至下一个单词词尾（前面可加数字，光标移动多个单词）    <span class="token number">0</span><span class="token operator">/</span>^ 光标移动到当前行行首    $   光标移动到当前行行尾    fa  光标移动到当前行下一个a字母处    FA  光标移动到当前行下一个A字母处    <span class="token operator">%</span>   当光标在括号 <span class="token punctuation">(</span> <span class="token punctuation">[</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> 处时，按<span class="token operator">%</span>会定位到与之成对的括号处    Ctrl <span class="token operator">-</span> <span class="token punctuation">]</span> 打开光标所在的文件    Ctrl <span class="token number">0</span>   返回上一次窗口     Ctrl <span class="token keyword">f</span> 向下翻一页    Ctrl <span class="token keyword">b</span> 向上翻一页    v（V） <span class="token operator">+</span> <span class="token keyword">h</span><span class="token punctuation">,</span><span class="token keyword">j</span><span class="token punctuation">,</span><span class="token keyword">k</span><span class="token punctuation">,</span><span class="token keyword">l</span>  选中多行<span class="token operator">></span><span class="token operator">></span>  向右移动<span class="token operator">&lt;</span><span class="token operator">&lt;</span>  向左移动<span class="token operator">.</span>   重复执行命令<span class="token keyword">r</span>   替换一个字母R   替换光标及以后的字母<span class="token punctuation">:</span><span class="token operator">%</span>s<span class="token operator">/</span>str1<span class="token operator">/</span>str2<span class="token operator">/</span>g   将str1替换为str2<span class="token operator">/</span>  搜索<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20191015034929977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="VIM"></p><p>网盘链接地址：<a href="https://pan.baidu.com/s/1YT8YtzuGrJFD3BufSGf4LA">https://pan.baidu.com/s/1YT8YtzuGrJFD3BufSGf4LA</a> 提取码:7z55<br>官网下载地址：<a href="https://www.vim.org/download.php">https://www.vim.org/download.php</a></p><h3 id="SublineText3"><a href="#SublineText3" class="headerlink" title="SublineText3"></a><font color="#ff502f">SublineText3</font></h3><p><strong>Sublime Text</strong> 被称作Windows下的TextMate，而根据其官网介绍，Sublime Text的特点如下：拥有高效、没有干扰的界面，在编辑方面的多选、宏、代码片段等功能，以及很有特色的Minimap。Sublime Text是一个代码编辑器（Sublime Text是收费软件，但目前可以无限期试用）也是HTML和散文先进的文本编辑器。漂亮的用户界面和非凡的功能，例如迷你地图，多选择，Python的插件，代码段，等等。完全可自定义键绑定，菜单和工具栏。Sublime Text的主要功能包括：拼写检查，书签，完整的Python API，Goto功能，即时项目切换，多选择，多窗口等等。</p><p><img src="https://img-blog.csdnimg.cn/2019101503495665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="Sublime Text"></p><p>网盘链接地址：<a href="https://pan.baidu.com/s/1y0NRhhWUReqJcHWjVbxQGA">https://pan.baidu.com/s/1y0NRhhWUReqJcHWjVbxQGA</a> 提取码:76xp<br>官网下载地址：<a href="http://www.sublimetext.com/3">http://www.sublimetext.com/3</a></p><h3 id="NotePad"><a href="#NotePad" class="headerlink" title="NotePad ++"></a><font color="#ff502f">NotePad ++</font></h3><p>**Notepad++**是在微软视窗环境之下的一个免费的代码编辑器。它使用较少的CPU功率，降低电脑系统能源消耗，但轻巧且执行效率高，使得Notepad++可完美地取代微软视窗的记事本。<br><img src="https://img-blog.csdnimg.cn/20191015035009161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="Notepad++"></p><p>官网下载地址：<a href="https://notepad-plus-plus.org/downloads/">https://notepad-plus-plus.org/downloads/</a></p><h3 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a><font color="#ff502f">Typora</font></h3><p><strong>Typora</strong> 是一款 Markdown 编辑器，支持Windows、macOS和Linux系统，可以算作一款 Windows 下难得的好看、优美的客户端。软件大小42MB。<br><img src="https://img-blog.csdnimg.cn/20191015035019901.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="Typora"></p><p>网盘链接地址：<a href="https://pan.baidu.com/s/1tJqP02C_rJqcnvubx2i61w">https://pan.baidu.com/s/1tJqP02C_rJqcnvubx2i61w</a> 提取码:o8up<br>官网下载地址：<a href="https://www.typora.io/">https://www.typora.io/</a></p><h3 id="MarkdownPad2"><a href="#MarkdownPad2" class="headerlink" title="MarkdownPad2"></a><font color="#ff502f">MarkdownPad2</font></h3><p><strong>MarkdownPad 2</strong>是一款不错的Markdown编辑器，具备所有Markdown的基本语法外支持一些特别的扩展，比如表格等。可以帮助你快速的将文本转换为美观的HTML/XHTML的网页格式代码！软件操作简单容易，上手很快。软件大小36MB。<br><img src="https://img-blog.csdnimg.cn/2019101503502957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="MarkdownPad 2"></p><p>网盘链接地址：<a href="https://pan.baidu.com/s/1AsfKAbRCYZVX_mc1Ayo8tQ">https://pan.baidu.com/s/1AsfKAbRCYZVX_mc1Ayo8tQ</a> 提取码:0ie8<br>官网下载地址：<a href="http://markdownpad.com/download.html">http://markdownpad.com/download.html</a></p><p><strong>说明</strong><br>由于我的电脑是Windows 7系统，以上软件可能在Windows 8和Windows 10系统上运行会有兼容性的问题。这些软件是平时使用较多的一些软件，很多软件可以相互代替，视个人喜好安装自己喜欢的。</p>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OkHttp源码解析</title>
      <link href="/AndroidOkHttpSourceCode/"/>
      <url>/AndroidOkHttpSourceCode/</url>
      
        <content type="html"><![CDATA[<h2 id="一、OkHttp总体架构介绍"><a href="#一、OkHttp总体架构介绍" class="headerlink" title="一、OkHttp总体架构介绍"></a>一、OkHttp总体架构介绍</h2><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>OkHttp 是一个处理网络请求的开源项目，是 Android 端最火热的轻量级框架，由Square 公司贡献用于替代 HttpUrlConnection 和 Apache HttpClient。随着 OkHttp 的不断成熟，越来越多的 Android 开发者使用 OkHttp 作为网络框架。OkHttp之所以可以赢得如此多开发者的喜爱，主要得益于如下特点：</p><ul><li>支持 HTTPS/HTTP2/WebSocket</li><li>内部维护任务队列线程池，友好支持并发访问 </li><li>内部维护连接池，支持多路复用，减少连接创建开销</li><li>socket 创建支持最佳路由</li><li>提供拦截器链（InterceptorChain），实现 request 与 response 的分层处理(如透明GZIP 压缩，logging 等) </li></ul><p><strong>添加依赖</strong></p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">implementation <span class="token string">'com.squareup.okhttp3:okhttp:3.11.0'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>本篇所有的源码基于OkHttp 3.11.0版本，不同版本源码会有所不同。</p></blockquote><h4 id="OkHttp两种调用方式"><a href="#OkHttp两种调用方式" class="headerlink" title="OkHttp两种调用方式"></a>OkHttp两种调用方式</h4><h5 id="同步调用"><a href="#同步调用" class="headerlink" title="同步调用"></a>同步调用</h5><p><code>RealCall.java:68</code> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>executed<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Already Executed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      executed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">captureCallStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    eventListener<span class="token punctuation">.</span><span class="token function">callStart</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      client<span class="token punctuation">.</span><span class="token function">dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Response</span> result <span class="token operator">=</span> <span class="token function">getResponseWithInterceptorChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Canceled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      eventListener<span class="token punctuation">.</span><span class="token function">callFailed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      client<span class="token punctuation">.</span><span class="token function">dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finished</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先加锁置标志位，接着使用分配器的 executed 方法将 call 加入到同步队列中，然后调用 getResponseWithInterceptorChain 方法执行 http 请求，最后调用 finishied 方法将 call 从同步队列中删除 。</p><h5 id="异步调用"><a href="#异步调用" class="headerlink" title="异步调用"></a>异步调用</h5><p><code>RealCall.java:93</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token class-name">Callback</span> responseCallback<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>executed<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Already Executed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      executed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">captureCallStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    eventListener<span class="token punctuation">.</span><span class="token function">callStart</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AsyncCall</span><span class="token punctuation">(</span>responseCallback<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样先加锁置标志位，然后将封装的一个执行体放到异步执行队列中。这里面引入了一个新的类 AsyncCall，这个类继承于 NamedRunnable，实现了 Runnable 接口。NamedRunnable 可以给当前的线程设置名字，并且用模板方法将线程的执行体放到了 execute 方法中。</p><h4 id="总体架构"><a href="#总体架构" class="headerlink" title="总体架构"></a>总体架构</h4><p><img src="https://img-blog.csdnimg.cn/20210511164224462.png" alt="OkHttp总体架构图"></p><p>OkHttp 的总体架构，大致可以分为以下几层：</p><ul><li>Interface—接口层：接受网络访问请求 </li><li>Protocol—协议层：处理协议逻辑 </li><li>Connection—连接层：管理网络连接，发送新的请求，接收服务器访问</li><li>Cache—缓存层：管理本地缓存 </li><li>I/O—I/O 层：实际数据读写实现 </li><li>Inteceptor—拦截器层：拦截网络访问，插入拦截逻辑</li></ul><h5 id="Interface——接口层："><a href="#Interface——接口层：" class="headerlink" title="Interface——接口层："></a>Interface——接口层：</h5><p>接口层接收用户的网络访问请求（同步请求/异步请求），发起实际的网络访问。OkHttpClient 是 OkHttp 框架的客户端，更确切的说是一个用户面板。用户使用 OkHttp 进行各种设置，发起各种网络请求都是通过 OkHttpClient 完成的。每个 OkHttpClient 内部都维护了属于自己的任务队列，连接池，Cache拦截器等，所以在使用 OkHttp 作为网络框架时应该全局共享一个 OkHttpClient 实例。 </p><p>Call 描述一个实际的访问请求，用户的每一个网络请求都是一个 Call 实例。Call 本身只是一个接口，定义了 Call 的接口方法，实际执行过程中，OkHttp 会为每一个请求创建一个 RealCall,每一个 RealCall 内部有一个 AsyncCall: </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">AsyncCall</span> <span class="token keyword">extends</span> <span class="token class-name">NamedRunnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Callback</span> responseCallback<span class="token punctuation">;</span>    <span class="token class-name">AsyncCall</span><span class="token punctuation">(</span><span class="token class-name">Callback</span> responseCallback<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"OkHttp %s"</span><span class="token punctuation">,</span> <span class="token function">redactedUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>responseCallback <span class="token operator">=</span> responseCallback<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span> <span class="token function">host</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> originalRequest<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Request</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> originalRequest<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">RealCall</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">RealCall</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AsyncCall 继承的 NamedRunnable 继承自 Runnable 接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">NamedRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">NamedRunnable</span><span class="token punctuation">(</span><span class="token class-name">String</span> format<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> oldName <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>oldName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以每一个 Call 就是一个线程，而执行 Call 的过程就是执行其 execute 方法的过程。 </p><p>Dispatcher 是 OkHttp 的任务队列，其内部维护了一个线程池，当有接收到一个 Call 时，Dispatcher 负责在线程池中找到空闲的线程并执行其 execute 方法。</p><h5 id="Protocol——协议层：处理协议逻辑"><a href="#Protocol——协议层：处理协议逻辑" class="headerlink" title="Protocol——协议层：处理协议逻辑"></a>Protocol——协议层：处理协议逻辑</h5><p>Protocol 层负责处理协议逻辑，OkHttp 支持 Http1/Http2/WebSocket 协议，并在 3.7 版本中放弃了对 Spdy 协议，鼓励开发者使用 Http2。 </p><h5 id="Connection——连接层：管理网络连接，发送新的请求，接收服务器访问"><a href="#Connection——连接层：管理网络连接，发送新的请求，接收服务器访问" class="headerlink" title="Connection——连接层：管理网络连接，发送新的请求，接收服务器访问"></a>Connection——连接层：管理网络连接，发送新的请求，接收服务器访问</h5><p>连接层顾名思义就是负责网络连接。在连接层中有一个连接池，统一管理所有的 Socket 连接，当用户新发起一个网络请求时，OkHttp 会首先从连接池中查找是否有符合要求的连接，如果有则直接通过该连接发送网络请求；否则新创建一个网络连接。 </p><p>RealConnection 描述一个物理 Socket 连接，连接池中维护多个RealConnection 实例。由于Http2 支持多路复用，一个 RealConnection 可以支持多个网络访问请求，所以 OkHttp 又引入了 StreamAllocation 来描述一个实际的网络请求开销（从逻辑上一个 Stream 对应一个 Call，但在实际网络请求过程中一个 Call 常常涉及到多次请求。如重定向，Authenticate 等场景。所以准确地说，一个 Stream 对应一次请求，而一个 Call 对应一组有逻辑关联的 Stream），一个 RealConnection 对应一个或多个 StreamAllocation，所以 StreamAllocation 可以看做是 RealConenction 的计数器，当 RealConnection 的引用计数变为 0，且长时间没有被其他请求重新占用就将被释放。连接层是 OkHttp 的核心部分，后面再详细介绍。</p><h5 id="Cache——缓存层：管理本地缓存"><a href="#Cache——缓存层：管理本地缓存" class="headerlink" title="Cache——缓存层：管理本地缓存"></a>Cache——缓存层：管理本地缓存</h5><p>Cache 层负责维护请求缓存，当用户的网络请求在本地已有符合要求的缓存时，OkHttp 会直接从缓存中返回结果，从而节省网络开销。 </p><h5 id="I-O——I-O-层：实际数据读写实现"><a href="#I-O——I-O-层：实际数据读写实现" class="headerlink" title="I/O——I/O 层：实际数据读写实现"></a>I/O——I/O 层：实际数据读写实现</h5><p>I/O 层负责实际的数据读写。OkHttp 的另一大有点就是其高效的 I/O 操作，这归因于其高效的 I/O 库 okio。 </p><h5 id="Inteceptor——拦截器层：拦截网络访问，插入拦截逻辑"><a href="#Inteceptor——拦截器层：拦截网络访问，插入拦截逻辑" class="headerlink" title="Inteceptor——拦截器层：拦截网络访问，插入拦截逻辑"></a>Inteceptor——拦截器层：拦截网络访问，插入拦截逻辑</h5><p>拦截器层提供了一个类 AOP 接口，方便用户可以切入到各个层面对网络访问进行拦截并执行相关逻辑。</p><h2 id="二、OkHttp源码解析"><a href="#二、OkHttp源码解析" class="headerlink" title="二、OkHttp源码解析"></a>二、OkHttp源码解析</h2><h4 id="基本使用流程和拦截器"><a href="#基本使用流程和拦截器" class="headerlink" title="基本使用流程和拦截器"></a>基本使用流程和拦截器</h4><h5 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">OkHttpClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Request</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"https://www.wanandroid.com//hotkey/json"</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span><span class="token class-name">Call</span> call<span class="token punctuation">,</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"OkHttp"</span><span class="token punctuation">,</span><span class="token string">"Call Failed:"</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span><span class="token class-name">Call</span> call<span class="token punctuation">,</span><span class="token class-name">Response</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"OkHttp"</span><span class="token punctuation">,</span><span class="token string">"Call succeeded:"</span><span class="token operator">+</span>response<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OkHttpClient.newCall 实际是创建一个 RealCall 实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">Call</span> <span class="token function">newCall</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RealCall</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>RealCall.enqueue 实际就是将一个 RealCall 放入到任务队列中，等待合适的机会执行，最终 RealCall 被转化成一个 AsyncCall 并被放入到任务队列中，AsyncCall 的 execute 方法最终将会被执行：</p><p><code>RealCall .java:144</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span> <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">boolean</span> signalledCallback <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Response</span> response <span class="token operator">=</span> <span class="token function">getResponseWithInterceptorChain</span><span class="token punctuation">(</span>forWebSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>canceled<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          signalledCallback <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          responseCallback<span class="token punctuation">.</span><span class="token function">onFailure</span><span class="token punctuation">(</span><span class="token class-name">RealCall</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Canceled"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          signalledCallback <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          responseCallback<span class="token punctuation">.</span><span class="token function">onResponse</span><span class="token punctuation">(</span><span class="token class-name">RealCall</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>signalledCallback<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// Do not signal the callback twice!</span>          logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Level</span><span class="token punctuation">.</span>INFO<span class="token punctuation">,</span> <span class="token string">"Callback failure for "</span> <span class="token operator">+</span> <span class="token function">toLoggableString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          responseCallback<span class="token punctuation">.</span><span class="token function">onFailure</span><span class="token punctuation">(</span><span class="token class-name">RealCall</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        client<span class="token punctuation">.</span><span class="token function">dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finished</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>execute 方法的逻辑并不复杂，简单的说就是： </p><ul><li>调用 getResponseWithInterceptorChain 获取服务器返回 </li><li>通知任务分发器(client.dispatcher)该任务已结束 </li></ul><p>getResponseWithInterceptorChain 构建了一个拦截器链，通过依次执行该拦截器链中的每一个拦截器最终得到服务器返回。 </p><h5 id="构建拦截器链"><a href="#构建拦截器链" class="headerlink" title="构建拦截器链"></a>构建拦截器链</h5><p>首先来看下 getResponseWithInterceptorChain 的实现：</p><p><code>RealCall.java:158</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Response</span> <span class="token function">getResponseWithInterceptorChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Build a full stack of interceptors.</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Interceptor</span><span class="token punctuation">></span></span> interceptors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    interceptors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">interceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    interceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>retryAndFollowUpInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>    interceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BridgeInterceptor</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">cookieJar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    interceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CacheInterceptor</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">internalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    interceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConnectInterceptor</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>forWebSocket<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      interceptors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">networkInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    interceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CallServerInterceptor</span><span class="token punctuation">(</span>forWebSocket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Interceptor<span class="token punctuation">.</span>Chain</span> chain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealInterceptorChain</span><span class="token punctuation">(</span>interceptors<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>        originalRequest<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> eventListener<span class="token punctuation">,</span> client<span class="token punctuation">.</span><span class="token function">connectTimeoutMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        client<span class="token punctuation">.</span><span class="token function">readTimeoutMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> client<span class="token punctuation">.</span><span class="token function">writeTimeoutMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>originalRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其逻辑大致分为两部分： </p><ul><li>创建一系列拦截器，并将其放入一个拦截器数组中。这部分拦截器即包括用户自定义的拦截器也包括框架内部拦截器 </li><li>创建一个拦截器链 RealInterceptorChain，并执行拦截器链的 proceed 方法 </li></ul><p>接下来看下 RealInterceptorChain 的实现逻辑： </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">RealInterceptorChain</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor<span class="token punctuation">.</span>Chain</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Interceptor</span><span class="token punctuation">></span></span> interceptors<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">StreamAllocation</span> streamAllocation<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HttpCodec</span> httpCodec<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RealConnection</span> connection<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Request</span> request<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Call</span> call<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">EventListener</span> eventListener<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> connectTimeout<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> readTimeout<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> writeTimeout<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> calls<span class="token punctuation">;</span>   <span class="token comment">//省略一部分代码</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">proceed</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">proceed</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> streamAllocation<span class="token punctuation">,</span> httpCodec<span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">proceed</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">,</span> <span class="token class-name">StreamAllocation</span> streamAllocation<span class="token punctuation">,</span> <span class="token class-name">HttpCodec</span> httpCodec<span class="token punctuation">,</span>      <span class="token class-name">RealConnection</span> connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> interceptors<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    calls<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">//省略一部分代码</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment">// Call the next interceptor in the chain.</span>    <span class="token class-name">RealInterceptorChain</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealInterceptorChain</span><span class="token punctuation">(</span>interceptors<span class="token punctuation">,</span> streamAllocation<span class="token punctuation">,</span> httpCodec<span class="token punctuation">,</span>        connection<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> call<span class="token punctuation">,</span> eventListener<span class="token punctuation">,</span> connectTimeout<span class="token punctuation">,</span> readTimeout<span class="token punctuation">,</span>        writeTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Interceptor</span> interceptor <span class="token operator">=</span> interceptors<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Response</span> response <span class="token operator">=</span> interceptor<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> response<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 proceed 方法中的核心代码可以看到，proceed 实际上也做了两件事： </p><ul><li>创建下一个拦截链。传入 index + 1 使得下一个拦截器链只能从下一个拦截器开始访 问</li></ul><ul><li>执行索引为 index 的 intercept 方法，并将下一个拦截器链传入该方法 </li></ul><p>接下来再看下第一个拦截器 RetryAndFollowUpInterceptor 的 intercept 方法： </p><p><code>RetryAndFollowUpInterceptor.java:105</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Chain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Request</span> request <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">RealInterceptorChain</span> realChain <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RealInterceptorChain</span><span class="token punctuation">)</span> chain<span class="token punctuation">;</span>    <span class="token class-name">Call</span> call <span class="token operator">=</span> realChain<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">EventListener</span> eventListener <span class="token operator">=</span> realChain<span class="token punctuation">.</span><span class="token function">eventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StreamAllocation</span> streamAllocation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StreamAllocation</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">connectionPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">createAddress</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> call<span class="token punctuation">,</span> eventListener<span class="token punctuation">,</span> callStackTrace<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>streamAllocation <span class="token operator">=</span> streamAllocation<span class="token punctuation">;</span>    <span class="token keyword">int</span> followUpCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">Response</span> priorResponse <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>canceled<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        streamAllocation<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Canceled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token class-name">Response</span> response<span class="token punctuation">;</span>      <span class="token keyword">boolean</span> releaseConnection <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        response <span class="token operator">=</span> realChain<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> streamAllocation<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        releaseConnection <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RouteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// The attempt to connect via a route failed. The request will not have been sent.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">recover</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getLastConnectException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> streamAllocation<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">throw</span> e<span class="token punctuation">.</span><span class="token function">getFirstConnectException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        releaseConnection <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// An attempt to communicate with a server failed. The request may have been sent.</span>        <span class="token keyword">boolean</span> requestSendStarted <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">ConnectionShutdownException</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">recover</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> streamAllocation<span class="token punctuation">,</span> requestSendStarted<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        releaseConnection <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// We're throwing an unchecked exception. Release any resources.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>releaseConnection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          streamAllocation<span class="token punctuation">.</span><span class="token function">streamFailed</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          streamAllocation<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// Attach the prior response if it exists. Such responses never have a body.</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>priorResponse <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        response <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">priorResponse</span><span class="token punctuation">(</span>priorResponse<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token class-name">Request</span> followUp<span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        followUp <span class="token operator">=</span> <span class="token function">followUpRequest</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> streamAllocation<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        streamAllocation<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>followUp <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>forWebSocket<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          streamAllocation<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> response<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">closeQuietly</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码最关键的代码是: </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">response <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">RealInterceptorChain</span><span class="token punctuation">)</span> chain<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> streamAllocation<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这行代码就是执行下一个拦截器链的 proceed 方法。而我们知道在下一个拦截器链中又会执行下一个拦截器的 intercept 方法。所以整个执行链就在拦截器与拦截器链中交替执行，最终完成所有拦截器的操作。这也是 OkHttp 拦截器的链式执行逻辑。而一个拦截器的 intercept 方法所执行的逻辑大致分为三部分： </p><ul><li>在发起请求前对 request 进行处理 </li><li>调用下一个拦截器，获取 response </li><li>对 response 进行处理，返回给上一个拦截器 </li></ul><p>这就是 OkHttp 拦截器机制的核心逻辑。所以一个网络请求实际上就是一个个拦截器执行其intercept 方法的过程。而这其中除了用户自定义的拦截器外还有几个核心拦截器完成了网络访问的核心逻辑，按照先后顺序依次是：</p><ul><li>RetryAndFollowUpInterceptor </li></ul><ul><li>BridgeInterceptor </li><li>CacheInterceptor </li><li>ConnectIntercetot </li><li>CallServerInterceptor</li></ul><h5 id="RetryAndFollowUpInterceptor"><a href="#RetryAndFollowUpInterceptor" class="headerlink" title="RetryAndFollowUpInterceptor"></a>RetryAndFollowUpInterceptor</h5><p>如上文代码所示，RetryAndFollowUpInterceptor 负责两部分逻辑： </p><ul><li>在网络请求失败后进行重试 </li><li>当服务器返回当前请求需要进行重定向时直接发起新的请求，并在条件允许情况下复用当前连接</li></ul><h5 id="BridgeInterceptor"><a href="#BridgeInterceptor" class="headerlink" title="BridgeInterceptor"></a>BridgeInterceptor</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">BridgeInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">CookieJar</span> cookieJar<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">BridgeInterceptor</span><span class="token punctuation">(</span><span class="token class-name">CookieJar</span> cookieJar<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cookieJar <span class="token operator">=</span> cookieJar<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Chain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Request</span> userRequest <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span> requestBuilder <span class="token operator">=</span> userRequest<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">RequestBody</span> body <span class="token operator">=</span> userRequest<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>body <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">MediaType</span> contentType <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>contentType <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        requestBuilder<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> contentType<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">long</span> contentLength <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">contentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>contentLength <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        requestBuilder<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Length"</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>contentLength<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        requestBuilder<span class="token punctuation">.</span><span class="token function">removeHeader</span><span class="token punctuation">(</span><span class="token string">"Transfer-Encoding"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        requestBuilder<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Transfer-Encoding"</span><span class="token punctuation">,</span> <span class="token string">"chunked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        requestBuilder<span class="token punctuation">.</span><span class="token function">removeHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Length"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>userRequest<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Host"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      requestBuilder<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Host"</span><span class="token punctuation">,</span> <span class="token function">hostHeader</span><span class="token punctuation">(</span>userRequest<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>userRequest<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Connection"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      requestBuilder<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Connection"</span><span class="token punctuation">,</span> <span class="token string">"Keep-Alive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// If we add an "Accept-Encoding: gzip" header field we're responsible for also decompressing</span>    <span class="token comment">// the transfer stream.</span>    <span class="token keyword">boolean</span> transparentGzip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>userRequest<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Accept-Encoding"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> userRequest<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Range"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      transparentGzip <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      requestBuilder<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Accept-Encoding"</span><span class="token punctuation">,</span> <span class="token string">"gzip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Cookie</span><span class="token punctuation">></span></span> cookies <span class="token operator">=</span> cookieJar<span class="token punctuation">.</span><span class="token function">loadForRequest</span><span class="token punctuation">(</span>userRequest<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cookies<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      requestBuilder<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Cookie"</span><span class="token punctuation">,</span> <span class="token function">cookieHeader</span><span class="token punctuation">(</span>cookies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>userRequest<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      requestBuilder<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span> <span class="token class-name">Version</span><span class="token punctuation">.</span><span class="token function">userAgent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Response</span> networkResponse <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>requestBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token function">receiveHeaders</span><span class="token punctuation">(</span>cookieJar<span class="token punctuation">,</span> userRequest<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> networkResponse<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Response<span class="token punctuation">.</span>Builder</span> responseBuilder <span class="token operator">=</span> networkResponse<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>userRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>transparentGzip        <span class="token operator">&amp;&amp;</span> <span class="token string">"gzip"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>networkResponse<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Encoding"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token function">hasBody</span><span class="token punctuation">(</span>networkResponse<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">GzipSource</span> responseBody <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GzipSource</span><span class="token punctuation">(</span>networkResponse<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Headers</span> strippedHeaders <span class="token operator">=</span> networkResponse<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token string">"Content-Encoding"</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token string">"Content-Length"</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      responseBuilder<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>strippedHeaders<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">String</span> contentType <span class="token operator">=</span> networkResponse<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      responseBuilder<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RealResponseBody</span><span class="token punctuation">(</span>contentType<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token class-name">Okio</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> responseBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/** Returns a 'Cookie' HTTP request header with all cookies, like &#123;@code a=b; c=d&#125;. */</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">cookieHeader</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Cookie</span><span class="token punctuation">></span></span> cookies<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">StringBuilder</span> cookieHeader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> size <span class="token operator">=</span> cookies<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cookieHeader<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"; "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> cookies<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      cookieHeader<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> cookieHeader<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>BridgeInterceptor 主要负责以下几部分内容： </p><ul><li>设置内容长度，内容编码 </li><li>设置 gzip 压缩，并在接收到内容后进行解压。省去了应用层处理数据解压的麻烦 </li><li>添加 cookie </li><li>设置其他报头，如 User-Agent,Host,Keep-alive 等。其中 Keep-Alive 是实现多路复用的必要步骤</li></ul><h5 id="CacheInterceptor"><a href="#CacheInterceptor" class="headerlink" title="CacheInterceptor"></a>CacheInterceptor</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">CacheInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">final</span> <span class="token class-name">InternalCache</span> cache<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">CacheInterceptor</span><span class="token punctuation">(</span><span class="token class-name">InternalCache</span> cache<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> cache<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Chain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//尝试获取缓存</span>    <span class="token class-name">Response</span> cacheCandidate <span class="token operator">=</span> cache <span class="token operator">!=</span> <span class="token keyword">null</span>        <span class="token operator">?</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取缓存策略</span>    <span class="token class-name">CacheStrategy</span> strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CacheStrategy<span class="token punctuation">.</span>Factory</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> chain<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cacheCandidate<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Request</span> networkRequest <span class="token operator">=</span> strategy<span class="token punctuation">.</span>networkRequest<span class="token punctuation">;</span>    <span class="token class-name">Response</span> cacheResponse <span class="token operator">=</span> strategy<span class="token punctuation">.</span>cacheResponse<span class="token punctuation">;</span>    <span class="token comment">//如果有缓存，更新下相关统计指标：命中率</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      cache<span class="token punctuation">.</span><span class="token function">trackResponse</span><span class="token punctuation">(</span>strategy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//如果当前缓存不符合要求，将其 close</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheCandidate <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> cacheResponse <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">closeQuietly</span><span class="token punctuation">(</span>cacheCandidate<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The cache candidate wasn't applicable. Close it.</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// If we're forbidden from using the network and the cache is insufficient, fail.(如果不能使用网络，同时又没有符合条件的缓存，直接抛 504 错误)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>networkRequest <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> cacheResponse <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token class-name">Protocol</span><span class="token punctuation">.</span>HTTP_1_1<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token number">504</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">"Unsatisfiable Request (only-if-cached)"</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">Util</span><span class="token punctuation">.</span>EMPTY_RESPONSE<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">sentRequestAtMillis</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">receivedResponseAtMillis</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// If we don't need the network, we're done.(如果有缓存同时又不使用网络，则直接返回缓存结果)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>networkRequest <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> cacheResponse<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">cacheResponse</span><span class="token punctuation">(</span><span class="token function">stripBody</span><span class="token punctuation">(</span>cacheResponse<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Response</span> networkResponse <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      networkResponse <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>networkRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// If we're crashing on I/O or otherwise, don't leak the cache body.</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>networkResponse <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> cacheCandidate <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">closeQuietly</span><span class="token punctuation">(</span>cacheCandidate<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// If we have a cache response too, then we're doing a conditional get.(如果既有缓存，同时又发起了请求，说明此时是一个 Conditional Get 请求)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheResponse <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>networkResponse<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> HTTP_NOT_MODIFIED<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Response</span> response <span class="token operator">=</span> cacheResponse<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token function">combine</span><span class="token punctuation">(</span>cacheResponse<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> networkResponse<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">sentRequestAtMillis</span><span class="token punctuation">(</span>networkResponse<span class="token punctuation">.</span><span class="token function">sentRequestAtMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">receivedResponseAtMillis</span><span class="token punctuation">(</span>networkResponse<span class="token punctuation">.</span><span class="token function">receivedResponseAtMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">cacheResponse</span><span class="token punctuation">(</span><span class="token function">stripBody</span><span class="token punctuation">(</span>cacheResponse<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">networkResponse</span><span class="token punctuation">(</span><span class="token function">stripBody</span><span class="token punctuation">(</span>networkResponse<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        networkResponse<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Update the cache after combining headers but before stripping the</span>        <span class="token comment">// Content-Encoding header (as performed by initContentStream()).</span>        cache<span class="token punctuation">.</span><span class="token function">trackConditionalCacheHit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cache<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>cacheResponse<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> response<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果响应资源有更新，关掉原有缓存</span>        <span class="token function">closeQuietly</span><span class="token punctuation">(</span>cacheResponse<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Response</span> response <span class="token operator">=</span> networkResponse<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">cacheResponse</span><span class="token punctuation">(</span><span class="token function">stripBody</span><span class="token punctuation">(</span>cacheResponse<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">networkResponse</span><span class="token punctuation">(</span><span class="token function">stripBody</span><span class="token punctuation">(</span>networkResponse<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token function">hasBody</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">CacheStrategy</span><span class="token punctuation">.</span><span class="token function">isCacheable</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> networkRequest<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Offer this request to the cache.(将网络响应写入 cache 中)</span>        <span class="token class-name">CacheRequest</span> cacheRequest <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">cacheWritingResponse</span><span class="token punctuation">(</span>cacheRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token function">invalidatesCache</span><span class="token punctuation">(</span>networkRequest<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>          cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>networkRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// The cache cannot be written.</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> response<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CacheInterceptor 的职责很明确，就是负责 Cache 的管理 </p><ul><li>当网络请求有符合要求的 Cache 时直接返回 Cache </li><li>当服务器返回内容有改变时更新当前 cache</li><li>如果当前 cache 失效，则删除改缓存</li></ul><h5 id="ConnectInterceptor"><a href="#ConnectInterceptor" class="headerlink" title="ConnectInterceptor"></a>ConnectInterceptor</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ConnectInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">OkHttpClient</span> client<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">ConnectInterceptor</span><span class="token punctuation">(</span><span class="token class-name">OkHttpClient</span> client<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>client <span class="token operator">=</span> client<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Chain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">RealInterceptorChain</span> realChain <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RealInterceptorChain</span><span class="token punctuation">)</span> chain<span class="token punctuation">;</span>    <span class="token class-name">Request</span> request <span class="token operator">=</span> realChain<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StreamAllocation</span> streamAllocation <span class="token operator">=</span> realChain<span class="token punctuation">.</span><span class="token function">streamAllocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// We need the network to satisfy this request. Possibly for validating a conditional GET.</span>    <span class="token keyword">boolean</span> doExtensiveHealthChecks <span class="token operator">=</span> <span class="token operator">!</span>request<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpCodec</span> httpCodec <span class="token operator">=</span> streamAllocation<span class="token punctuation">.</span><span class="token function">newStream</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> doExtensiveHealthChecks<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">RealConnection</span> connection <span class="token operator">=</span> streamAllocation<span class="token punctuation">.</span><span class="token function">connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> realChain<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> streamAllocation<span class="token punctuation">,</span> httpCodec<span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ConnectInterceptor 的 intercept 方法只有一行关键代码: </p><pre class="line-numbers language-none"><code class="language-none">RealConnection connection &#x3D; streamAllocation.connection(); <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即为当前请求找到合适的连接，可能复用已有连接也可能是重新创建的连接，返回的连接由连接池负责决定。 </p><h5 id="CallServerInterceptor"><a href="#CallServerInterceptor" class="headerlink" title="CallServerInterceptor"></a>CallServerInterceptor</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">CallServerInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> forWebSocket<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">CallServerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> forWebSocket<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>forWebSocket <span class="token operator">=</span> forWebSocket<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Chain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">RealInterceptorChain</span> realChain <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RealInterceptorChain</span><span class="token punctuation">)</span> chain<span class="token punctuation">;</span>    <span class="token class-name">HttpCodec</span> httpCodec <span class="token operator">=</span> realChain<span class="token punctuation">.</span><span class="token function">httpStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StreamAllocation</span> streamAllocation <span class="token operator">=</span> realChain<span class="token punctuation">.</span><span class="token function">streamAllocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">RealConnection</span> connection <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RealConnection</span><span class="token punctuation">)</span> realChain<span class="token punctuation">.</span><span class="token function">connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Request</span> request <span class="token operator">=</span> realChain<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> sentRequestMillis <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    realChain<span class="token punctuation">.</span><span class="token function">eventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">requestHeadersStart</span><span class="token punctuation">(</span>realChain<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    httpCodec<span class="token punctuation">.</span><span class="token function">writeRequestHeaders</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    realChain<span class="token punctuation">.</span><span class="token function">eventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">requestHeadersEnd</span><span class="token punctuation">(</span>realChain<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Response<span class="token punctuation">.</span>Builder</span> responseBuilder <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    httpCodec<span class="token punctuation">.</span><span class="token function">finishRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>responseBuilder <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      realChain<span class="token punctuation">.</span><span class="token function">eventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">responseHeadersStart</span><span class="token punctuation">(</span>realChain<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      responseBuilder <span class="token operator">=</span> httpCodec<span class="token punctuation">.</span><span class="token function">readResponseHeaders</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Response</span> response <span class="token operator">=</span> responseBuilder        <span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">handshake</span><span class="token punctuation">(</span>streamAllocation<span class="token punctuation">.</span><span class="token function">connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handshake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">sentRequestAtMillis</span><span class="token punctuation">(</span>sentRequestMillis<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">receivedResponseAtMillis</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> code <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// server sent a 100-continue even though we did not request one.</span>      <span class="token comment">// try again to read the actual response</span>      responseBuilder <span class="token operator">=</span> httpCodec<span class="token punctuation">.</span><span class="token function">readResponseHeaders</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      response <span class="token operator">=</span> responseBuilder              <span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">handshake</span><span class="token punctuation">(</span>streamAllocation<span class="token punctuation">.</span><span class="token function">connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handshake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">sentRequestAtMillis</span><span class="token punctuation">(</span>sentRequestMillis<span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">receivedResponseAtMillis</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      code <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    realChain<span class="token punctuation">.</span><span class="token function">eventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">responseHeadersEnd</span><span class="token punctuation">(</span>realChain<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>forWebSocket <span class="token operator">&amp;&amp;</span> code <span class="token operator">==</span> <span class="token number">101</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Connection is upgrading, but we need to ensure interceptors see a non-null response body.</span>      response <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">Util</span><span class="token punctuation">.</span>EMPTY_RESPONSE<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      response <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>httpCodec<span class="token punctuation">.</span><span class="token function">openResponseBody</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"close"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Connection"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">||</span> <span class="token string">"close"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Connection"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      streamAllocation<span class="token punctuation">.</span><span class="token function">noNewStreams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>code <span class="token operator">==</span> <span class="token number">204</span> <span class="token operator">||</span> code <span class="token operator">==</span> <span class="token number">205</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ProtocolException</span><span class="token punctuation">(</span>          <span class="token string">"HTTP "</span> <span class="token operator">+</span> code <span class="token operator">+</span> <span class="token string">" had non-zero Content-Length: "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> response<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CallServerInterceptor 负责向服务器发起真正的访问请求，并在接收到服务器返回后读取响应返回。</p><h5 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h5><p>整个网络访问的核心步骤，总结起来如下图所示： </p><p><img src="https://img-blog.csdnimg.cn/20210512095342458.png" alt="OkHttp interceptor"></p><h4 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h4><p>OkHttp 的任务队列在内部维护了一个线程池用于执行具体的网络请求。而线程池最大的好处在于通过线程复用减少非核心任务的损耗。</p><h5 id="线程池的优点"><a href="#线程池的优点" class="headerlink" title="线程池的优点"></a>线程池的优点</h5><p>多线程技术主要解决处理器单元内多个线程执行的问题，它可以显著减少处 </p><p>理器单元的闲置时间，增加处理器单元的吞吐能力。但如果对多线程应用不 </p><p>当，会增加对单个任务的处理时间。可以举一个简单的例子： </p><p>假设在一台服务器完成一项任务的时间为 T ，</p><p>T1 创建线程的时间 ；</p><p>T2 在线程中执行任务的时间，包括线程间同步所需时间 ；</p><p>T3 线程销毁的时间 ；</p><p>显然 T ＝ T1＋T2＋T3。注意这是一个极度简化的假设。 </p><p>可以看出 T1、T3 是多线程本身带来的开销（在 Java 中，通过映射 pThead， 并进一步通过SystemCall 实现 native 线程），我们渴望减少 T1、T3 所用的时间，从而减少 T 的时间。但一些线程的使用者并没有注意到这一点，所以在程序中频繁的创建或销毁线程，这导致 T1 和 T3 在 T 中占有相当比例。</p><p>线程池技术正是关注如何缩短或调整 T1，T3 时间的技术，从而提高服务器程序性能的。</p><ul><li>通过对线程进行缓存，减少了创建销毁的时间损失</li><li>通过控制线程数量阀值，减少了当线程过少时带来的 CPU 闲置（比如说长时间卡在I/O 上了）与线程过多时对 JVM 的内存与线程切换时系统调用的压力。</li></ul><p>类似的还有 Socket 连接池、DB 连接池、CommonPool(比如 Jedis)等技术。</p><p>OkHttp 的任务队列主要由两部分组成： </p><ul><li>任务分发器 dispatcher：负责为任务找到合适的执行线程 </li><li>网络请求任务线程池 </li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Dispatcher</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> maxRequests <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> maxRequestsPerHost <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Runnable</span> idleCallback<span class="token punctuation">;</span>  <span class="token comment">/** Executes calls. Created lazily. */</span>  <span class="token keyword">private</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ExecutorService</span> executorService<span class="token punctuation">;</span>  <span class="token comment">/** Ready async calls in the order they'll be run. */</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AsyncCall</span><span class="token punctuation">></span></span> readyAsyncCalls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/** Running asynchronous calls. Includes canceled calls that haven't finished yet. */</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AsyncCall</span><span class="token punctuation">></span></span> runningAsyncCalls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/** Running synchronous calls. Includes canceled calls that haven't finished yet. */</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RealCall</span><span class="token punctuation">></span></span> runningSyncCalls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">Dispatcher</span><span class="token punctuation">(</span><span class="token class-name">ExecutorService</span> executorService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>executorService <span class="token operator">=</span> executorService<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">Dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">ExecutorService</span> <span class="token function">executorService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>executorService <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      executorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>          <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">threadFactory</span><span class="token punctuation">(</span><span class="token string">"OkHttp Dispatcher"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> executorService<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明如下： </p><ul><li>readyAsyncCalls：待执行异步任务队列 </li><li>runningAsyncCalls：运行中异步任务队列 </li><li>runningSyncCalls：运行中同步任务队列 </li><li>executorService：任务队列线程池：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                              <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>                              <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> workQueue<span class="token punctuation">,</span>                              <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> maximumPoolSize<span class="token punctuation">,</span> keepAliveTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> workQueue<span class="token punctuation">,</span>             threadFactory<span class="token punctuation">,</span> defaultHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>int corePoolSize: 最小并发线程数，这里并发同时包括空闲与活动的线 </li></ul><p>程，如果是 0 的话，空闲一段时间后所有线程将全部被销毁 </p><ul><li>int maximumPoolSize: 最大线程数，当任务进来时可以扩充的线程最大值，当大于了这个值就会根据丢弃处理机制来处理 </li><li>long keepAliveTime: 当线程数大于 corePoolSize 时，多余的空闲线程的最大存活时间，类似于 HTTP 中的 Keep-alive </li><li>TimeUnit unit: 时间单位，一般用秒 </li><li>BlockingQueue workQueue: 工作队列，先进先出</li><li>ThreadFactory threadFactory: 单个线程的工厂，可以打 Log，设置 Daemon(即当 JVM 退出时，线程自动结束)等 </li></ul><p>在 OkHttp 中，构建了一个阀值为[0, Integer.MAX_VALUE]的线程池，它不保留任何最小线程数，随时创建更多的线程数，当线程空闲时只能活 60 秒，它使用了一个不存储元素的阻塞工作队列，一个叫做”OkHttp Dispatcher”的线程工厂。 </p><p>也就是说，在实际运行中，当收到 10 个并发请求时，线程池会创建十个线 程，当工作完成后，线程池会在 60s 后相继关闭所有线程。</p><h5 id="Dispatcher-分发器"><a href="#Dispatcher-分发器" class="headerlink" title="Dispatcher 分发器"></a>Dispatcher 分发器</h5><p>dispatcher 分发器类似于 Ngnix 中的反向代理，通过 Dispatcher 将任务分发到合适的空闲线程，实现非阻塞，高可用，高并发连接。</p><p><img src="https://img-blog.csdnimg.cn/20210512104614361.png" alt="dispatcher"></p><h5 id="同步请求"><a href="#同步请求" class="headerlink" title="同步请求"></a>同步请求</h5><p>当我们使用 OkHttp 进行同步请求时，一般构造如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">OkHttpClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Request</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"https://www.wanandroid.com//hotkey/json"</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Response</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      client<span class="token punctuation">.</span><span class="token function">dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Response</span> result <span class="token operator">=</span> <span class="token function">getResponseWithInterceptorChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Canceled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      eventListener<span class="token punctuation">.</span><span class="token function">callFailed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      client<span class="token punctuation">.</span><span class="token function">dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finished</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同步请求的执行逻辑是： </p><ul><li>将对应任务加入分发器 </li><li>执行任务 </li><li>执行完成后通知 dispatcher 对应任务已完成，对应任务出队 </li></ul><h5 id="异步请求"><a href="#异步请求" class="headerlink" title="异步请求"></a>异步请求</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">OkHttpClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Request</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"https://www.wanandroid.com//hotkey/json"</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span><span class="token class-name">Call</span> call<span class="token punctuation">,</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"OkHttp"</span><span class="token punctuation">,</span><span class="token string">"Call Failed:"</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span><span class="token class-name">Call</span> call<span class="token punctuation">,</span><span class="token class-name">Response</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"OkHttp"</span><span class="token punctuation">,</span><span class="token string">"Call succeeded:"</span><span class="token operator">+</span>response<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当 OkHttpClient 的请求入队时，根据代码，我们可以发现实际上是Dispatcher 进行了入队操作。</p><p><code>Dispatcher.java:129</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token class-name">AsyncCall</span> call<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>runningAsyncCalls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> maxRequests <span class="token operator">&amp;&amp;</span> <span class="token function">runningCallsForHost</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span> <span class="token operator">&lt;</span> maxRequestsPerHost<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//添加正在运行的请求</span>      runningAsyncCalls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//线程池执行请求</span>      <span class="token function">executorService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//添加到缓存队列排队等待</span>      readyAsyncCalls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果满足条件：  </p><ul><li>当前请求数小于最大请求数（64）  </li><li>对单一 host 的请求小于阈值（5）</li></ul><p>将该任务插入正在执行任务队列，并执行对应任务。如果不满足则将其放入待执行队列。 </p><p>接下来看看 AsyncCall的execute方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span> <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">boolean</span> signalledCallback <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//执行I/O耗时任务</span>        <span class="token class-name">Response</span> response <span class="token operator">=</span> <span class="token function">getResponseWithInterceptorChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>retryAndFollowUpInterceptor<span class="token punctuation">.</span><span class="token function">isCanceled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          signalledCallback <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token comment">//回调,这里回调是在线程池中</span>          responseCallback<span class="token punctuation">.</span><span class="token function">onFailure</span><span class="token punctuation">(</span><span class="token class-name">RealCall</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Canceled"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          signalledCallback <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token comment">//回调,这里回调是在线程池中</span>          responseCallback<span class="token punctuation">.</span><span class="token function">onResponse</span><span class="token punctuation">(</span><span class="token class-name">RealCall</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>signalledCallback<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// Do not signal the callback twice!</span>          <span class="token class-name">Platform</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>INFO<span class="token punctuation">,</span> <span class="token string">"Callback failure for "</span> <span class="token operator">+</span> <span class="token function">toLoggableString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          eventListener<span class="token punctuation">.</span><span class="token function">callFailed</span><span class="token punctuation">(</span><span class="token class-name">RealCall</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>          responseCallback<span class="token punctuation">.</span><span class="token function">onFailure</span><span class="token punctuation">(</span><span class="token class-name">RealCall</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//通知分发器相关任务 已结束</span>        client<span class="token punctuation">.</span><span class="token function">dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finished</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Dispatcher.java:198</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">finished</span><span class="token punctuation">(</span><span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> calls<span class="token punctuation">,</span> <span class="token class-name">T</span> call<span class="token punctuation">,</span> <span class="token keyword">boolean</span> promoteCalls<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> runningCallsCount<span class="token punctuation">;</span>    <span class="token class-name">Runnable</span> idleCallback<span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>calls<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token string">"Call wasn't in-flight!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>promoteCalls<span class="token punctuation">)</span> <span class="token function">promoteCalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      runningCallsCount <span class="token operator">=</span> <span class="token function">runningCallsCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      idleCallback <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>idleCallback<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>runningCallsCount <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> idleCallback <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      idleCallback<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>空闲出多余线程，调用 promoteCalls 调用待执行的任务</li><li>如果当前整个线程池都空闲下来，执行空闲通知回调线程(idleCallback) </li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">promoteCalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>runningAsyncCalls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> maxRequests<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// Already running max capacity.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>readyAsyncCalls<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// No ready calls to promote.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AsyncCall</span><span class="token punctuation">></span></span> i <span class="token operator">=</span> readyAsyncCalls<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">AsyncCall</span> call <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">runningCallsForHost</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span> <span class="token operator">&lt;</span> maxRequestsPerHost<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        runningAsyncCalls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">executorService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>runningAsyncCalls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> maxRequests<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// Reached max capacity.</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>promoteCalls 的逻辑也很简单：扫描待执行任务队列，将任务放入正在执行任务队列，并执行该任务</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>以上就是整个任务队列的实现细节，总结起来有以下几个特点： </p><ul><li>OkHttp 采用 Dispatcher 技术，类似于 Nginx，与线程池配合实现了高并发，低阻塞的运行 </li><li>Okhttp 采用 Deque 作为缓存，按照入队的顺序先进先出 </li><li>OkHttp 最出彩的地方就是在 try/finally 中调用了 finished 函数，可以主动控制等待队列的移动，而不是采用锁或者 wait/notify，极大减少了编码复杂性</li></ul><h4 id="缓存策略"><a href="#缓存策略" class="headerlink" title="缓存策略"></a>缓存策略</h4><h5 id="HTTP-协议中缓存部分的相关域"><a href="#HTTP-协议中缓存部分的相关域" class="headerlink" title="HTTP 协议中缓存部分的相关域"></a>HTTP 协议中缓存部分的相关域</h5><p>合理地利用本地缓存可以有效地减少网络开销，减少响应延迟。HTTP 报头也定义了很多与缓存有关的域来控制缓存。</p><p>首先来了解下 HTTP 协议中缓存部分的相关域。</p><p><strong>Expires</strong> </p><p>超时时间，一般用在服务器的 response 报头中用于告知客户端对应资源的过期时间。当客户端需要再次请求相同资源时先比较其过期时间，如果尚未超过过期时间则直接返回缓存结果，如果已经超过则重新请求。</p><p><strong>Cache-Control</strong></p><p>相对值，单位时秒，表示当前资源的有效期。Cache-Control 比 Expires 优先级更高：</p><p><strong>Last-Modified-Date</strong></p><p>客户端第一次请求时，服务器返回： </p><blockquote><p>Last-Modified: Tue, 12 Jan 2021 09:31:27 GMT </p></blockquote><p>当客户端二次请求时，可以头部加上如下 header: </p><blockquote><p>If-Modified-Since: Tue, 12 Jan 2021 09:31:27 GMT </p></blockquote><p>如果当前资源没有被二次修改，服务器返回 304 告知客户端直接复用本地缓存。 </p><p><strong>ETag</strong> </p><p>ETag 是对资源文件的一种摘要，可以通过 ETag 值来判断文件是否有修改。当客户端第一次 </p><p>请求某资源时，服务器返回： </p><blockquote><p>ETag: “5694c7ef-24dc” </p></blockquote><p>客户端再次请求时，可在头部加上如下域： </p><blockquote><p>If-None-Match: “5694c7ef-24dc” </p></blockquote><p>如果文件并未改变，则服务器返回 304 告知客户端可以复用本地缓存。 </p><p><strong>no-cache/no-store</strong> </p><p>不使用缓存 </p><p><strong>only-if-cached</strong> </p><p>只使用缓存</p><h5 id="Cache-源码分析"><a href="#Cache-源码分析" class="headerlink" title="Cache 源码分析"></a>Cache 源码分析</h5><p>OkHttp 的缓存工作都是在 CacheInterceptor 中完成的，Cache 部分有如下几个关键类：</p><ul><li>Cache：Cache 管理器，其内部包含一个 DiskLruCache 将 cache 写入文件系统，Cache 内部通过 requestCount、networkCount、hitCount 三个统计指标来优化缓存效率 </li><li>CacheStrategy：缓存策略，其内部维护一个 request 和 response，通过指定 request 和 response 来描述是通过网络还是缓存获取response，或二者同时使用</li><li>CacheStrategy$Factory：缓存策略工厂类根据实际请求返回对应的缓存策略既然实际的缓存工作都是在 CacheInterceptor 中完成的。</li></ul><p>通过上面拦截器的分析CacheInterceptor类的代码可以看出，所有的动作都是以 CacheStrategy 缓存策略为依据做出的，那么来看下缓存策略是如何生成的，相关代码实现在 CacheStrategy$Factory.get()方法中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">CacheStrategy</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">CacheStrategy</span> candidate <span class="token operator">=</span> <span class="token function">getCandidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>candidate<span class="token punctuation">.</span>networkRequest <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span><span class="token function">cacheControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onlyIfCached</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// We're forbidden from using the network and the cache is insufficient.</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CacheStrategy</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> candidate<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">/** Returns a strategy to use assuming the request can use the network. */</span><span class="token keyword">private</span> <span class="token class-name">CacheStrategy</span> <span class="token function">getCandidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// No cached response.(若本地没有缓存，发起网络请求)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheResponse <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CacheStrategy</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// Drop the cached response if it's missing a required handshake.(如果当前请求是 HTTPS，而缓存没有 TLS 握手，重新发起网络请求)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">isHttps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> cacheResponse<span class="token punctuation">.</span><span class="token function">handshake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CacheStrategy</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// If this response shouldn't have been stored, it should never be used</span>      <span class="token comment">// as a response source. This check should be redundant as long as the</span>      <span class="token comment">// persistence store is well-behaved and the rules are constant.</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isCacheable</span><span class="token punctuation">(</span>cacheResponse<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CacheStrategy</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token comment">//如果当前的缓存策略是不缓存或者是 conditional get，发起网络请求</span>      <span class="token class-name">CacheControl</span> requestCaching <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">cacheControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>requestCaching<span class="token punctuation">.</span><span class="token function">noCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">hasConditions</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CacheStrategy</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token class-name">CacheControl</span> responseCaching <span class="token operator">=</span> cacheResponse<span class="token punctuation">.</span><span class="token function">cacheControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>responseCaching<span class="token punctuation">.</span><span class="token function">immutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CacheStrategy</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> cacheResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token comment">//缓存 age</span>      <span class="token keyword">long</span> ageMillis <span class="token operator">=</span> <span class="token function">cacheResponseAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">long</span> freshMillis <span class="token operator">=</span> <span class="token function">computeFreshnessLifetime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>requestCaching<span class="token punctuation">.</span><span class="token function">maxAgeSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        freshMillis <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>freshMillis<span class="token punctuation">,</span> SECONDS<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>requestCaching<span class="token punctuation">.</span><span class="token function">maxAgeSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">long</span> minFreshMillis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>requestCaching<span class="token punctuation">.</span><span class="token function">minFreshSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        minFreshMillis <span class="token operator">=</span> SECONDS<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>requestCaching<span class="token punctuation">.</span><span class="token function">minFreshSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">long</span> maxStaleMillis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>responseCaching<span class="token punctuation">.</span><span class="token function">mustRevalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> requestCaching<span class="token punctuation">.</span><span class="token function">maxStaleSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        maxStaleMillis <span class="token operator">=</span> SECONDS<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>requestCaching<span class="token punctuation">.</span><span class="token function">maxStaleSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>responseCaching<span class="token punctuation">.</span><span class="token function">noCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ageMillis <span class="token operator">+</span> minFreshMillis <span class="token operator">&lt;</span> freshMillis <span class="token operator">+</span> maxStaleMillis<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Response<span class="token punctuation">.</span>Builder</span> builder <span class="token operator">=</span> cacheResponse<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//虽然缓存过期了，但是缓存还可以使用，则在头部添加 110 警告码</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ageMillis <span class="token operator">+</span> minFreshMillis <span class="token operator">>=</span> freshMillis<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          builder<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Warning"</span><span class="token punctuation">,</span> <span class="token string">"110 HttpURLConnection \"Response is stale\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span> oneDayMillis <span class="token operator">=</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000L</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ageMillis <span class="token operator">></span> oneDayMillis <span class="token operator">&amp;&amp;</span> <span class="token function">isFreshnessLifetimeHeuristic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          builder<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Warning"</span><span class="token punctuation">,</span> <span class="token string">"113 HttpURLConnection \"Heuristic expiration\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CacheStrategy</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// Find a condition to add to the request. If the condition is satisfied, the response body</span>      <span class="token comment">// will not be transmitted.</span>      <span class="token class-name">String</span> conditionName<span class="token punctuation">;</span>      <span class="token class-name">String</span> conditionValue<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>etag <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        conditionName <span class="token operator">=</span> <span class="token string">"If-None-Match"</span><span class="token punctuation">;</span>        conditionValue <span class="token operator">=</span> etag<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lastModified <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        conditionName <span class="token operator">=</span> <span class="token string">"If-Modified-Since"</span><span class="token punctuation">;</span>        conditionValue <span class="token operator">=</span> lastModifiedString<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>servedDate <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        conditionName <span class="token operator">=</span> <span class="token string">"If-Modified-Since"</span><span class="token punctuation">;</span>        conditionValue <span class="token operator">=</span> servedDateString<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CacheStrategy</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// No condition! Make a regular request.</span>      <span class="token punctuation">&#125;</span>      <span class="token class-name">Headers<span class="token punctuation">.</span>Builder</span> conditionalRequestHeaders <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Internal</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">addLenient</span><span class="token punctuation">(</span>conditionalRequestHeaders<span class="token punctuation">,</span> conditionName<span class="token punctuation">,</span> conditionValue<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Request</span> conditionalRequest <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>conditionalRequestHeaders<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CacheStrategy</span><span class="token punctuation">(</span>conditionalRequest<span class="token punctuation">,</span> cacheResponse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到其核心逻辑在 getCandidate 函数中。基本就是 HTTP 缓存协议的实现。</p><h5 id="DiskLruCache"><a href="#DiskLruCache" class="headerlink" title="DiskLruCache"></a>DiskLruCache</h5><p>Cache 内部通过 DiskLruCache 管理 cache 在文件系统层面的创建，读取，清理等等工作， </p><p>接下来看下 DiskLruCache 的主要逻辑：</p><p><strong>journalFile</strong></p><p>DiskLruCache 内部日志文件，对 cache 的每一次读写都对应一条日志记录，DiskLruCache </p><p>通过分析日志分析和创建 cache。日志文件格式如下：</p><pre class="line-numbers language-none"><code class="language-none">libcore.io.DiskLruCache 1100 2CLEAN 3400330d1dfc7f3f7f4b8d4d803dfcf6 832 21054DIRTY 335c4c6028171cfddfbaae1a9c313c52 CLEAN 335c4c6028171cfddfbaae1a9c313c52 3934 2342 REMOVE 335c4c6028171cfddfbaae1a9c313c52 DIRTY 1ab96a171faeeee38496d8b330771a7a CLEAN 1ab96a171faeeee38496d8b330771a7a 1600 234 READ 335c4c6028171cfddfbaae1a9c313c52 READ 3400330d1dfc7f3f7f4b8d4d803dfcf6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前 5 行固定不变，分别为：常量libcore.io.DiskLruCache、diskCache 版本、应用程序版本、valueCount(后文介绍)、空行 </p><p>接下来每一行对应一个 cache entry 的一次状态记录，其格式为：[状态（DIRTY,CLEAN,READ,REMOVE），key，状态相关 value(可选)]: </p><p>- DIRTY:表明一个 cache entry 正在被创建或更新，每一个成功的 DIRTY 记录都应该对应一个 CLEAN 或 REMOVE 操作。如果一个 DIRTY 缺少预期匹配的 CLEAN/REMOVE，则对应 entry 操作失败，需要将其从 lruEntries 中删除 </p><p>- CLEAN:说明 cache 已经被成功操作，当前可以被正常读取。每一个 CLEAN 行还需要记 录其每一个 value 的长度 </p><p>- READ: 记录一次 cache 读取操作 </p><p>- REMOVE:记录一次 cache 清除</p><p>日志文件的应用场景主要有四个： </p><ul><li>DiskCacheLru 初始化时通过读取日志文件创建 cache 容器lruEntries。同时通过日志过滤操作不成功的 cache 项。相关逻辑在 DiskLruCache.readJournalLine, DiskLruCache.processJournal </li><li>初始化完成后，为避免日志文件不断膨胀，对日志进行重建精简，具体逻辑在 DiskLruCache.rebuildJournal </li><li>每当有 cache 操作时将其记录入日志文件中以备下次初始化时使用 </li><li>当冗余日志过多时，通过调用 cleanUpRunnable 线程重建日志</li></ul><p><strong>DiskLruCache.Entry</strong> </p><p>每一个 DiskLruCache.Entry 对应一个 cache 记录：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">;</span>    <span class="token comment">/** Lengths of this entry's files. */</span>    <span class="token keyword">final</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lengths<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cleanFiles<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dirtyFiles<span class="token punctuation">;</span>    <span class="token comment">/** True if this entry has ever been published. */</span>    <span class="token keyword">boolean</span> readable<span class="token punctuation">;</span>    <span class="token comment">/** The ongoing edit or null if this entry is not being edited. */</span>    <span class="token class-name">Editor</span> currentEditor<span class="token punctuation">;</span>    <span class="token comment">/** The sequence number of the most recently committed edit to this entry. */</span>    <span class="token keyword">long</span> sequenceNumber<span class="token punctuation">;</span>    <span class="token class-name">Entry</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>      lengths <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span>valueCount<span class="token punctuation">]</span><span class="token punctuation">;</span>      cleanFiles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">[</span>valueCount<span class="token punctuation">]</span><span class="token punctuation">;</span>      dirtyFiles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">[</span>valueCount<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// The names are repetitive so re-use the same builder to avoid allocations.</span>      <span class="token class-name">StringBuilder</span> fileBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> truncateTo <span class="token operator">=</span> fileBuilder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> valueCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fileBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        cleanFiles<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>directory<span class="token punctuation">,</span> fileBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">".tmp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dirtyFiles<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>directory<span class="token punctuation">,</span> fileBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileBuilder<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span>truncateTo<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** Set lengths using decimal numbers like "10123". */</span>    <span class="token keyword">void</span> <span class="token function">setLengths</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>strings<span class="token punctuation">.</span>length <span class="token operator">!=</span> valueCount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token function">invalidLengths</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strings<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          lengths<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>strings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token function">invalidLengths</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** Append space-prefixed lengths to &#123;@code writer&#125;. */</span>    <span class="token keyword">void</span> <span class="token function">writeLengths</span><span class="token punctuation">(</span><span class="token class-name">BufferedSink</span> writer<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> length <span class="token operator">:</span> lengths<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        writer<span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeDecimalLong</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">IOException</span> <span class="token function">invalidLengths</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"unexpected journal line: "</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns a snapshot of this entry. This opens all streams eagerly to guarantee that we see a     * single published snapshot. If we opened streams lazily then the streams could come from     * different edits.     */</span>    <span class="token class-name">Snapshot</span> <span class="token function">snapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">holdsLock</span><span class="token punctuation">(</span><span class="token class-name">DiskLruCache</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Source</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Source</span><span class="token punctuation">[</span>valueCount<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lengths <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lengths<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Defensive copy since these can be zeroed out.</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> valueCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          sources<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> fileSystem<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>cleanFiles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Snapshot</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> sequenceNumber<span class="token punctuation">,</span> sources<span class="token punctuation">,</span> lengths<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// A file must have been deleted manually!</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> valueCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>sources<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">closeQuietly</span><span class="token punctuation">(</span>sources<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Since the entry is no longer valid, remove it so the metadata is accurate (i.e. the cache</span>        <span class="token comment">// size.)</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>          <span class="token function">removeEntry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个 Entry 主要由以下几部分构成： </p><ul><li>key：每个 cache 都有一个 key 作为其标识符。当前 cache 的 key 为其对应 URL 的MD5 字符串 </li><li>cleanFiles/dirtyFiles：每一个 Entry 对应多个文件，其对应的文件数由 DiskLruCache.valueCount 指定。当前在 OkHttp 中 valueCount 为 2。即每个 cache 对应 2 个 cleanFiles，2 个 dirtyFiles。其中第一个 cleanFiles/dirtyFiles 记录 cache 的 meta 数据（如 URL,创建时间，SSL 握手记录等等），第二个文件记录 cache 的真正内容。cleanFiles 记录处于稳定状态的 cache 结果，dirtyFiles 记录处于创建或更新状态的 cache </li><li>currentEditor：entry 编辑器，对 entry 的所有操作都是通过其编辑器完成。编辑器内部添加了同步锁</li></ul><p><strong>cleanupRunnable</strong></p><p>清理线程，用于重建精简日志：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Runnable</span> cleanupRunnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">DiskLruCache</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>initialized <span class="token operator">|</span> closed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// Nothing to do</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>          <span class="token function">trimToSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          mostRecentTrimFailed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">journalRebuildRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">rebuildJournal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            redundantOpCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          mostRecentRebuildFailed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          journalWriter <span class="token operator">=</span> <span class="token class-name">Okio</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token class-name">Okio</span><span class="token punctuation">.</span><span class="token function">blackhole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其触发条件在 journalRebuildRequired()方法中：当冗余日志超过日志文件本身的一般且总条数超过 2000 时执行 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">journalRebuildRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> redundantOpCompactThreshold <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> redundantOpCount <span class="token operator">>=</span> redundantOpCompactThreshold        <span class="token operator">&amp;&amp;</span> redundantOpCount <span class="token operator">>=</span> lruEntries<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>SnapShot</strong></p><p>cache 快照，记录了特定 cache 在某一个特定时刻的内容。每次向 DiskLruCache 请求时返回的都是目标 cache 的一个快照,相关逻辑在 DiskLruCache.get 中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">Snapshot</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">checkNotClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">validateKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Entry</span> entry <span class="token operator">=</span> lruEntries<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>entry<span class="token punctuation">.</span>readable<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Snapshot</span> snapshot <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">snapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>snapshot <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    redundantOpCount<span class="token operator">++</span><span class="token punctuation">;</span>    journalWriter<span class="token punctuation">.</span><span class="token function">writeUtf8</span><span class="token punctuation">(</span>READ<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeUtf8</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">journalRebuildRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>cleanupRunnable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> snapshot<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>lruEntries</strong> </p><p>管理 cache entry 的容器，其数据结构是 LinkedHashMap。通过 LinkedHashMap 本身的实现逻辑达到 cache 的 LRU 替换 </p><p><strong>FileSystem</strong> </p><p>使用 Okio 对 File 的封装，简化了 I/O 操作。 </p><p><strong>DiskLruCache.edit</strong> </p><p>DiskLruCache 可以看成是 Cache 在文件系统层的具体实现，所以其基本操作接口存在一一 对应的关系： </p><ul><li>Cache.get() —&gt;DiskLruCache.get() </li><li>Cache.put()—&gt;DiskLruCache.edit() //cache 插入 </li><li>Cache.remove()—&gt;DiskLruCache.remove() </li><li>Cache.update()—&gt;DiskLruCache.edit()//cache 更新 </li></ul><p>Cache.put方法:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">CacheRequest</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Response</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> requestMethod <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token function">invalidatesCache</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token function">remove</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// The cache cannot be written.</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>requestMethod<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Don't cache non-GET responses. We're technically allowed to cache</span>      <span class="token comment">// HEAD requests and some POST requests, but the complexity of doing</span>      <span class="token comment">// so is high and the benefit is low.</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token function">hasVaryAll</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Entry</span> entry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">DiskLruCache<span class="token punctuation">.</span>Editor</span> editor <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      editor <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token function">key</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>editor <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      entry<span class="token punctuation">.</span><span class="token function">writeTo</span><span class="token punctuation">(</span>editor<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CacheRequestImpl</span><span class="token punctuation">(</span>editor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">abortQuietly</span><span class="token punctuation">(</span>editor<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到核心逻辑在 editor = cache.edit(key(response.request().url()));,相关代码在 DiskLruCache.edit:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token class-name">Editor</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> expectedSequenceNumber<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">checkNotClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">validateKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Entry</span> entry <span class="token operator">=</span> lruEntries<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>expectedSequenceNumber <span class="token operator">!=</span> ANY_SEQUENCE_NUMBER <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>entry <span class="token operator">==</span> <span class="token keyword">null</span>        <span class="token operator">||</span> entry<span class="token punctuation">.</span>sequenceNumber <span class="token operator">!=</span> expectedSequenceNumber<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// Snapshot is stale.</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> entry<span class="token punctuation">.</span>currentEditor <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// Another edit is in progress.</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mostRecentTrimFailed <span class="token operator">||</span> mostRecentRebuildFailed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// The OS has become our enemy! If the trim job failed, it means we are storing more data than</span>      <span class="token comment">// requested by the user. Do not allow edits so we do not go over that limit any further. If</span>      <span class="token comment">// the journal rebuild failed, the journal writer will not be active, meaning we will not be</span>      <span class="token comment">// able to record the edit, causing file leaks. In both cases, we want to retry the clean up</span>      <span class="token comment">// so we can get out of this state!</span>      executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>cleanupRunnable<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Flush the journal before creating files to prevent file leaks.</span>    journalWriter<span class="token punctuation">.</span><span class="token function">writeUtf8</span><span class="token punctuation">(</span>DIRTY<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeUtf8</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    journalWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasJournalErrors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// Don't edit; the journal can't be written.</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      entry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      lruEntries<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Editor</span> editor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Editor</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>    entry<span class="token punctuation">.</span>currentEditor <span class="token operator">=</span> editor<span class="token punctuation">;</span>    <span class="token keyword">return</span> editor<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>edit 方法返回对应 CacheEntry 的 editor 编辑器。</p><p><strong>总结</strong> </p><p>总结起来 DiskLruCache 主要有以下几个特点： </p><ul><li>通过 LinkedHashMap 实现 LRU 替换 </li><li>通过本地维护 Cache 操作日志保证 Cache 原子性与可用性，同时为防止日志过分膨胀定时执行日志精简 </li><li>每一个 Cache 项对应两个状态副本：DIRTY,CLEAN。CLEAN 表示当前可用状态 Cache，外部访问到的 cache 快照均为 CLEAN 状态；DIRTY 为更新态 Cache。由于更新和创建都只操作 DIRTY 状态副本，实现了 Cache 的读写分离 </li><li>每一个 Cache 项有四个文件，两个状态（DIRTY,CLEAN）,每个状态对应两个文件：一个文件存储 Cache meta 数据，一个文件存储 Cache 内容数据</li></ul><h4 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h4><p>通过维护连接池，最大限度重用现有连接，减少网络连接的创建开销，以此提升网络请求效率。</p><h5 id="keep-alive-机制"><a href="#keep-alive-机制" class="headerlink" title="keep-alive 机制"></a>keep-alive 机制</h5><p>在 HTTP1.0 中 HTTP 的请求流程如下： </p><p><img src="https://img-blog.csdnimg.cn/20210512154755112.png" alt="http1"></p><p>这种方法的好处是简单，各个请求互不干扰。但在复杂的网络请求场景下这种方式几乎不可用。例如：浏览器加载一个 HTML 网页，HTML 中可能需要加载数十个资源，典型场景下这些资源中大部分来自同一个站点。按照 HTTP1.0 的做法，这需要建立数十个 TCP 连接，每个连接负责一个资源请求。创建一个 TCP 连接需要 3 次握手，而释放连接则需要 2 次或 4 次握手。重复的创建和释放连接极大地影响了网络效率，同时也增加了系统开销。为了有效地解决这一问题，HTTP/1.1 提出了 Keep-Alive 机制：当一个 HTTP 请求的数据传 输结束后，TCP 连接不立即释放，如果此时有新的 HTTP 请求，且其请求的 Host 通上次请求相同，则可以直接复用为释放的 TCP 连接，从而省去了 TCP 的释放和再次创建的开销，减少了网络延时: </p><p><img src="https://img-blog.csdnimg.cn/2021051215475552.png"></p><p>在现代浏览器中，一般同时开启 6～8 个 keepalive connections 的 socket 连接，并保持一 定的链路生命，当不需要时再关闭；而在服务器中，一般是由软件根据负载情况(比如 FD 最 </p><p>大值、Socket 内存、超时时间、栈内存、栈数量等)决定是否主动关闭。</p><h5 id="HTTP-2"><a href="#HTTP-2" class="headerlink" title="HTTP/2"></a>HTTP/2</h5><p>在 HTTP/1.x 中，如果客户端想发起多个并行请求必须建立多个 TCP 连接，这无疑增大了网络开销。另外 HTTP/1.x 不会压缩请求和响应报头，导致了不必要的网络流量；HTTP/1.x 不支持资源优先级导致底层 TCP 连接利用率低下。而这些问题都是 HTTP/2 要着力解决的。简单来说 HTTP/2 主要解决了以下问题： </p><ul><li>报头压缩：HTTP/2 使用 HPACK 压缩格式压缩请求和响应报头数据，减少不必要流量开销 </li><li>请求与响应复用：HTTP/2 通过引入新的二进制分帧层实现了完整的请求和响应复用，客户端和服务器可以将 HTTP 消息分解为互不依赖的帧，然后交错发送，最后再在另一端将其重新组装 </li><li>指定数据流优先级：将 HTTP 消息分解为很多独立的帧之后，我们就可以复用多个数据流中的帧，客户端和服务器交错发送和传输这些帧的顺序就成为关键的性能决定因素。为了做到这一点，HTTP/2 标准允许每个数据流都有一个关联的权重和依赖关系 </li><li>流控制：HTTP/2 提供了一组简单的构建块，这些构建块允许客户端和服务器实现其自己的数据流和连接级流控制 </li></ul><p>HTTP/2 所有性能增强的核心在于新的二进制分帧层，它定义了如何封装 HTTP 消息并在客户端与服务器之间进行传输: </p><p><img src="https://img-blog.csdnimg.cn/20210512155212866.png"></p><p>同时 HTTP/2 引入了三个新的概念： </p><ul><li>数据流：基于 TCP 连接之上的逻辑双向字节流，对应一个请求及其响应。客户端每发起一个请求就建立一个数据流，后续该请求及其响应的所有数据都通过该数据流传输 </li><li>消息：一个请求或响应对应的一系列数据帧</li><li>帧：HTTP/2 的最小数据切片单位 </li></ul><p>上述概念之间的逻辑关系： </p><ul><li>所有通信都在一个 TCP 连接上完成，此连接可以承载任意数量的双向数据流 </li><li>每个数据流都有一个唯一的标识符和可选的优先级信息，用于承载双向消息 </li><li>每条消息都是一条逻辑 HTTP 消息（例如请求或响应），包含一个或多个帧 </li><li>帧是最小的通信单位，承载着特定类型的数据，例如 HTTP 标头、消息负载，等等。 来自不同数据流的帧可以交错发送，然后再根据每个帧头的数据流标识符重新组装 </li><li>每个 HTTP 消息被分解为多个独立的帧后可以交错发送，从而在宏观上实现了多个请求或响应并行传输的效果。这类似于多进程环境下的时间分片机制</li></ul><p><img src="https://img-blog.csdnimg.cn/20210512155522106.png"></p><p>无论是 HTTP/1.1 的 Keep-Alive 机制还是 HTTP/2 的多路复用机制，在实现上都需要引入连接池来维护网络连接。接下来看下 OkHttp 中的连接池实现。 </p><h5 id="ConnectionPool"><a href="#ConnectionPool" class="headerlink" title="ConnectionPool"></a>ConnectionPool</h5><p>OkHttp 内部通过 ConnectionPool 来管理连接池，首先来看下 ConnectionPool 的主要成员：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ConnectionPool</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**   * Background threads are used to cleanup expired connections. There will be at most a single   * thread running per connection pool. The thread pool executor permits the pool itself to be   * garbage collected.   */</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Executor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token comment">/* corePoolSize */</span><span class="token punctuation">,</span>      <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE <span class="token comment">/* maximumPoolSize */</span><span class="token punctuation">,</span> <span class="token number">60L</span> <span class="token comment">/* keepAliveTime */</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">threadFactory</span><span class="token punctuation">(</span><span class="token string">"OkHttp ConnectionPool"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/** The maximum number of idle connections for each address. */</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> maxIdleConnections<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> keepAliveDurationNs<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Runnable</span> cleanupRunnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment">//返回符合要求的可重用连接，如果没有返回 null</span>  <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">RealConnection</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Address</span> address<span class="token punctuation">,</span> <span class="token class-name">StreamAllocation</span> streamAllocation<span class="token punctuation">,</span> <span class="token class-name">Route</span> route<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">assert</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">holdsLock</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">RealConnection</span> connection <span class="token operator">:</span> connections<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">isEligible</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        streamAllocation<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> connection<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//去除重复连接。主要针对多路复用场景下一个 address 只需要一个连接</span>  <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Socket</span> <span class="token function">deduplicate</span><span class="token punctuation">(</span><span class="token class-name">Address</span> address<span class="token punctuation">,</span> <span class="token class-name">StreamAllocation</span> streamAllocation<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">assert</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">holdsLock</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">RealConnection</span> connection <span class="token operator">:</span> connections<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">isEligible</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>          <span class="token operator">&amp;&amp;</span> connection<span class="token punctuation">.</span><span class="token function">isMultiplexed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token operator">&amp;&amp;</span> connection <span class="token operator">!=</span> streamAllocation<span class="token punctuation">.</span><span class="token function">connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> streamAllocation<span class="token punctuation">.</span><span class="token function">releaseAndAcquire</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//将连接加入连接池</span>  <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">RealConnection</span> connection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">assert</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">holdsLock</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cleanupRunning<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      cleanupRunning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>cleanupRunnable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    connections<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//当有连接空闲时唤起 cleanup 线程清洗连接池</span>  <span class="token keyword">boolean</span> <span class="token function">connectionBecameIdle</span><span class="token punctuation">(</span><span class="token class-name">RealConnection</span> connection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">assert</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">holdsLock</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>connection<span class="token punctuation">.</span>noNewStreams <span class="token operator">||</span> maxIdleConnections <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      connections<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Awake the cleanup thread: we may have exceeded the idle connection limit.</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment">//扫描连接池，清除空闲连接</span>  <span class="token keyword">long</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token keyword">long</span> now<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相关概念： </p><ul><li>Call：对 Http 请求的封装 </li><li>Connection/RealConnection:物理连接的封装，其内部有 List&lt;WeakReference<StreamAllocation>&gt;的引用计数 </StreamAllocation></li><li>StreamAllocation: okhttp 中引入了 StreamAllocation 负责管理一个连接上的流，同时在 connection 中也通过一个 StreamAllocation 的引用的列表来管理一个连接的流，从而使得连接与流之间解耦。</li><li>connections: Deque 双端队列，用于维护连接的容器</li><li>routeDatabase:用来记录连接失败的 Route 的黑名单，当连接失败的时候就会把失败的线路加进去 </li></ul><p><strong>实例化</strong> </p><p>首先来看下 ConnectionPool 的实例化过程，一个 OkHttpClient 只包含一个 ConnectionPool，其实例化过程也在 OkHttpClient 的实例化过程中实现，值得一提的是 ConnectionPool 各个方法的调用并没有直接对外暴露，而是通过 OkHttpClient 的 Internal 接口统一对外暴露：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OkHttpClient</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name">Call<span class="token punctuation">.</span>Factory</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Protocol</span><span class="token punctuation">></span></span> DEFAULT_PROTOCOLS <span class="token operator">=</span> <span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">immutableList</span><span class="token punctuation">(</span>      <span class="token class-name">Protocol</span><span class="token punctuation">.</span>HTTP_2<span class="token punctuation">,</span> <span class="token class-name">Protocol</span><span class="token punctuation">.</span>SPDY_3<span class="token punctuation">,</span> <span class="token class-name">Protocol</span><span class="token punctuation">.</span>HTTP_1_1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConnectionSpec</span><span class="token punctuation">></span></span> DEFAULT_CONNECTION_SPECS <span class="token operator">=</span> <span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">immutableList</span><span class="token punctuation">(</span>      <span class="token class-name">ConnectionSpec</span><span class="token punctuation">.</span>MODERN_TLS<span class="token punctuation">,</span> <span class="token class-name">ConnectionSpec</span><span class="token punctuation">.</span>COMPATIBLE_TLS<span class="token punctuation">,</span> <span class="token class-name">ConnectionSpec</span><span class="token punctuation">.</span>CLEARTEXT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Internal</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Internal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addLenient</span><span class="token punctuation">(</span><span class="token class-name">Headers<span class="token punctuation">.</span>Builder</span> builder<span class="token punctuation">,</span> <span class="token class-name">String</span> line<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        builder<span class="token punctuation">.</span><span class="token function">addLenient</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addLenient</span><span class="token punctuation">(</span><span class="token class-name">Headers<span class="token punctuation">.</span>Builder</span> builder<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        builder<span class="token punctuation">.</span><span class="token function">addLenient</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCache</span><span class="token punctuation">(</span><span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span> builder<span class="token punctuation">,</span> <span class="token class-name">InternalCache</span> internalCache<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        builder<span class="token punctuation">.</span><span class="token function">setInternalCache</span><span class="token punctuation">(</span>internalCache<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">InternalCache</span> <span class="token function">internalCache</span><span class="token punctuation">(</span><span class="token class-name">OkHttpClient</span> client<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">internalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">connectionBecameIdle</span><span class="token punctuation">(</span>          <span class="token class-name">ConnectionPool</span> pool<span class="token punctuation">,</span> <span class="token class-name">RealConnection</span> connection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> pool<span class="token punctuation">.</span><span class="token function">connectionBecameIdle</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">RealConnection</span> <span class="token function">get</span><span class="token punctuation">(</span>          <span class="token class-name">ConnectionPool</span> pool<span class="token punctuation">,</span> <span class="token class-name">Address</span> address<span class="token punctuation">,</span> <span class="token class-name">StreamAllocation</span> streamAllocation<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> streamAllocation<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConnectionPool</span> pool<span class="token punctuation">,</span> <span class="token class-name">RealConnection</span> connection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pool<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">RouteDatabase</span> <span class="token function">routeDatabase</span><span class="token punctuation">(</span><span class="token class-name">ConnectionPool</span> connectionPool<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> connectionPool<span class="token punctuation">.</span>routeDatabase<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callEnqueue</span><span class="token punctuation">(</span><span class="token class-name">Call</span> call<span class="token punctuation">,</span> <span class="token class-name">Callback</span> responseCallback<span class="token punctuation">,</span> <span class="token keyword">boolean</span> forWebSocket<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">RealCall</span><span class="token punctuation">)</span> call<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>responseCallback<span class="token punctuation">,</span> forWebSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">StreamAllocation</span> <span class="token function">callEngineGetStreamAllocation</span><span class="token punctuation">(</span><span class="token class-name">Call</span> call<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">RealCall</span><span class="token punctuation">)</span> call<span class="token punctuation">)</span><span class="token punctuation">.</span>engine<span class="token punctuation">.</span>streamAllocation<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">ConnectionSpec</span> tlsConfiguration<span class="token punctuation">,</span> <span class="token class-name">SSLSocket</span> sslSocket<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isFallback<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        tlsConfiguration<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>sslSocket<span class="token punctuation">,</span> isFallback<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">HttpUrl</span> <span class="token function">getHttpUrlChecked</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span>          <span class="token keyword">throws</span> <span class="token class-name">MalformedURLException</span><span class="token punctuation">,</span> <span class="token class-name">UnknownHostException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">HttpUrl</span><span class="token punctuation">.</span><span class="token function">getChecked</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Internal 的唯一实现在 OkHttpClient 中，OkHttpClient 通过这种方式暴露其 API 给外部类使用。</p><p>ConnectionPool 内部通过一个双端队列(dequeue)来维护当前所有连接，主要涉及到的操作 </p><p>包括： </p><ul><li>put：放入新连接 </li><li>get：从连接池中获取连接 </li><li>evictAll：关闭所有连接</li><li>connectionBecameIdle：连接变空闲后调用清理线程 </li><li>deduplicate：清除重复的多路复用线程</li></ul><p><strong>StreamAllocation.findConnection</strong> </p><p>get 是 ConnectionPool 中最为重要的方法，StreamAllocation 在其 findConnection 方法内 </p><p>部通过调用 get 方法为其找到 stream 找到合适的连接，如果没有则新建一个连接。首先来看下 findConnection 的逻辑：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">RealConnection</span> <span class="token function">findConnection</span><span class="token punctuation">(</span><span class="token keyword">int</span> connectTimeout<span class="token punctuation">,</span> <span class="token keyword">int</span> readTimeout<span class="token punctuation">,</span> <span class="token keyword">int</span> writeTimeout<span class="token punctuation">,</span>      <span class="token keyword">int</span> pingIntervalMillis<span class="token punctuation">,</span> <span class="token keyword">boolean</span> connectionRetryEnabled<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> foundPooledConnection <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token class-name">RealConnection</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Route</span> selectedRoute <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Connection</span> releasedConnection<span class="token punctuation">;</span>    <span class="token class-name">Socket</span> toClose<span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>connectionPool<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>released<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"released"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>codec <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"codec != null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>canceled<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Canceled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Attempt to use an already-allocated connection. We need to be careful here because our</span>      <span class="token comment">// already-allocated connection may have been restricted from creating new streams.</span>      releasedConnection <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>connection<span class="token punctuation">;</span>      toClose <span class="token operator">=</span> <span class="token function">releaseIfNoNewStreams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// We had an already-allocated connection and it's good.</span>        result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>connection<span class="token punctuation">;</span>        releasedConnection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>reportedAcquired<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// If the connection was never reported acquired, don't report it as released!</span>        releasedConnection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Attempt to get a connection from the pool.</span>        <span class="token class-name">Internal</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>connectionPool<span class="token punctuation">,</span> address<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          foundPooledConnection <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          result <span class="token operator">=</span> connection<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          selectedRoute <span class="token operator">=</span> route<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">closeQuietly</span><span class="token punctuation">(</span>toClose<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>releasedConnection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      eventListener<span class="token punctuation">.</span><span class="token function">connectionReleased</span><span class="token punctuation">(</span>call<span class="token punctuation">,</span> releasedConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>foundPooledConnection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      eventListener<span class="token punctuation">.</span><span class="token function">connectionAcquired</span><span class="token punctuation">(</span>call<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// If we found an already-allocated or pooled connection, we're done.</span>      <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// If we need a route selection, make one. This is a blocking operation.</span>    <span class="token keyword">boolean</span> newRouteSelection <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>selectedRoute <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>routeSelection <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>routeSelection<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      newRouteSelection <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      routeSelection <span class="token operator">=</span> routeSelector<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>connectionPool<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>canceled<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Canceled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>newRouteSelection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Now that we have a set of IP addresses, make another attempt at getting a connection from</span>        <span class="token comment">// the pool. This could match due to connection coalescing.</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span><span class="token punctuation">></span></span> routes <span class="token operator">=</span> routeSelection<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> size <span class="token operator">=</span> routes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">Route</span> route <span class="token operator">=</span> routes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Internal</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>connectionPool<span class="token punctuation">,</span> address<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            foundPooledConnection <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> connection<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>route <span class="token operator">=</span> route<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>foundPooledConnection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>selectedRoute <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          selectedRoute <span class="token operator">=</span> routeSelection<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Create a connection and assign it to this allocation immediately. This makes it possible</span>        <span class="token comment">// for an asynchronous cancel() to interrupt the handshake we're about to do.</span>        route <span class="token operator">=</span> selectedRoute<span class="token punctuation">;</span>        refusedStreamCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealConnection</span><span class="token punctuation">(</span>connectionPool<span class="token punctuation">,</span> selectedRoute<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">acquire</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// If we found a pooled connection on the 2nd time around, we're done.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>foundPooledConnection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      eventListener<span class="token punctuation">.</span><span class="token function">connectionAcquired</span><span class="token punctuation">(</span>call<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Do TCP + TLS handshakes. This is a blocking operation.</span>    result<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>connectTimeout<span class="token punctuation">,</span> readTimeout<span class="token punctuation">,</span> writeTimeout<span class="token punctuation">,</span> pingIntervalMillis<span class="token punctuation">,</span>        connectionRetryEnabled<span class="token punctuation">,</span> call<span class="token punctuation">,</span> eventListener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">routeDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">connected</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>connectionPool<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      reportedAcquired <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token comment">// Pool the connection.</span>      <span class="token class-name">Internal</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>connectionPool<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// If another multiplexed connection to the same address was created concurrently, then</span>      <span class="token comment">// release this connection and acquire that one.</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">isMultiplexed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        socket <span class="token operator">=</span> <span class="token class-name">Internal</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">deduplicate</span><span class="token punctuation">(</span>connectionPool<span class="token punctuation">,</span> address<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> connection<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">closeQuietly</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>    eventListener<span class="token punctuation">.</span><span class="token function">connectionAcquired</span><span class="token punctuation">(</span>call<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其主要逻辑大致分为以下几个步骤： </p><ul><li>查看当前 streamAllocation 是否有之前已经分配过的连接，有则直接使用 </li><li>从连接池中查找可复用的连接，有则返回该连接</li><li>配置路由，配置后再次从连接池中查找是否有可复用连接，有则直接返回 </li><li>新建一个连接，并修改其 StreamAllocation 标记计数，将其放入连接池中 </li><li>查看连接池是否有重复的多路复用连接，有则清除 </li></ul><p><strong>ConnectionPool.get</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RealConnection</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Address</span> address<span class="token punctuation">,</span> <span class="token class-name">StreamAllocation</span> streamAllocation<span class="token punctuation">,</span> <span class="token class-name">Route</span> route<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">assert</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">holdsLock</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">RealConnection</span> connection <span class="token operator">:</span> connections<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">isEligible</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        streamAllocation<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> connection<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其逻辑比较简单，遍历当前连接池，如果有符合条件的连接则修改器标记计数，然后返回。 </p><p>这里的关键逻辑在 RealConnection.isEligible 方法： </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEligible</span><span class="token punctuation">(</span><span class="token class-name">Address</span> address<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Route</span> route<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// If this connection is not accepting new streams, we're done.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>allocations<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> allocationLimit <span class="token operator">||</span> noNewStreams<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// If the non-host fields of the address don't overlap, we're done.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Internal</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">equalsNonHost</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>route<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// If the host exactly matches, we're done: this connection can carry the address.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>address<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// This connection is a perfect match.</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// At this point we don't have a hostname match. But we still be able to carry the request if</span>    <span class="token comment">// our connection coalescing requirements are met. See also:</span>    <span class="token comment">// https://hpbn.co/optimizing-application-delivery/#eliminate-domain-sharding</span>    <span class="token comment">// https://daniel.haxx.se/blog/2016/08/18/http2-connection-coalescing/</span>    <span class="token comment">// 1. This connection must be HTTP/2.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>http2Connection <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// 2. The routes must share an IP address. This requires us to have a DNS address for both</span>    <span class="token comment">// hosts, which only happens after route planning. We can't coalesce connections that use a</span>    <span class="token comment">// proxy, since proxies don't tell us the origin server's IP address.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>route <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Proxy<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span>DIRECT<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>route<span class="token punctuation">.</span><span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Proxy<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span>DIRECT<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>route<span class="token punctuation">.</span><span class="token function">socketAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">socketAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// 3. This connection's server certificate's must cover the new host.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hostnameVerifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">OkHostnameVerifier</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">supportsUrl</span><span class="token punctuation">(</span>address<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// 4. Certificate pinning must match the host.</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      address<span class="token punctuation">.</span><span class="token function">certificatePinner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>address<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">handshake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">peerCertificates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SSLPeerUnverifiedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// The caller's address can be carried by this connection.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>连接没有达到共享上限 </li><li>非 host 域必须完全一样 </li><li>如果此时 host 域也相同，则符合条件，可以被复用 </li><li>如果 host 不相同，在 HTTP/2 的域名切片场景下一样可以复用</li></ul><p><strong>deduplicate</strong></p><p>deduplicate 方法主要是针对在 HTTP/2 场景下多个多路复用连接清除的场景。如果当前连接是 HTTP/2，那么所有指向该站点的请求都应该基于同一个 TCP 连接：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Socket</span> <span class="token function">deduplicate</span><span class="token punctuation">(</span><span class="token class-name">Address</span> address<span class="token punctuation">,</span> <span class="token class-name">StreamAllocation</span> streamAllocation<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">assert</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">holdsLock</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">RealConnection</span> connection <span class="token operator">:</span> connections<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">isEligible</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>          <span class="token operator">&amp;&amp;</span> connection<span class="token punctuation">.</span><span class="token function">isMultiplexed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token operator">&amp;&amp;</span> connection <span class="token operator">!=</span> streamAllocation<span class="token punctuation">.</span><span class="token function">connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> streamAllocation<span class="token punctuation">.</span><span class="token function">releaseAndAcquire</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token keyword">long</span> now<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> inUseConnectionCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> idleConnectionCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">RealConnection</span> longestIdleConnection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> longestIdleDurationNs <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>    <span class="token comment">// Find either a connection to evict, or the time that the next eviction is due.</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RealConnection</span><span class="token punctuation">></span></span> i <span class="token operator">=</span> connections<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RealConnection</span> connection <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// If the connection is in use, keep searching.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pruneAndGetAllocationCount</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> now<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          inUseConnectionCount<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        idleConnectionCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">// If the connection is ready to be evicted, we're done.</span>        <span class="token keyword">long</span> idleDurationNs <span class="token operator">=</span> now <span class="token operator">-</span> connection<span class="token punctuation">.</span>idleAtNanos<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>idleDurationNs <span class="token operator">></span> longestIdleDurationNs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          longestIdleDurationNs <span class="token operator">=</span> idleDurationNs<span class="token punctuation">;</span>          longestIdleConnection <span class="token operator">=</span> connection<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>longestIdleDurationNs <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveDurationNs          <span class="token operator">||</span> idleConnectionCount <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxIdleConnections<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// We've found a connection to evict. Remove it from the list, then close it below (outside</span>        <span class="token comment">// of the synchronized block).</span>        connections<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>longestIdleConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>idleConnectionCount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// A connection will be ready to evict soon.</span>        <span class="token keyword">return</span> keepAliveDurationNs <span class="token operator">-</span> longestIdleDurationNs<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>inUseConnectionCount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// All connections are in use. It'll be at least the keep alive duration 'til we run again.</span>        <span class="token keyword">return</span> keepAliveDurationNs<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// No connections, idle or in use.</span>        cleanupRunning <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">closeQuietly</span><span class="token punctuation">(</span>longestIdleConnection<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Cleanup again immediately.</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其基本逻辑如下： </p><ul><li>遍历连接池中所有连接，标记泄露连接 </li><li>如果被标记的连接满足(空闲 socket 连接超过 5 个&amp;&amp;keepalive 时间大于 5 分钟)，就将此连接从 Deque 中移除，并关闭连接，返回 0，也就是将要执行 wait(0)，提醒立刻再次扫描 </li><li>如果(目前还可以塞得下 5 个连接，但是有可能泄漏的连接(即空闲时间即将达到 5 分钟))，就返回此连接即将到期的剩余时间，供下次清理 </li><li>如果(全部都是活跃的连接)，就返回默认的 keep-alive 时间，也就是 5 分钟后再执行清理</li></ul><p>pruneAndGetAllocationCount 负责标记并找到不活跃连接</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">pruneAndGetAllocationCount</span><span class="token punctuation">(</span><span class="token class-name">RealConnection</span> connection<span class="token punctuation">,</span> <span class="token keyword">long</span> now<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Reference</span><span class="token punctuation">&lt;</span><span class="token class-name">StreamAllocation</span><span class="token punctuation">></span><span class="token punctuation">></span></span> references <span class="token operator">=</span> connection<span class="token punctuation">.</span>allocations<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> references<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Reference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StreamAllocation</span><span class="token punctuation">></span></span> reference <span class="token operator">=</span> references<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>reference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// We've discovered a leaked allocation. This is an application bug.</span>      <span class="token class-name">StreamAllocation<span class="token punctuation">.</span>StreamAllocationReference</span> streamAllocRef <span class="token operator">=</span>          <span class="token punctuation">(</span><span class="token class-name">StreamAllocation<span class="token punctuation">.</span>StreamAllocationReference</span><span class="token punctuation">)</span> reference<span class="token punctuation">;</span>      <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">"A connection to "</span> <span class="token operator">+</span> connection<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token operator">+</span> <span class="token string">" was leaked. Did you forget to close a response body?"</span><span class="token punctuation">;</span>      <span class="token class-name">Platform</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logCloseableLeak</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> streamAllocRef<span class="token punctuation">.</span>callStackTrace<span class="token punctuation">)</span><span class="token punctuation">;</span>      references<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      connection<span class="token punctuation">.</span>noNewStreams <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token comment">// If this was the last allocation, the connection is eligible for immediate eviction.</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>references<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        connection<span class="token punctuation">.</span>idleAtNanos <span class="token operator">=</span> now <span class="token operator">-</span> keepAliveDurationNs<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> references<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OkHttp 的连接池通过计数+标记清理的机制来管理连接池，使得无用连接可以被会回收，并保持多个健康的 keep-alive 连接。这也是 OkHttp 的连接池能保持高效的关键原因。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Handler使用及源码解析</title>
      <link href="/AndroidHandlerSourceCode/"/>
      <url>/AndroidHandlerSourceCode/</url>
      
        <content type="html"><![CDATA[<h3 id="Handler机制是什么？"><a href="#Handler机制是什么？" class="headerlink" title="Handler机制是什么？"></a>Handler机制是什么？</h3><p>当我们运行一个Android应用程序时，系统会创建一个进程，这个进程就是我们的主线程（UI线程-ActivityThread）。为了防止阻塞UI主线程，我们一般会将耗时的操作放到子线程中进行处理，处理完之后更新UI，但是Android不允许在子线程中操作UI，这违背了Android单线程模型的原则（Android UI操作并不是线程安全的并且这些操作必须在主线程中执行），为此Android提供了一套异步消息传递机制——Handler消息机制来实现线程之间的数据传递。因此，<strong>Handler机制是Android给我们提供的用于更新UI的一套消息处理机制</strong>。Handler贯穿了整个Android系统，它随处可见，在Android开发中有着非常重要的地位。</p><h3 id="Handler机制主要角色"><a href="#Handler机制主要角色" class="headerlink" title="Handler机制主要角色"></a>Handler机制主要角色</h3><p>Android系统是以消息驱动的，整个消息流程可以大致概括为：</p><pre class="line-numbers language-none"><code class="language-none">发送消息 --&gt; 添加消息到队列 --&gt; 从队列中获取消息 --&gt; 处理消息<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的流程可以引出几个重要的类，分别是发送消息的<strong>Handler</strong>，将消息<strong>Message</strong>发送到消息队列<strong>MessageQueue</strong>，<strong>Looper</strong>从消息队列循环取出消息，然后交给<strong>Handler</strong>处理。</p><ul><li><strong>Handler</strong>：处理者，负责Message的发送及处理。发送消息一般是使用Handler的sendMessage()方法、postXXX()方法；发出的消息最终会传递到Handler的handleMessage(Message msg)方法进行处理。 </li><li><strong>Message</strong>：被发送和处理的消息，它可以在内部携带少量的信息，用于在不同线程之间传递数据。Message的what、arg1和arg2字段可以携带一些整型数据，obj字段携带一个Object对象。</li><li><strong>MessageQueue</strong>：存放消息的消息队列，用来存放Handler发送过来的消息，并按照FIFO（先进先出）规则执行。存放的Message并非实际意义的保存，而是将Message以链表的方式串联起来的，等待Looper的抽取。 每个线程中只会有一个MessageQueue对象。</li><li><strong>Looper</strong>：循环的从MessageQueue中取消息给 Handler处理，调用Looper的loop()方法后，就会进入一个无限循环当中，然后每当发现MessageQueue中存在一条满足执行条件的消息时，就会将它取出，并调用Handler的dispatchMessage(msg)方法进行分发处理。每个线程中只会有一个Looper对象。</li></ul><p>了解Handler、Message、MessageQueue以及Looper的基本概念后，再来理一下Handler消息发送和处理的基本流程。首先创建一个Handler对象，并重写handleMessage()方法。然后当有需要传递数据的需求时，就创建一个Message对象，并通过创建的Handler将这条消息发送出去。之后这条消息会被添加到MessageQueue的队列中等待被处理，而Looper则会一直尝试从MessageQueue中取出待处理消息，最后分发回Handler的handleMessage()方法中。如果Handler是在主线程中创建或者创建Handler的时候构造函数中传入了Looper.getMainLooper()，则此时handleMessage()方法中的代码将会在主线程中运行，于是就可以进行UI操作了。整个异步消息处理机制的流程大致如下：</p><p><img src="https://img-blog.csdnimg.cn/20210525165842394.png" alt="Handler"></p><h3 id="Handler机制的基本使用及源码解析"><a href="#Handler机制的基本使用及源码解析" class="headerlink" title="Handler机制的基本使用及源码解析"></a>Handler机制的基本使用及源码解析</h3><p>上面介绍了Handler机制中的几个重要角色，现在就通过实例来一步步的了解Handler源码。</p><p>首先在activity_main.xml中新增一个TextView和一个Button：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>padding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/infoText<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/updateBtn<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center_horizontal<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在MainActivity中完成以下逻辑：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> binding<span class="token operator">:</span> ActivityMainBinding    <span class="token keyword">private</span> <span class="token keyword">val</span> handler <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> <span class="token function">Handler</span><span class="token punctuation">(</span>Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> Message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>            binding<span class="token punctuation">.</span>infoText<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">"handle message"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        binding <span class="token operator">=</span> ActivityMainBinding<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>layoutInflater<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>root<span class="token punctuation">)</span>        binding<span class="token punctuation">.</span>updateBtn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">&#123;</span>            thread <span class="token punctuation">&#123;</span>                handler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到我们创建了一个handler对象，并重写了handleMessage方法；然后在点击updateBtn的时候创建一个子线程，在子线程中使用handler的sendEmptyMessage方法发送消息。</p><blockquote><p>示例中控件的绑定使用的是<a href="https://developer.android.google.cn/topic/libraries/view-binding">ViewBinding</a></p></blockquote><p>运行一下项目，点击一下updateBtn按钮就可以在子线程中发送消息，并在主线程中更新UI了。</p><h4 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h4><p>发送消息有2种方式：sendXXX和postXXX。</p><ol><li>sendXXX()系列方法主要有下面几个方法</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span><span class="token keyword">int</span> what<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送一个空的消息</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Message</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送消息，消息中可以携带参数</span><span class="token function">sendMessageDelayed</span><span class="token punctuation">(</span><span class="token keyword">int</span> what<span class="token punctuation">,</span> <span class="token keyword">long</span> delayMillis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//延时delayMillis(ms)发送消息</span><span class="token function">sendMessageAtTime</span><span class="token punctuation">(</span><span class="token keyword">int</span> what<span class="token punctuation">,</span> <span class="token keyword">long</span> uptimeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//未来某一时间点发送消息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>postXXX()系列方法主要有下面几个方法</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">post</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Runnable</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//提交计划任务马上执行</span><span class="token function">postDelayed</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Runnable</span> r<span class="token punctuation">,</span> <span class="token keyword">long</span> delayMillis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//提交计划任务延时Nms执行</span><span class="token function">postAtTime</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Runnable</span> r<span class="token punctuation">,</span> <span class="token keyword">long</span> uptimeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//提交计划任务在未来的时间点执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>handler.sendXXX()和handler.postXXX()最终都会调用Handler的<code>sendMessageDelayed()</code>方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">sendMessageDelayed</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Message</span> msg<span class="token punctuation">,</span> <span class="token keyword">long</span> delayMillis<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>delayMillis <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    delayMillis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token function">sendMessageAtTime</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token class-name">SystemClock</span><span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> delayMillis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后调用了Handler的<code>sendMessageAtTime</code>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">sendMessageAtTime</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Message</span> msg<span class="token punctuation">,</span> <span class="token keyword">long</span> uptimeMillis<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">MessageQueue</span> queue <span class="token operator">=</span> mQueue<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>queue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">RuntimeException</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>        <span class="token keyword">this</span> <span class="token operator">+</span> <span class="token string">" sendMessageAtTime() called with no mQueue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token string">"Looper"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">enqueueMessage</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> uptimeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再调用Handler的<code>enqueueMessage(queue, msg, uptimeMillis)</code>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">enqueueMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">MessageQueue</span> queue<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Message</span> msg<span class="token punctuation">,</span><span class="token keyword">long</span> uptimeMillis<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>msg<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>msg<span class="token punctuation">.</span>workSourceUid <span class="token operator">=</span> <span class="token class-name">ThreadLocalWorkSource</span><span class="token punctuation">.</span><span class="token function">getUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mAsynchronous<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>msg<span class="token punctuation">.</span><span class="token function">setAsynchronous</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">enqueueMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> uptimeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到最终调用了MessageQueue的私有方法<code>enqueueMessage(msg, uptimeMillis)</code> 方法，点进MessageQueue看看。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">enqueueMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">,</span> <span class="token keyword">long</span> when<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>target <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//判断msg.target是否为空，target就是Handler</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Message must have a target."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">isInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token string">" This message is already in use."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mQuitting<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">//这里判断线程是否已经销毁</span>            <span class="token class-name">IllegalStateException</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>                msg<span class="token punctuation">.</span>target <span class="token operator">+</span> <span class="token string">" sending message to a Handler on a dead thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            msg<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        msg<span class="token punctuation">.</span><span class="token function">markInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>when <span class="token operator">=</span> when<span class="token punctuation">;</span>        <span class="token class-name">Message</span> p <span class="token operator">=</span> mMessages<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> needWake<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> when <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> when <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>when<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 当消息队列为空或者将要入队的消息(msg)的时间(when)在所有消息队列的消息最前面，则把msg插入到队头,最先执行</span>            <span class="token comment">// New head, wake up the event queue if blocked.</span>            msg<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>            mMessages <span class="token operator">=</span> msg<span class="token punctuation">;</span>            needWake <span class="token operator">=</span> mBlocked<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Inserted within the middle of the queue.  Usually we don't have to wake</span>            <span class="token comment">// up the event queue unless there is a barrier at the head of the queue</span>            <span class="token comment">// and the message is the earliest asynchronous message in the queue.</span>          <span class="token comment">//将消息按时间顺序插入到MessageQueue。</span>            needWake <span class="token operator">=</span> mBlocked <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>target <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">.</span><span class="token function">isAsynchronous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Message</span> prev<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                prev <span class="token operator">=</span> p<span class="token punctuation">;</span>                p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> when <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>when<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>needWake <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span><span class="token function">isAsynchronous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    needWake <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            msg<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment">// invariant: p == prev.next</span>            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> msg<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// We can assume mPtr != 0 because mQuitting is false.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>needWake<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">nativeWake</span><span class="token punctuation">(</span>mPtr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看Message类的实现可以看出它是个单链表，消息队列中的消息都是按照时间先后顺序链接起来的。</p><p>在上面的if分支中有三个条件判断p == null || when == 0 || when &lt; p.when，</p><ul><li>p == null：当p也就是mMessages为空，表示消息队列中还没添加过消息</li><li>when == 0：when正常情况下表示当前时间SystemClock.uptimeMillis()加上延迟时间delayMillis，如果直接调用Handler的sendMessageAtTime，可能会出现when=0的情况</li><li>when &lt; p.when：新消息的时间when小于p消息的时间p.when</li></ul><p>以上三个条件只要满足任一条件都会执行到if代码块中的语句，将新消息添加到p消息的前面，p消息为空时，即队头。</p><p>当添加新消息时，消息队列中有消息的时候，就会执行到else语句中,将消息按时间顺序插入到MessageQueue。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">prev <span class="token operator">=</span> p<span class="token punctuation">;</span>p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第一行代码中的p就是在if代码块中添加的消息，说明指针指向p消息，第二行代码又将指针指向了p消息的下一个消息，指针向后移动了一位。消息添加到MessageQueue的流程大致如下：</p><p><img src="https://img-blog.csdnimg.cn/20210527093633400.gif" alt="MeessaegeQueue"></p><h4 id="取出消息"><a href="#取出消息" class="headerlink" title="取出消息"></a>取出消息</h4><p>Looper.loop()方法不断的从MessageQueue中取消息。那么Looper.loop()方法是在哪里调用的呢？由于系统都是由消息驱动的，所以在系统启动的时候就应该有动力驱动了，在SystemServer.main()中调用了Looper.loop()，这是在系统层面的驱动，而对于APP应用层面来说，应用入口ActivityThread.main()中也需要调用Looper.loop()，毕竟APP也是需要各种事件响应。</p><p>下面分别看看SystemServer和ActivityThread的main方法：</p><p><code>com.android.server.SystemServer.java:407</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">SystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment">// Prepare the main looper thread (this thread).</span>        <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Process</span><span class="token punctuation">.</span><span class="token function">setThreadPriority</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Process</span><span class="token punctuation">.</span>THREAD_PRIORITY_FOREGROUND<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Process</span><span class="token punctuation">.</span><span class="token function">setCanSelfBackground</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">prepareMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSlowLogThresholdMs</span><span class="token punctuation">(</span>        SLOW_DISPATCH_THRESHOLD_MS<span class="token punctuation">,</span> SLOW_DELIVERY_THRESHOLD_MS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        t<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// InitBeforeStartServices</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">// Loop forever.</span>    <span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Main thread loop unexpectedly exited"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>android.app.ActivityThread.java:6707</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">prepareMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token class-name">ActivityThread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActivityThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    thread<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> startSeq<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sMainThreadHandler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sMainThreadHandler <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMessageLogging</span><span class="token punctuation">(</span><span class="token keyword">new</span>                <span class="token class-name">LogPrinter</span><span class="token punctuation">(</span><span class="token class-name">Log</span><span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span> <span class="token string">"ActivityThread"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// End of event ActivityThreadMain.</span>    <span class="token class-name">Trace</span><span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token class-name">Trace</span><span class="token punctuation">.</span>TRACE_TAG_ACTIVITY_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Main thread loop unexpectedly exited"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到SystemServer和ActivityThread的main方法中都调用了<code>Looper.prepareMainLooper()</code> 和 <code>Looper.loop()</code> 方法。首先看看<code>Looper.prepareMainLooper()</code> 的源码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Initialize the current thread as a looper, marking it as an * application's main looper. See also: &#123;@link #prepare()&#125; * * @deprecated The main looper for your application is created by the Android environment, *   so you should never need to call this function yourself. */</span><span class="token annotation punctuation">@Deprecated</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">prepareMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sMainLooper <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"The main Looper has already been prepared."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        sMainLooper <span class="token operator">=</span> <span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> quitAllowed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Only one Looper may be created per thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    sThreadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Looper</span><span class="token punctuation">(</span>quitAllowed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">Looper</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> quitAllowed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>mQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageQueue</span><span class="token punctuation">(</span>quitAllowed<span class="token punctuation">)</span><span class="token punctuation">;</span>    mThread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>prepareMainLooper</code>方法中又调用了<code>prepare(boolean quitAllowed)</code>方法，然后prepare方法中创建了一个Looper实例并设置给sThreadLocal变量，Looper构造函数中又创建了MessageQueue对象。sThreadLocal保证了一个线程只有一个Looper，而一个Looper又只有一个MessageQueue。</p><p>prepareMainLooper方法标记为Deprecated，是因为应用程序的主线程Looper应该由系统自动为我们初始化，不需要我们自己去调。</p><p>从源码中看到私有方法prepare有一个参数<strong>quitAllowed</strong>，prepareMainLooper中传的是false，prepare()方法中传的是true，说明主线程中的Looper不允许退出。</p><p>分析完<code>Looper.prepareMainLooper()</code> 之后，再来看看<code>Looper.loop()</code> 方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">Looper</span> me <span class="token operator">=</span> <span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 先获取Looper对象</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>me <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"No Looper; Looper.prepare() wasn't called on this thread."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Message</span> msg <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// might block 获取消息，无消息时可能会阻塞</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// No message indicates that the message queue is quitting.</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            msg<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">dispatchMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用target（Handler）分发消息</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>observer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                observer<span class="token punctuation">.</span><span class="token function">messageDispatched</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            dispatchEnd <span class="token operator">=</span> needEndTime <span class="token operator">?</span> <span class="token class-name">SystemClock</span><span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>observer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                observer<span class="token punctuation">.</span><span class="token function">dispatchingThrewException</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">throw</span> exception<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        msg<span class="token punctuation">.</span><span class="token function">recycleUnchecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//回收消息</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先要获取到Looper对象，当Looper对象为空时抛出异常<code>No Looper; Looper.prepare() wasn&#39;t called on this thread.</code>，我们就知道调用loop()方法之前需要先调用prepare()方法，在上面的prepareMainLooper() 和 prepare()中创建出了Looper对象。</p><p>获取到了Looper对象后，就从Looper中获取MessageQueue对象<code>queue</code>，然后在<code>for(,,)</code>循环中调用<code>queue.next()</code>取消息，当消息队列中没有消息时，就会阻塞在<code>queue.next()</code>这里。来看看<code>queue.next()</code>中做了什么：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Message</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">int</span> nextPollTimeoutMillis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextPollTimeoutMillis <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Binder</span><span class="token punctuation">.</span><span class="token function">flushPendingCommands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">nativePollOnce</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> nextPollTimeoutMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Try to retrieve the next message.  Return if found.</span>            <span class="token keyword">final</span> <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token class-name">SystemClock</span><span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Message</span> prevMsg <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token class-name">Message</span> msg <span class="token operator">=</span> mMessages<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">.</span>target <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span>                <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>                    prevMsg <span class="token operator">=</span> msg<span class="token punctuation">;</span>                    msg <span class="token operator">=</span> msg<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>msg<span class="token punctuation">.</span><span class="token function">isAsynchronous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">&lt;</span> msg<span class="token punctuation">.</span>when<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// Next message is not ready.  Set a timeout to wake up when it is ready. 当前时间小于消息的时间，说明还没有到该消息执行的时候，计算出消息执行  的延时时间</span>                    nextPollTimeoutMillis <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>when <span class="token operator">-</span> now<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// Got a message.</span>                    mBlocked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>prevMsg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        prevMsg<span class="token punctuation">.</span>next <span class="token operator">=</span> msg<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">// msg将要进行处理，然后会将处理的消息删除，所以消息指针需要向后移一位</span>                        mMessages <span class="token operator">=</span> msg<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    msg<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 表示将msg从消息队列中剔除</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span> <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Returning message: "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                    msg<span class="token punctuation">.</span><span class="token function">markInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> msg<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// No more messages. 没有消息，继续休眠等待</span>                nextPollTimeoutMillis <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>next()</code>里面是一个死循环，如果消息队列中没有消息的时候会堵塞在<code>next()</code>方法处让CPU休眠，消息队列中有消息的时候，则取出消息，判断当前时间和该消息执行时间的先后关系，没到执行时间则继续休眠等待，否则就返回消息给Looper.loop()方法进行处理并从消息队列中移除该msg，<code>enqueueMessage()</code>和<code>next()</code>方法中都用了同步锁，避免在发送消息时取消息以及取消息时发送消息，保证了线程安全。</p><h4 id="处理消息"><a href="#处理消息" class="headerlink" title="处理消息"></a>处理消息</h4><p>在上一步取出消息之后，loop()方法中调用了：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">msg<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">dispatchMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的target就是在Handler的enqueueMessage方法在发送消息时设置的Handler对象。所以来看看Handler的dispatchMessage方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispatchMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>callback <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">handleCallback</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mCallback <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mCallback<span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若msg.callback和mCallback都为空，则会执行handleMessage(msg)。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 子类必须实现这个方法才能收到消息 * Subclasses must implement this to receive messages. */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面只说了msg.callback和mCallback都为空的情况，会调用Handler的handleMessage方法处理消息，现在来分别看看msg.callback和mCallback不为空处理消息的情况。</p><p>首先，msg.callback是在创建Message的时候赋值的，</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Message</span> <span class="token function">obtain</span><span class="token punctuation">(</span><span class="token class-name">Handler</span> h<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> callback<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Message</span> m <span class="token operator">=</span> <span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  m<span class="token punctuation">.</span>target <span class="token operator">=</span> h<span class="token punctuation">;</span>    m<span class="token punctuation">.</span>callback <span class="token operator">=</span> callback<span class="token punctuation">;</span>    <span class="token keyword">return</span> m<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们现在修改一下MainActivity的代码，然后运行一下发现同样可以更新infoText的信息：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> binding<span class="token operator">:</span> ActivityMainBinding    <span class="token comment">//这里只创建handler对象，没有重写handleMessage方法</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> handler <span class="token operator">=</span> <span class="token function">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        binding <span class="token operator">=</span> ActivityMainBinding<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>layoutInflater<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>root<span class="token punctuation">)</span>        binding<span class="token punctuation">.</span>updateBtn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">&#123;</span>            thread <span class="token punctuation">&#123;</span>                <span class="token keyword">val</span> message <span class="token operator">=</span> Message<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    binding<span class="token punctuation">.</span>infoText<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">"Message Callback"</span>                <span class="token punctuation">&#125;</span>                handler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里创建message时，使用了Message的obtain(handler, runnable)重载方法，而不是使用new Message()的方式，因为obtain()方法内部是直接从系统的Message缓存池中获取的Message对象，效率更高：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Message</span> <span class="token function">obtain</span><span class="token punctuation">(</span><span class="token class-name">Handler</span> h<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> callback<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Message</span> m <span class="token operator">=</span> <span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m<span class="token punctuation">.</span>target <span class="token operator">=</span> h<span class="token punctuation">;</span>    m<span class="token punctuation">.</span>callback <span class="token operator">=</span> callback<span class="token punctuation">;</span>    <span class="token keyword">return</span> m<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Message</span> <span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>sPoolSync<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sPool <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Message</span> m <span class="token operator">=</span> sPool<span class="token punctuation">;</span>            sPool <span class="token operator">=</span> m<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            m<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            m<span class="token punctuation">.</span>flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// clear in-use flag</span>            sPoolSize<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> m<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Message的obtain方法还有很多重载方法，每个方法传的参数不一样，根据不同的需求来选择调用对应的方法即可，具体的源码就不展开了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Message</span> <span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Message</span> <span class="token function">obtain</span><span class="token punctuation">(</span><span class="token class-name">Message</span> orig<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Message</span> <span class="token function">obtain</span><span class="token punctuation">(</span><span class="token class-name">Handler</span> h<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Message</span> <span class="token function">obtain</span><span class="token punctuation">(</span><span class="token class-name">Handler</span> h<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> callback<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Message</span> <span class="token function">obtain</span><span class="token punctuation">(</span><span class="token class-name">Handler</span> h<span class="token punctuation">,</span> <span class="token keyword">int</span> what<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Message</span> <span class="token function">obtain</span><span class="token punctuation">(</span><span class="token class-name">Handler</span> h<span class="token punctuation">,</span> <span class="token keyword">int</span> what<span class="token punctuation">,</span> <span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Message</span> <span class="token function">obtain</span><span class="token punctuation">(</span><span class="token class-name">Handler</span> h<span class="token punctuation">,</span> <span class="token keyword">int</span> what<span class="token punctuation">,</span> <span class="token keyword">int</span> arg1<span class="token punctuation">,</span> <span class="token keyword">int</span> arg2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Message</span> <span class="token function">obtain</span><span class="token punctuation">(</span><span class="token class-name">Handler</span> h<span class="token punctuation">,</span> <span class="token keyword">int</span> what<span class="token punctuation">,</span> <span class="token keyword">int</span> arg1<span class="token punctuation">,</span> <span class="token keyword">int</span> arg2<span class="token punctuation">,</span> <span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后再来看看mCallback不为空的情况，<code>mCallback</code>是在构造Handler的时候赋值的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Callback</span> callback<span class="token punctuation">,</span> <span class="token keyword">boolean</span> async<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    mLooper <span class="token operator">=</span> <span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mLooper <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>                <span class="token string">"Can't create handler inside thread "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token operator">+</span> <span class="token string">" that has not called Looper.prepare()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    mQueue <span class="token operator">=</span> mLooper<span class="token punctuation">.</span>mQueue<span class="token punctuation">;</span>    mCallback <span class="token operator">=</span> callback<span class="token punctuation">;</span>    mAsynchronous <span class="token operator">=</span> async<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续修改一下MainActivity的代码：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> binding<span class="token operator">:</span> ActivityMainBinding    <span class="token keyword">private</span> <span class="token keyword">val</span> handler <span class="token operator">=</span> <span class="token function">Handler</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> Handler<span class="token punctuation">.</span><span class="token function">Callback</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> Message<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">&#123;</span>            binding<span class="token punctuation">.</span>infoText<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">"handle Callback message<span class="token interpolation"><span class="token delimiter variable">$&#123;</span>msg<span class="token punctuation">.</span>what<span class="token delimiter variable">&#125;</span></span>"</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        binding <span class="token operator">=</span> ActivityMainBinding<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>layoutInflater<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>root<span class="token punctuation">)</span>        binding<span class="token punctuation">.</span>updateBtn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">&#123;</span>            thread <span class="token punctuation">&#123;</span>                handler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们使用了Handler(callback)构造参数创建handler对象，callback的handleMessage方法接收一个Boolean返回值，如果返回false，则执行完Callback的handleMessage方法之后，还会执行Handler的handleMessage方法，所以这里我们返回true，dispatchMessage方法执行mCallback.handleMessage(msg)之后直接return了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispatchMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>callback <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">handleCallback</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mCallback <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mCallback<span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里，Handler机制的基本流程：发送消息、取出消息、处理消息 就已经分析完了。这样一些常见的问题就可以知道答案了。</p><h3 id="Handler常见问题解答"><a href="#Handler常见问题解答" class="headerlink" title="Handler常见问题解答"></a>Handler常见问题解答</h3><h4 id="1-Handler是如何做到在主线程更新UI的？"><a href="#1-Handler是如何做到在主线程更新UI的？" class="headerlink" title="1.Handler是如何做到在主线程更新UI的？"></a>1.Handler是如何做到在主线程更新UI的？</h4><p>如果Handler是在主线程中创建或者Handler在子线程创建时构造函数中传入了Looper.getMainLooper()，则可以实现在主线程中更新UI。</p><p>答案就在于Looper的创建和loop()的执行了，由前面分析的<strong>“取出消息”</strong> 流程中可以知道，应用的主线程Looper的创建和loop()的执行是在<code>ActivityThread.main()</code> 方法中，因此<code>Looper.loop()</code> 方法取出消息之后，调用<code>msg.target.dispatchMessage(msg);</code> 分发处理消息就自然是在主线程中执行了。</p><h4 id="2-如何处理Handler导致的内存泄漏？"><a href="#2-如何处理Handler导致的内存泄漏？" class="headerlink" title="2.如何处理Handler导致的内存泄漏？"></a>2.如何处理Handler导致的内存泄漏？</h4><p>Handler使用过程中，我们需要特别注意一个问题，那就是Handler可能会导致内存泄漏。</p><p>具体原因如下：</p><ul><li>Handler的生命周期与Activity不同，Handler会关联Looper来管理Message Queue。这个队列在整个Application的生命周期中存在，因此Handler不会因Activity的finish()方法而被销毁。</li><li>非静态（匿名）内部类会持有外部对象，当我们这样重写Handler时它就成为了一个匿名内部类，这样如果调用finish方法时Handler有Message未处理的话，就会导致Activity不能被销毁。</li></ul><p>解决方法</p><ul><li>可以在外部新建一个类，在外部类对象被销毁时，将MessageQueue中的消息清空。</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    handler<span class="token punctuation">.</span><span class="token function">removeCallbacksAndMessages</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以同时使用静态内部类和弱引用，当一个对象只被弱引用依赖时它便可以被GC回收。注意，要static和弱引用要同时使用，否则由于非静态内部类隐式持有了外部类Activity的引用，而导致Activity无法被释放</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token keyword">class</span> <span class="token function">TestHandler</span><span class="token punctuation">(</span>activity<span class="token operator">:</span> Activity<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Handler</span><span class="token punctuation">(</span>Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> mActivity<span class="token operator">:</span> WeakReference<span class="token operator">&lt;</span>Activity<span class="token operator">></span> <span class="token operator">=</span> <span class="token function">WeakReference</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> Message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        <span class="token keyword">val</span> activity<span class="token operator">:</span> MainActivity <span class="token operator">=</span> mActivity<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> MainActivity<span class="token punctuation">;</span>        activity<span class="token punctuation">.</span>binding<span class="token punctuation">.</span>infoText<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">"handleMessage"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>  <span class="token operator">..</span><span class="token punctuation">.</span>  handler <span class="token operator">=</span> <span class="token function">TestHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token label symbol">@MainActivity</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-子线程创建Handler抛异常？"><a href="#3-子线程创建Handler抛异常？" class="headerlink" title="3.子线程创建Handler抛异常？"></a>3.子线程创建Handler抛异常？</h4><p>有时候可能会有主线程发送消息给子线程处理的场景，但是在子线程中创建Handler之后，运行时出现了异常<code>Can&#39;t create handler inside thread that has not called Looper.prepare()</code> 。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> binding<span class="token operator">:</span> ActivityMainBinding    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> handler<span class="token operator">:</span> Handler    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        binding <span class="token operator">=</span> ActivityMainBinding<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>layoutInflater<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>root<span class="token punctuation">)</span>        binding<span class="token punctuation">.</span>updateBtn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">&#123;</span>            thread <span class="token punctuation">&#123;</span>                handler <span class="token operator">=</span> <span class="token keyword">object</span><span class="token operator">:</span> <span class="token function">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> Message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>                        binding<span class="token punctuation">.</span>infoText<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">"child thread message"</span>                        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"MainActivity"</span><span class="token punctuation">,</span> <span class="token string">"handleMessage: child thread message"</span> <span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        binding<span class="token punctuation">.</span>sendMessageBtn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">&#123;</span>            handler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码中，我们点击updateBtn的时候在子线程中创建了一个Handler， 结果一运行就出现了上面的异常。这是因为我们在子线程创建Handler的时候还没有创建Looper对象，我们需要手动添加<code>Looper.prepare()</code>和<code>Looper.loop()</code> 。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> binding<span class="token operator">:</span> ActivityMainBinding    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> handler<span class="token operator">:</span> Handler    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        binding <span class="token operator">=</span> ActivityMainBinding<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>layoutInflater<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>root<span class="token punctuation">)</span>        binding<span class="token punctuation">.</span>updateBtn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">&#123;</span>            thread <span class="token punctuation">&#123;</span>                Looper<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                handler <span class="token operator">=</span> <span class="token keyword">object</span><span class="token operator">:</span> <span class="token function">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> Message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>                        binding<span class="token punctuation">.</span>infoText<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">"child thread message"</span>                        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"MainActivity"</span><span class="token punctuation">,</span> <span class="token string">"handleMessage: child thread message"</span> <span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        binding<span class="token punctuation">.</span>sendMessageBtn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">&#123;</span>            handler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改之后运行发现，创建Handler不会出现问题了，但是点击sendMessageBtn发送消息时，报如下的异常：</p><p><code>android.view.ViewRootImpl$CalledFromWrongThreadException: Only the original thread that created a view hierarchy can touch its views.</code></p><p>这是因为我们在子线程中创建的Looper和Handler，<code>handleMessage(msg)</code> 方法就会在子线程中回调，因此不能操作UI了。</p><h3 id="Handler机制扩展"><a href="#Handler机制扩展" class="headerlink" title="Handler机制扩展"></a>Handler机制扩展</h3><p>为了更加方便的使用Handler消息机制，Android也提供了几种扩展方式，内部实现都是基于Handler消息机制.</p><ol><li> Activity.runOnUiThread(Runnable)</li></ol><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> binding<span class="token operator">:</span> ActivityMainBinding    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        binding <span class="token operator">=</span> ActivityMainBinding<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>layoutInflater<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>root<span class="token punctuation">)</span>        binding<span class="token punctuation">.</span>updateBtn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">&#123;</span>            thread <span class="token punctuation">&#123;</span>                runOnUiThread <span class="token punctuation">&#123;</span>                    binding<span class="token punctuation">.</span>infoText<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">"runOnUiThread Message"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看<code>runOnUiThread</code>的代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">runOnUiThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> action<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> mUiThread<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 判断当前线程是不是UI线程</span>        mHandler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不是UI线程，则使用handler的post方式，发送消息到主线程执行</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        action<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当前已经是UI线程了， 则直接执行Runnable的run()方法</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>View.post(Runnable)</li></ol><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> binding<span class="token operator">:</span> ActivityMainBinding    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        binding <span class="token operator">=</span> ActivityMainBinding<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>layoutInflater<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>root<span class="token punctuation">)</span>        binding<span class="token punctuation">.</span>updateBtn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">&#123;</span>            thread <span class="token punctuation">&#123;</span>                binding<span class="token punctuation">.</span>infoText<span class="token punctuation">.</span><span class="token function">post</span> <span class="token punctuation">&#123;</span>                    binding<span class="token punctuation">.</span>infoText<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">"view post Message"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看看View的post方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> action<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">AttachInfo</span> attachInfo <span class="token operator">=</span> mAttachInfo<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>attachInfo <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> attachInfo<span class="token punctuation">.</span>mHandler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用attachInfo的Handler实例post消息</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Postpone the runnable until we know on which thread it needs to run.</span>    <span class="token comment">// Assume that the runnable will be successfully placed after attach.</span>    <span class="token function">getRunQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HandlerThread"><a href="#HandlerThread" class="headerlink" title="HandlerThread"></a>HandlerThread</h3><p>常见的异步形式有Thread、HandlerThread、AsyncTask、IntentService等。</p><p>HandlerThread继承Thread，内部维护了一个Looper和Handler，完整源码如下。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HandlerThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> mPriority<span class="token punctuation">;</span>    <span class="token keyword">int</span> mTid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token class-name">Looper</span> mLooper<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Handler</span> mHandler<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">HandlerThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        mPriority <span class="token operator">=</span> <span class="token class-name">Process</span><span class="token punctuation">.</span>THREAD_PRIORITY_DEFAULT<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">HandlerThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> priority<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        mPriority <span class="token operator">=</span> priority<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">/**     * Call back method that can be explicitly overridden if needed to execute some     * setup before Looper loops.     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onLooperPrepared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mTid <span class="token operator">=</span> <span class="token class-name">Process</span><span class="token punctuation">.</span><span class="token function">myTid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建Looper对象</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            mLooper <span class="token operator">=</span> <span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 上一步创建的Looper赋值给mLooper变量</span>            <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Process</span><span class="token punctuation">.</span><span class="token function">setThreadPriority</span><span class="token punctuation">(</span>mPriority<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">onLooperPrepared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// loop循环</span>        mTid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">Looper</span> <span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// If the thread has been started, wait until the looper has been created.</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mLooper <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> mLooper<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @return a shared &#123;@link Handler&#125; associated with this thread     * @hide     */</span>    <span class="token annotation punctuation">@NonNull</span>    <span class="token keyword">public</span> <span class="token class-name">Handler</span> <span class="token function">getThreadHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mHandler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            mHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> mHandler<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Looper</span> looper <span class="token operator">=</span> <span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>looper <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            looper<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">quitSafely</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Looper</span> looper <span class="token operator">=</span> <span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>looper <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            looper<span class="token punctuation">.</span><span class="token function">quitSafely</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns the identifier of this thread. See Process.myTid().     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> mTid<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看看HandlerThread的基本使用：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> binding<span class="token operator">:</span> ActivityMainBinding    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> handlerThread<span class="token operator">:</span> HandlerThread    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> handler<span class="token operator">:</span> Handler    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        binding <span class="token operator">=</span> ActivityMainBinding<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>layoutInflater<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>root<span class="token punctuation">)</span>        handlerThread <span class="token operator">=</span> <span class="token function">HandlerThread</span><span class="token punctuation">(</span><span class="token string">"ThreadName"</span><span class="token punctuation">)</span>        handlerThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        handler <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> <span class="token function">Handler</span><span class="token punctuation">(</span>handlerThread<span class="token punctuation">.</span>looper<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> Message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>                Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"handlerThread"</span><span class="token punctuation">,</span> <span class="token string">"handlerThread message"</span><span class="token punctuation">)</span>               <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        binding<span class="token punctuation">.</span>sendMessageBtn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">&#123;</span>            handler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        binding<span class="token punctuation">.</span>quitBtn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">&#123;</span>            handlerThread<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的<code>handleMessage(msg)</code>方法运行在子线程中，因此可以执行一些耗时操作，但是不能操作UI。quitBtn按钮点击时会执行<code>handlerThread.quit()</code> 停止接收消息，从上面的源码中可以看到其实是调用的<code>Looper.quit()</code>方法，最终会调用MessageQueue的<code>quit(boolean safe)</code> 方法清空消息池中的所有消息。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">quit</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> safe<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mQuitAllowed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Main thread not allowed to quit."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mQuitting<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        mQuitting <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>safe<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">removeAllFutureMessagesLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">removeAllMessagesLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// We can assume mPtr != 0 because mQuitting was previously false.</span>        <span class="token function">nativeWake</span><span class="token punctuation">(</span>mPtr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数safe如果等于true，则调用<code>removeAllFutureMessagesLocked()</code> 这个方法只会清空MessageQueue消息池中所有的延迟消息，消息池中所有的非延迟消息还是会派发出去让Handler去处理；如果safe=false，则调用<code>removeAllMessagesLocked()</code> ，所有延时消息和非延时消息都会本清空。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android控件-TabLayout使用介绍</title>
      <link href="/AndroidTabLayout/"/>
      <url>/AndroidTabLayout/</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>TabLayout是Android support中的一个控件android.support.design.widget.TabLayout，Google在升级了AndroidX之后，将TabLayout迁移到material包下面去了com.google.android.material.tabs.TabLayout，原来的support下面的TabLayout从API 29开始就不再维护了。所以如果项目已经升级了AndroidX，建议直接使用后者。TabLayout一般结合ViewPager+Fragment的使用实现滑动的标签选择器。<br>比如新闻标签切换<br><img src="https://img-blog.csdnimg.cn/2020050612022865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>看下TabLayout的继承关系，如下图<br>support包下面的<br><img src="https://img-blog.csdnimg.cn/20200506114959629.png#pic_center" alt="继承关系"><br>material包下面的<br><img src="https://img-blog.csdnimg.cn/20200506154511501.png#pic_center" alt="在这里插入图片描述"></p><p>TabLayout继承的HorizontalScrollView，所以支持左右滑动，下面写的简单的例子看看效果。</p><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><p><strong>activity_tab.xml</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.constraintlayout.widget.ConstraintLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.google.android.material.tabs.TabLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/tab_layout<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintStart_toStartOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>tabTextColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/colorPrimary<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>tabSelectedTextColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/colorPrimaryDark<span class="token punctuation">"</span></span>        <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.viewpager.widget.ViewPager</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/view_pager<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/tab_layout<span class="token punctuation">"</span></span>        <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.constraintlayout.widget.ConstraintLayout</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ConstraintLayout 布局里面就一个TabLayout和一个ViewPager，tabSelectedTextColor和tabTextColor属性分别设置标签选中和未选中状态的文字颜色，其他属性后面介绍。<br><strong>TabFragment.java</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TabFragment</span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">TabFragment</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">String</span> label<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Bundle</span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        args<span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span><span class="token string">"label"</span><span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TabFragment</span> fragment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TabFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fragment<span class="token punctuation">.</span><span class="token function">setArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> fragment<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">View</span> <span class="token function">onCreateView</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">LayoutInflater</span> inflater<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ViewGroup</span> container<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>fragment_tab<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> label <span class="token operator">=</span> <span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"label"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TextView</span> text <span class="token operator">=</span> <span class="token function">getView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_bg<span class="token punctuation">)</span><span class="token punctuation">;</span>        text<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>        text<span class="token punctuation">.</span><span class="token function">setBackgroundColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token function">rgb</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>TabFragment中就一个TextView，通过给每一个Fragment中的TextView设置不同的text和背景颜色来区分当前是哪一个Fragment。Fragment的布局文件如下：<br><strong>fragment_tab.xml</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/tv_bg<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center_horizontal<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>paddingTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>TabActivity.java</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TabActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tabs <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"tab1"</span><span class="token punctuation">,</span> <span class="token string">"tab2"</span><span class="token punctuation">,</span> <span class="token string">"tab3"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TabFragment</span><span class="token punctuation">></span></span> tabFragmentList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_tab<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TabLayout</span> tabLayout <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>tab_layout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ViewPager</span> viewPager <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>view_pager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//添加tab</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tabs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tabLayout<span class="token punctuation">.</span><span class="token function">addTab</span><span class="token punctuation">(</span>tabLayout<span class="token punctuation">.</span><span class="token function">newTab</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>tabs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tabFragmentList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">TabFragment</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>tabs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                viewPager<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FragmentPagerAdapter</span><span class="token punctuation">(</span><span class="token function">getSupportFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">FragmentPagerAdapter</span><span class="token punctuation">.</span>BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@NonNull</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Fragment</span> <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> tabFragmentList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> tabFragmentList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token annotation punctuation">@Nullable</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">CharSequence</span> <span class="token function">getPageTitle</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> tabs<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//设置TabLayout和ViewPager联动</span>        tabLayout<span class="token punctuation">.</span><span class="token function">setupWithViewPager</span><span class="token punctuation">(</span>viewPager<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单的3步：</p><ol><li>为TabLayout添加tab</li><li>给ViewPager设置adapter</li><li>设置TabLayout和ViewPager联动</li></ol><p>看看运行结果：<br><img src="https://img-blog.csdnimg.cn/20200506171118192.gif#pic_center" alt="在这里插入图片描述"><br>好了，基本的功能已经实现了。这里有个需要注意的点：<br>就是在给ViewPager设置Adapter的时候，一定要重写getPageTitle(int position)方法，不然TabLayout中的标签是看不到的，即使在addTab时newTab().setText(tabs[i])也没用。原因很简单，是在tabLayout.setupWithViewPager的时候，TabLayout中先将所有tabs remove了，然后取的PagerAdapter中的getPageTitle返回值添加的tab。看下源码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ViewPager.DecorView</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TabLayout</span> <span class="token keyword">extends</span> <span class="token class-name">HorizontalScrollView</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setupWithViewPager</span><span class="token punctuation">(</span>      <span class="token annotation punctuation">@Nullable</span> <span class="token keyword">final</span> <span class="token class-name">ViewPager</span> viewPager<span class="token punctuation">,</span> <span class="token keyword">boolean</span> autoRefresh<span class="token punctuation">,</span> <span class="token keyword">boolean</span> implicitSetup<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>viewPager <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>viewPager <span class="token operator">=</span> viewPager<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">final</span> <span class="token class-name">PagerAdapter</span> adapter <span class="token operator">=</span> viewPager<span class="token punctuation">.</span><span class="token function">getAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>adapter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Now we'll populate ourselves from the pager adapter, adding an observer if</span>        <span class="token comment">// autoRefresh is enabled</span>        <span class="token function">setPagerAdapter</span><span class="token punctuation">(</span>adapter<span class="token punctuation">,</span> autoRefresh<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// We've been given a null ViewPager so we need to clear out the internal state,</span>      <span class="token comment">// listeners and observers</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>viewPager <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token function">setPagerAdapter</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">setPagerAdapter</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token keyword">final</span> <span class="token class-name">PagerAdapter</span> adapter<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> addObserver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">// Finally make sure we reflect the new adapter</span>    <span class="token function">populateFromPagerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">populateFromPagerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">removeAllTabs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pagerAdapter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">final</span> <span class="token keyword">int</span> adapterCount <span class="token operator">=</span> pagerAdapter<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> adapterCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">addTab</span><span class="token punctuation">(</span><span class="token function">newTab</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>pagerAdapter<span class="token punctuation">.</span><span class="token function">getPageTitle</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到populateFromPagerAdapter方法中执行了removeAllTabs()方法，然后取pagerAdapter.getPageTitle(i)方法返回值重新添加tab，所以记得重写getPageTitle方法。<br>除了在代码里面动态的添加tab，还可以直接在xml中进行添加TabItem。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.google.android.material.tabs.TabLayout</span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/tab_layout<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintStart_toStartOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">app:</span>tabTextColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/grey<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">app:</span>tabSelectedTextColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/colorAccent<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.google.android.material.tabs.TabItem</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.google.android.material.tabs.TabItem</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>com.google.android.material.tabs.TabLayout</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200508100706903.gif#pic_center" alt="tab item"></p><h2 id="TabLayout属性介绍"><a href="#TabLayout属性介绍" class="headerlink" title="TabLayout属性介绍"></a>TabLayout属性介绍</h2><p>TabLayout有很多属性可以供我们使用，下面简单介绍几个。</p><h3 id="tabIndicatorFullWidth"><a href="#tabIndicatorFullWidth" class="headerlink" title="tabIndicatorFullWidth"></a>tabIndicatorFullWidth</h3><p>上面的运行结果可以看到指示器的整个宽度是充满屏幕的，有时项目需要指示器线条的宽度和文字得宽度一致，那么就可以设置tabIndicatorFullWidth属性为false，默认为true<br><img src="https://img-blog.csdnimg.cn/20200506191431655.gif#pic_center" alt="在这里插入图片描述"></p><h3 id="tabRippleColor"><a href="#tabRippleColor" class="headerlink" title="tabRippleColor"></a>tabRippleColor</h3><p>默认点击每一个tab的时候，会出现渐变的背景色<br><img src="https://img-blog.csdnimg.cn/20200506192949908.gif#pic_center" alt="在这里插入图片描述"><br>如果想要去掉这个点击时的背景，可以通过设置tabRippleColor属性值为一个透明的背景色就可以了</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.google.android.material.tabs.TabLayout</span>        <span class="token attr-name">...</span>        <span class="token attr-name"><span class="token namespace">app:</span>tabRippleColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@android:color/transparent<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="tabTextAppearance"><a href="#tabTextAppearance" class="headerlink" title="tabTextAppearance"></a>tabTextAppearance</h3><p>有时候如果设计师需要我们实现，选中的tab文字字体加粗并放大字号，但是TabLayout并没有直接设置字体大小样式的属性，这时候就可以通过设置自定义属性tabTextAppearance来实现，其值是一个自定义style。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TabLayoutTheme<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android:textSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>16sp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android:textStyle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>bold<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.google.android.material.tabs.TabLayout</span>        <span class="token attr-name">...</span>        <span class="token attr-name"><span class="token namespace">app:</span>tabTextAppearance</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@style/TabLayoutTheme<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200506195139656.gif#pic_center" alt="appearance"><br>可以看到所有的tab字体都变了，不是我们想要的效果。TabLayout可以设置OnTabSelectedListener监听事件，可以通过选中状态的改变来动态的设置tab样式。下面看看具体的实现逻辑<br>创建一个tab_text_layout.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@android:id/text1<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在styles.xml中新建选中和未选中的style</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TabLayoutTextSelected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android:textSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>16sp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android:textStyle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>bold<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android:textColor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@color/colorAccent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TabLayoutTextUnSelected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android:textSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>14sp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android:textStyle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>normal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android:textColor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@color/grey<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后给TabLayout添加监听事件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">tabLayout<span class="token punctuation">.</span><span class="token function">addOnTabSelectedListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TabLayout<span class="token punctuation">.</span>OnTabSelectedListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTabSelected</span><span class="token punctuation">(</span><span class="token class-name">TabLayout<span class="token punctuation">.</span>Tab</span> tab<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">View</span> customView <span class="token operator">=</span> tab<span class="token punctuation">.</span><span class="token function">getCustomView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>customView <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             tab<span class="token punctuation">.</span><span class="token function">setCustomView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>tab_text_layout<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token class-name">TextView</span> textView <span class="token operator">=</span> tab<span class="token punctuation">.</span><span class="token function">getCustomView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span></span>R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>text1<span class="token punctuation">)</span><span class="token punctuation">;</span>         textView<span class="token punctuation">.</span><span class="token function">setTextAppearance</span><span class="token punctuation">(</span><span class="token class-name">TabActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>TabLayoutTextSelected<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTabUnselected</span><span class="token punctuation">(</span><span class="token class-name">TabLayout<span class="token punctuation">.</span>Tab</span> tab<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">View</span> customView <span class="token operator">=</span> tab<span class="token punctuation">.</span><span class="token function">getCustomView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>customView <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             tab<span class="token punctuation">.</span><span class="token function">setCustomView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>tab_text_layout<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token class-name">TextView</span> textView <span class="token operator">=</span> tab<span class="token punctuation">.</span><span class="token function">getCustomView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span></span>R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>text1<span class="token punctuation">)</span><span class="token punctuation">;</span>         textView<span class="token punctuation">.</span><span class="token function">setTextAppearance</span><span class="token punctuation">(</span><span class="token class-name">TabActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>TabLayoutTextUnSelected<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTabReselected</span><span class="token punctuation">(</span><span class="token class-name">TabLayout<span class="token punctuation">.</span>Tab</span> tab<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取tab中的CustomView，为空则设置成我们自己创建的tab_text_layout，然后找到textView的id，最后给textView设置TextAppearance属性。<br>这里需要注意的是textView的id必须是<code>android.R.id.text1</code>，因为从源码中可以看到CustomView获取的是android.R.id.text1。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TabLayout</span> <span class="token keyword">extends</span> <span class="token class-name">HorizontalScrollView</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TabView</span> <span class="token keyword">extends</span> <span class="token class-name">LinearLayout</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">final</span> <span class="token class-name">Tab</span> tab <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tab<span class="token punctuation">;</span>      <span class="token keyword">final</span> <span class="token class-name">View</span> custom <span class="token operator">=</span> tab <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> tab<span class="token punctuation">.</span><span class="token function">getCustomView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        customTextView <span class="token operator">=</span> custom<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span></span>R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>text1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一切修改完毕，重新运行看看效果：<br><img src="https://img-blog.csdnimg.cn/20200507144309934.gif#pic_center" alt="fail"><br>好像有效果了，但是还有点小问题，第一次进去的时候未选中的tab还是使用的默认样式，我们自定义的样式并没有生效，原因是未选中的tab并没有执行到OnTabSelectedListener中的onTabUnselected方法。解决办法是：只需要给TabLayout控件的tabTextAppearance属性设置一个初始的TabLayoutTextUnSelected样式即可。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.google.android.material.tabs.TabLayout</span><span class="token attr-name">...</span>    <span class="token attr-name"><span class="token namespace">app:</span>tabTextAppearance</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@style/TabLayoutTextUnSelected<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后再看看效果：<br><img src="https://img-blog.csdnimg.cn/20200507145026963.gif#pic_center" alt="success"></p><h3 id="tabMode"><a href="#tabMode" class="headerlink" title="tabMode"></a>tabMode</h3><p>tabMode属性用于设置tab是否可以横向滚动，可选的值有fixed(默认)、auto、scrollable。<br>为了看到更加明显的效果对比，这里又新增几个tab，当设置默认的fixed时，所有的tab都会挤到屏幕上显示<br><img src="https://img-blog.csdnimg.cn/20200507151138193.gif#pic_center" alt="fixed"><br>当设置scrollable时<br><img src="https://img-blog.csdnimg.cn/2020050715122054.gif#pic_center" alt="scrollable"><br>一般tab较少时使用fixed，tab较多时使用scrollable，视项目而定。</p><h3 id="tabIndicatorColor"><a href="#tabIndicatorColor" class="headerlink" title="tabIndicatorColor"></a>tabIndicatorColor</h3><p>这是属性设置指示器线条的颜色，没什么好讲的</p><h3 id="tabIndicatorHeight"><a href="#tabIndicatorHeight" class="headerlink" title="tabIndicatorHeight"></a>tabIndicatorHeight</h3><p>这个属性设置指示器的高度，如果我们不需要显示指示器，则可以通过设置tabIndicatorHeight等于0来实现<br><img src="https://img-blog.csdnimg.cn/202005071537246.gif#pic_center" alt="height is 0"></p><h3 id="tabIndicatorGravity"><a href="#tabIndicatorGravity" class="headerlink" title="tabIndicatorGravity"></a>tabIndicatorGravity</h3><p>这个属性可以设置指示器的显示位置，可选值有bottom(默认)、center、top、stretch。<br><strong>bottom</strong><br><img src="https://img-blog.csdnimg.cn/20200508095158160.gif#pic_center" alt="bottom"></p><p><strong>center</strong><br><img src="https://img-blog.csdnimg.cn/20200508095211987.gif#pic_center" alt="center"></p><p><strong>top</strong><br><img src="https://img-blog.csdnimg.cn/202005080952264.gif#pic_center" alt="top"></p><p><strong>stretch</strong><br><img src="https://img-blog.csdnimg.cn/20200508095239287.gif#pic_center" alt="stretch"><br>还有一些其他的属性，可以去<a href="https://developer.android.google.cn/reference/com/google/android/material/tabs/TabLayout?hl=en">官网</a>进行了解。</p><h2 id="给TabLayout设置间隔drawable"><a href="#给TabLayout设置间隔drawable" class="headerlink" title="给TabLayout设置间隔drawable"></a>给TabLayout设置间隔drawable</h2><p>TabLayout默认每个Tab之间是没有间隔的，实际项目中可能需要给每个Tab之间设置一个小竖线什么的，那么可以通过下面的方法来实现。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LinearLayout</span> linearLayout <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LinearLayout</span><span class="token punctuation">)</span> tabLayout<span class="token punctuation">.</span><span class="token function">getChildAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>linearLayout<span class="token punctuation">.</span><span class="token function">setShowDividers</span><span class="token punctuation">(</span><span class="token class-name">LinearLayout</span><span class="token punctuation">.</span>SHOW_DIVIDER_MIDDLE<span class="token punctuation">)</span><span class="token punctuation">;</span>linearLayout<span class="token punctuation">.</span><span class="token function">setDividerDrawable</span><span class="token punctuation">(</span><span class="token class-name">ContextCompat</span><span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>                <span class="token class-name">R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>layout_divider_vertical<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>自定义一个drawable文件，这里自定义一个线条<br>layout_divider_vertical.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shape</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>solid</span> <span class="token attr-name"><span class="token namespace">android:</span>color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#ff0000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>size</span> <span class="token attr-name"><span class="token namespace">android:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1dp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shape</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200508170421302.gif#pic_center" alt="在这里插入图片描述">可以看到线条的高度是充满了整个TabLayout的，如果我们需要让线条的高度短一点，则可以设置DividerPadding来实现。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LinearLayout</span> linearLayout <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LinearLayout</span><span class="token punctuation">)</span> tabLayout<span class="token punctuation">.</span><span class="token function">getChildAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>linearLayout<span class="token punctuation">.</span><span class="token function">setDividerPadding</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>运行结果如下：<br><img src="https://img-blog.csdnimg.cn/20200508170643694.gif#pic_center" alt="在这里插入图片描述">好了，TabLayout的基本使用就这些了。文章中如有错误的地方，还望指出！</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android获取控件宽高的几种方式</title>
      <link href="/AndroidGetWidthHeight/"/>
      <url>/AndroidGetWidthHeight/</url>
      
        <content type="html"><![CDATA[<h3 id="Android获取控件宽高的几种方式"><a href="#Android获取控件宽高的几种方式" class="headerlink" title="Android获取控件宽高的几种方式"></a>Android获取控件宽高的几种方式</h3><p>获取控件的宽高直接使用view的getWidth() 和 getHeight()方法获取。<br>但是直接在Activity的onCreate() 或 onResume()中获取的宽高为0。<br>原因是Activity的启动流程和布局文件的加载流程是2个异步的过程，在onCreate或onResume的时候控件还没有绘制完成，因此直接通过getWidth() 和 getHeight()获取的宽、高为0，下面给出几种方式来实现view宽高的获取。</p><h5 id="定义获取宽高方法"><a href="#定义获取宽高方法" class="headerlink" title="定义获取宽高方法"></a>定义获取宽高方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 以textView为例获取控件宽、高 */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">getTextWidthAndHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> width <span class="token operator">=</span> textView<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> height <span class="token operator">=</span> textView<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"width:"</span> <span class="token operator">+</span> width <span class="token operator">+</span> <span class="token string">", height:"</span> <span class="token operator">+</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="第一种方式：在需要时获取，如控件点击时再获取"><a href="#第一种方式：在需要时获取，如控件点击时再获取" class="headerlink" title="第一种方式：在需要时获取，如控件点击时再获取"></a>第一种方式：在需要时获取，如控件点击时再获取</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">button<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">getTextWidthAndHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="第二种方式：重写onWindowFocusChanged-方法"><a href="#第二种方式：重写onWindowFocusChanged-方法" class="headerlink" title="第二种方式：重写onWindowFocusChanged()方法"></a>第二种方式：重写onWindowFocusChanged()方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onWindowFocusChanged</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> hasFocus<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onWindowFocusChanged</span><span class="token punctuation">(</span>hasFocus<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>hasFocus<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">getTextWidthHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是，这个方法可能会执行多次，比如锁屏，切到后台等重新进入时都会执行该方法。</p><h5 id="第三种方式：添加OnPreDrawListener事件监听"><a href="#第三种方式：添加OnPreDrawListener事件监听" class="headerlink" title="第三种方式：添加OnPreDrawListener事件监听"></a>第三种方式：添加OnPreDrawListener事件监听</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDecorView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getViewTreeObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addOnPreDrawListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ViewTreeObserver<span class="token punctuation">.</span>OnPreDrawListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onPreDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token function">getTextWidthHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDecorView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getViewTreeObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeOnPreDrawListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="第四种方式：添加OnGlobalLayoutListener事件监听"><a href="#第四种方式：添加OnGlobalLayoutListener事件监听" class="headerlink" title="第四种方式：添加OnGlobalLayoutListener事件监听"></a>第四种方式：添加OnGlobalLayoutListener事件监听</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDecorView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getViewTreeObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addOnGlobalLayoutListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ViewTreeObserver<span class="token punctuation">.</span>OnGlobalLayoutListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      @Override      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onGlobalLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token function">getTextWidthHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDecorView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getViewTreeObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeOnGlobalLayoutListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="第五种方式：post-Runnable方式"><a href="#第五种方式：post-Runnable方式" class="headerlink" title="第五种方式：post Runnable方式"></a>第五种方式：post Runnable方式</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">textView<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">getTextWidthHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetViewHeightActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Button</span> testView<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">TextView</span> tvHeightWidthInfo<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> info <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_get_view_height<span class="token punctuation">)</span><span class="token punctuation">;</span>        testView <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>view_test<span class="token punctuation">)</span><span class="token punctuation">;</span>        tvHeightWidthInfo <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_height_width_info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getHeightWidth</span><span class="token punctuation">(</span><span class="token string">"Default"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">onPreView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">onGlobalLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">postRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//点击按钮的时候再获取</span>        testView<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">getHeightWidth</span><span class="token punctuation">(</span><span class="token string">"onClick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取view宽高     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">getHeightWidth</span><span class="token punctuation">(</span><span class="token class-name">String</span> tag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> height <span class="token operator">=</span> testView<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> width <span class="token operator">=</span> testView<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info <span class="token operator">+=</span> tag <span class="token operator">+</span> <span class="token string">" width:"</span> <span class="token operator">+</span> width <span class="token operator">+</span> <span class="token string">", height:"</span> <span class="token operator">+</span> height <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>        tvHeightWidthInfo<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     *  重写onWindowFocusChanged()方法     * @param hasFocus 当前页面是否有焦点     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onWindowFocusChanged</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> hasFocus<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onWindowFocusChanged</span><span class="token punctuation">(</span>hasFocus<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasFocus<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">getHeightWidth</span><span class="token punctuation">(</span><span class="token string">"onWindowFocusChanged"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * OnPreDrawListener事件监听     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">onPreView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDecorView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getViewTreeObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addOnPreDrawListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ViewTreeObserver<span class="token punctuation">.</span>OnPreDrawListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onPreDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">getHeightWidth</span><span class="token punctuation">(</span><span class="token string">"OnPreView"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDecorView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getViewTreeObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeOnPreDrawListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * OnGlobalLayoutListener事件监听     * 最低支持Api 16     */</span>    <span class="token annotation punctuation">@TargetApi</span><span class="token punctuation">(</span><span class="token class-name">Build</span><span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>JELLY_BEAN<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">onGlobalLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDecorView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getViewTreeObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addOnGlobalLayoutListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ViewTreeObserver<span class="token punctuation">.</span>OnGlobalLayoutListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onGlobalLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">getHeightWidth</span><span class="token punctuation">(</span><span class="token string">"OnGlobalLayout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDecorView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getViewTreeObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeOnGlobalLayoutListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * post Runnable方式     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">postRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        tvHeightWidthInfo<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">getHeightWidth</span><span class="token punctuation">(</span><span class="token string">"PostRunnable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="布局文件R-layout-activity-get-view-height"><a href="#布局文件R-layout-activity-get-view-height" class="headerlink" title="布局文件R.layout.activity_get_view_height"></a>布局文件R.layout.activity_get_view_height</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.constraintlayout.widget.ConstraintLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>padding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>12dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.GetViewHeightActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/view_test<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>85dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test view<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/tv_height_width_info<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>16sp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toBottomOf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/view_test<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.constraintlayout.widget.ConstraintLayout</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="结果截图"><a href="#结果截图" class="headerlink" title="结果截图"></a>结果截图</h5><p><img src="https://img-blog.csdnimg.cn/2019101503265465.gif" alt="示例"></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android百分比透明度与十六进制值的转换</title>
      <link href="/AndroidAlphaToHexadecimal/"/>
      <url>/AndroidAlphaToHexadecimal/</url>
      
        <content type="html"><![CDATA[<p>很多时候，UI设计师给我们的设计稿上面，对于有透明度变化的UI一般都以百分比的形式告诉我们（比如下面的图片中遮罩背景不透明度为70%），但是这个百分比对应的十六进制alpha值到底是多少呢？下面我们通过代码来实现百分比到十六进制值的转换。</p><p><img src="https://img-blog.csdnimg.cn/20191010114411854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">printAlpha</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">double</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">-=</span> <span class="token number">0.01</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//透明度转成alpha值</span>        <span class="token keyword">int</span> alpha <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//alpha值转成16进制</span>        <span class="token class-name">String</span> hex <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>alpha<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hex<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            hex <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token operator">+</span> hex<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> percent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%d%%  | %s"</span><span class="token punctuation">,</span> percent<span class="token punctuation">,</span> hex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写个单元测试验证一下打印结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleUnitTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token function">printAlpha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果如下：</p><table><thead><tr><th>百分比</th><th>十六进制alpha值</th></tr></thead><tbody><tr><td>100%</td><td>FF</td></tr><tr><td>99%</td><td>FC</td></tr><tr><td>98%</td><td>FA</td></tr><tr><td>97%</td><td>F7</td></tr><tr><td>96%</td><td>F5</td></tr><tr><td>95%</td><td>F2</td></tr><tr><td>94%</td><td>F0</td></tr><tr><td>93%</td><td>ED</td></tr><tr><td>92%</td><td>EB</td></tr><tr><td>91%</td><td>E8</td></tr><tr><td>90%</td><td>E6</td></tr><tr><td>89%</td><td>E3</td></tr><tr><td>88%</td><td>E0</td></tr><tr><td>87%</td><td>DE</td></tr><tr><td>86%</td><td>DB</td></tr><tr><td>85%</td><td>D9</td></tr><tr><td>84%</td><td>D6</td></tr><tr><td>83%</td><td>D4</td></tr><tr><td>82%</td><td>D1</td></tr><tr><td>81%</td><td>CF</td></tr><tr><td>80%</td><td>CC</td></tr><tr><td>79%</td><td>C9</td></tr><tr><td>78%</td><td>C7</td></tr><tr><td>77%</td><td>C4</td></tr><tr><td>76%</td><td>C2</td></tr><tr><td>75%</td><td>BF</td></tr><tr><td>74%</td><td>BD</td></tr><tr><td>73%</td><td>BA</td></tr><tr><td>72%</td><td>B8</td></tr><tr><td>71%</td><td>B5</td></tr><tr><td>70%</td><td>B3</td></tr><tr><td>69%</td><td>B0</td></tr><tr><td>68%</td><td>AD</td></tr><tr><td>67%</td><td>AB</td></tr><tr><td>66%</td><td>A8</td></tr><tr><td>65%</td><td>A6</td></tr><tr><td>64%</td><td>A3</td></tr><tr><td>63%</td><td>A1</td></tr><tr><td>62%</td><td>9E</td></tr><tr><td>61%</td><td>9C</td></tr><tr><td>60%</td><td>99</td></tr><tr><td>59%</td><td>96</td></tr><tr><td>58%</td><td>94</td></tr><tr><td>57%</td><td>91</td></tr><tr><td>56%</td><td>8F</td></tr><tr><td>55%</td><td>8C</td></tr><tr><td>54%</td><td>8A</td></tr><tr><td>53%</td><td>87</td></tr><tr><td>52%</td><td>85</td></tr><tr><td>51%</td><td>82</td></tr><tr><td>50%</td><td>80</td></tr><tr><td>49%</td><td>7D</td></tr><tr><td>48%</td><td>7A</td></tr><tr><td>47%</td><td>78</td></tr><tr><td>46%</td><td>75</td></tr><tr><td>45%</td><td>73</td></tr><tr><td>44%</td><td>70</td></tr><tr><td>43%</td><td>6E</td></tr><tr><td>42%</td><td>6B</td></tr><tr><td>41%</td><td>69</td></tr><tr><td>40%</td><td>66</td></tr><tr><td>39%</td><td>63</td></tr><tr><td>38%</td><td>61</td></tr><tr><td>37%</td><td>5E</td></tr><tr><td>36%</td><td>5C</td></tr><tr><td>35%</td><td>59</td></tr><tr><td>34%</td><td>57</td></tr><tr><td>33%</td><td>54</td></tr><tr><td>32%</td><td>52</td></tr><tr><td>31%</td><td>4F</td></tr><tr><td>30%</td><td>4D</td></tr><tr><td>29%</td><td>4A</td></tr><tr><td>28%</td><td>47</td></tr><tr><td>27%</td><td>45</td></tr><tr><td>26%</td><td>42</td></tr><tr><td>25%</td><td>40</td></tr><tr><td>24%</td><td>3D</td></tr><tr><td>23%</td><td>3B</td></tr><tr><td>22%</td><td>38</td></tr><tr><td>21%</td><td>36</td></tr><tr><td>20%</td><td>33</td></tr><tr><td>19%</td><td>30</td></tr><tr><td>18%</td><td>2E</td></tr><tr><td>17%</td><td>2B</td></tr><tr><td>16%</td><td>29</td></tr><tr><td>15%</td><td>26</td></tr><tr><td>14%</td><td>24</td></tr><tr><td>13%</td><td>21</td></tr><tr><td>12%</td><td>1F</td></tr><tr><td>11%</td><td>1C</td></tr><tr><td>10%</td><td>1A</td></tr><tr><td>9%</td><td>17</td></tr><tr><td>8%</td><td>14</td></tr><tr><td>7%</td><td>12</td></tr><tr><td>6%</td><td>0F</td></tr><tr><td>5%</td><td>0D</td></tr><tr><td>4%</td><td>0A</td></tr><tr><td>3%</td><td>08</td></tr><tr><td>2%</td><td>05</td></tr><tr><td>1%</td><td>03</td></tr><tr><td>0%</td><td>00</td></tr></tbody></table><p>所以我们可以知道黑色的70%透明度在Android中可以用<code>#B3000000</code>表示（#AARRGGBB，A表示透明度、R表示红色通道、G表示绿色通道、B表示蓝色通道）</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发环境搭建</title>
      <link href="/AndroidDevelopEnvironment/"/>
      <url>/AndroidDevelopEnvironment/</url>
      
        <content type="html"><![CDATA[<h3 id="Android开发环境搭建"><a href="#Android开发环境搭建" class="headerlink" title="Android开发环境搭建"></a>Android开发环境搭建</h3><p>android开发环境搭建需要如下配置:   </p><ul><li>JDK(Java Development Kit)、   </li><li>Android Studio工具   </li></ul><p>下面就来一步步实现：</p><h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><p>Android系统底层内核是基于Linux系统开发的，但是API框架是使用Java语言编写的，Java提供了运行环境、java工具以及基础的类库，所以JDK在Android开发中必不可少。下面的图可以看出每一个项目中必须要有JDK和SDK。<br><img src="https://img-blog.csdnimg.cn/20191003112404114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h6><p>Java语言是SUN公司开发的，而SUN公司在2009年时被甲骨文公司（Oracle）以74亿美元收购了，所以现在Java属于Oracle了，我们可以在<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html">Oracle官网</a>下载最新的Java版本，Java有ME、SE、EE等不同的版本服务不同的场景，我们下载Java SE版本即可：<br><img src="https://img-blog.csdnimg.cn/20191003113822504.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">点击DOWNLOAD根据自己的电脑系统下载对应平台的安装包<br><img src="https://img-blog.csdnimg.cn/20191003114311660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="安装JDK-1"><a href="#安装JDK-1" class="headerlink" title="安装JDK"></a>安装JDK</h6><p>下载完成之后，直接双击安装即可，默认安装在C:\Program Files\Java\jdk1.8.0_151\目录下，可以自己修改安装路径，这里我修改为D:\jdk1.8.0_151.<br><img src="https://img-blog.csdnimg.cn/20191003115323263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h5><p>直接点下一步安装完成，然后需要设置环境变量，我们就可以使用命令行工具来编译和执行ava程序。<br><strong>Windows系统设置环境变量：</strong><br>控制面板 -&gt; 系统 -&gt; 高级系统设置  -&gt;  高级 -&gt; 环境变量 -&gt; 系统变量</p><ul><li>新建系统变量：变量名：<code>JAVA_HOME</code>；变量值：<code>D:\jdk1.8.0_151</code>   </li><li>编辑Path变量：在末尾添加<code>%JAVA_HOME%\bin;%JAVA_HOME%\jre;</code></li></ul><p><img src="https://img-blog.csdnimg.cn/20191003144500581.gif" alt="在这里插入图片描述"><br>然后开始 -&gt; 运行 -&gt; 输入cmd(Windows + R -&gt; 输入cmd)打开命令行窗口，输入<br><code>java -version</code> 显示如下图则说明环境变量配置正确<br><img src="https://img-blog.csdnimg.cn/20191003150730767.png" alt="在这里插入图片描述"><br><strong>Mac平台配置环境变量：</strong><br>下载Mac系统的jdk，点击安装，然后打开终端（cmd + 空格输入terminal）<br>打开配置文件.bash_profile（<code>open -e .bash_profile</code>），如果文件不存在则使用<code>touch .bash_profile</code>命令创建文件。<br>输入如下配置然后保存关闭文件：</p><pre class="line-numbers language-none"><code class="language-none">JAVA_HOME&#x3D;&#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachinesjdk1.8.0_151.jdk&#x2F;Contents&#x2F;HomePATH&#x3D;$JAVA_HOME&#x2F;bin:$JAVA_HOME&#x2F;jre:$PATH:.CLASSPATH&#x3D;$JAVA_HOME&#x2F;lib&#x2F;tools.jar:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:.export JAVA_HOMEexport PATHexport CLASSPATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在终端执行<code>source .bash_profile</code>命令使配置文件生效<br>可以使用<code>echo $JAVA_HOME</code>查看刚刚配置的环境变量<br>使用<code>java -version</code>查看jdk版本号，如果能打印出下面信息说明环境变量配置成功</p><pre class="line-numbers language-none"><code class="language-none">java version &#39;1.8.0_151&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装Android-Studio"><a href="#安装Android-Studio" class="headerlink" title="安装Android Studio"></a>安装Android Studio</h3><p>我们可以在<a href="https://developer.android.google.cn/studio?hl=zh_cn">Android开发者官网</a>下载最新的Android Studio稳定版本3.5.1<br><img src="https://img-blog.csdnimg.cn/20191009115336294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后直接点击安装即可，这里我选择安装到D:\Android Studio目录，安装完成之后运行Android Studio。<br><img src="https://img-blog.csdnimg.cn/20191009145844660.gif" alt="Android Studio安装流程"><br>首次打开的页面是下面这样子的<br><img src="https://img-blog.csdnimg.cn/20191009144131619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们现在还没有下载Android开发必须的SDK，第一次打开Android Studio时系统会检测我们本地是否有下载SDK，如果没有则会提示我们下载：<br><img src="https://img-blog.csdnimg.cn/20191009144433509.gif" alt="在这里插入图片描述">等待下载完成自动解压之后就可以在设置页面看到我们已经下载SDK版本及SDK本地路径。我们还可以在这里下载需要的其他SDK版本<br><img src="https://img-blog.csdnimg.cn/20191009145506778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="SDK"><br>有些时候在公司上外网需要设置代理则会出现下面的错误：<br><img src="https://img-blog.csdnimg.cn/20191009144611258.png" alt="SDK代理设置"><br>则我们需要打开设置（Configure -&gt; Settings -&gt; Appearance -&gt; System Settings -&gt; HTTP Proxy）设置代理再下载SDK即可<br><img src="https://img-blog.csdnimg.cn/20191009145317752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="proxy"></p><h3 id="开启Android世界的大门"><a href="#开启Android世界的大门" class="headerlink" title="开启Android世界的大门"></a>开启Android世界的大门</h3><p>到此我们所有的Android开发环境就安装完成了。下面就可以新建一个项目了，我们选择Start a new Android Studio project创建一个新的工程</p><blockquote><p>我们还可以选择<code>Open an existing Android Studio project</code>打开一个本地已经存在的项目；<br>也可以点击<code>Check out project from Version Control</code>从远程版本管理库（SVN、Git等）clone一个项目；<br>或者点击<code>Import project（Gradle，Eclipse ADT，etc）</code>导入Eclipse等项目</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20191009150345133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="new project"><img src="https://img-blog.csdnimg.cn/20191009151906808.gif" alt="在这里插入图片描述">上图中可以看到有很多场景</p><ul><li>Phone And Tablet  手机和平板应用</li><li>Wear OS                穿戴设备智能手表</li><li>TV                          智能电视应用</li><li>Android Auto          车载设备应用</li><li>Android Things       嵌入式设备应用</li></ul><p>针对不同场景选择不同的模板，可以看到Google给我们提供了很多模板，这里我们选择新建一个Empty activity<br>然后输入项目名、包名、以及项目路径。选择开发语言，Android Studio 3.2以上的默认选择kotlin语言，我们根据自己需要选择java或kotlin进行开发。<br>之后再选择我们的应用支持的最低手机系统，可以看到google最低支持到Android 4.0，那么4.0以下的手机是使用不了我们的应用的，但是现在基本上也不会有4.0以下的手机了。<br>最后直接点Finish等待项目配置编译成功。<br><img src="https://img-blog.csdnimg.cn/20191009155703735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">下面就用USB连接我们的开发手机，安装项目到手机上。<br><img src="https://img-blog.csdnimg.cn/20191009162306240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">上图中可以看到我已经连接上了我的红米4手机，点击右边的绿色三角形图标即可运行。<br>新手可能发现用USB连接手机之后，上面并没有出现连接的设备，是因为还需要在手机上打开开发者选项中的USB调试开关，很多手机默认设置里面是隐藏开发者选项的，我们通过关于手机 -&gt; 连按5次Android版本号（有的是MIUI版本号、Flyme版本号等，不同手机系统可能不一致）；然后可以在更多设置（有的在辅助功能等，不同手机系统可能位置不同）中找到开发者选项并打开USB调试和USB安装开关。（注：小米手机USB安装默认是打不开的，需要插入SIM卡才能打开，这也是一个坑啊）<br>下面是我的Redmi Note 4X示例，我已经打开了USB调试并在录制视频，所以不能关掉，这里只是看看操作流程：<br><img src="https://img-blog.csdnimg.cn/20191009163516651.gif" alt="在这里插入图片描述"><br>由于我的测试机没有装SIM卡，所以不能直接点绿色三角形进行安装，我们可以先build apk打好包拷贝到手机里面安装运行，或者使用模拟器进行安装。<br><img src="https://img-blog.csdnimg.cn/20191009165650998.gif" alt="在这里插入图片描述">最终在手机上的运行结果<br><img src="https://img-blog.csdnimg.cn/20191009170058127.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>小技巧：</strong> 我们可以使用Android Studio工具对手机进行截图和录屏<br><img src="https://img-blog.csdnimg.cn/20191009170411355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin开发效率提升技巧—扩展函数</title>
      <link href="/KotlinExtensionsFunction/"/>
      <url>/KotlinExtensionsFunction/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是扩展函数？"><a href="#什么是扩展函数？" class="headerlink" title="什么是扩展函数？"></a>什么是扩展函数？</h3><p>在介绍什么是Kotlin的扩展函数之前，先来看一个具体的例子。<br>在日常Android任务开发中，一般在设置View的尺寸时都应该使用<strong>dp</strong>值，但是View系统底层都是使用的<strong>px</strong>值来进行计算的，所以需要把dp值转成对应的px值。<br>在Java中，可以写一个dp转px的工具类，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Util</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">dp2px</span><span class="token punctuation">(</span><span class="token keyword">float</span> dpValue<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token class-name">TypedValue</span><span class="token punctuation">.</span><span class="token function">applyDimension</span><span class="token punctuation">(</span><span class="token class-name">TypedValue</span><span class="token punctuation">.</span>COMPLEX_UNIT_DIP<span class="token punctuation">,</span>dpValue<span class="token punctuation">,</span>context<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后，在需要dp转px的地方调用如下方法就可以了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">float</span> pxValue <span class="token operator">=</span> <span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">dp2px</span><span class="token punctuation">(</span><span class="token number">20f</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这也是在Java中最常规的操作了，现在使用Kotlin之后，同样也可以定义一个一模一样的工具类进行数值转换，但是Kotlin中有更加优雅的写法。<br>新建一个Extensions.kt文件，编写如下代码：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> Float<span class="token punctuation">.</span><span class="token function">dp2px</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">:</span> Float <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> TypedValue<span class="token punctuation">.</span><span class="token function">applyDimension</span><span class="token punctuation">(</span>        TypedValue<span class="token punctuation">.</span>COMPLEX_UNIT_DIP<span class="token punctuation">,</span>        <span class="token keyword">this</span><span class="token punctuation">,</span>        context<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>displayMetrics    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，使用下面的写法就可以进行dp转px了</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> pxValue <span class="token operator">=</span> <span class="token number">20f</span><span class="token punctuation">.</span><span class="token function">dp2px</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Kotlin扩展函数的基本结构如下：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> ClassName<span class="token punctuation">.</span><span class="token function">methodName</span><span class="token punctuation">(</span>param<span class="token operator">:</span> ParamType<span class="token punctuation">)</span> <span class="token operator">:</span> ReturnType <span class="token punctuation">&#123;</span>    <span class="token comment">// 具体实现</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>ClassName就是实际调用该方法的具体类的类型</li><li>methodName是方法的名称</li><li>param是方法传入的参数，可以为空，也可以有多个</li><li>ReturnType是方法的返回值类型，可以是任意类型</li></ul><p>相比于定义一个普通的函数，定义扩展函数只需要在函数名的前面加上一个<strong>ClassName.</strong> 的语法结构，就表示将该函数添加到指定类当中了。<br>另外，扩展函数是一个顶层函数，可以将它写在任意一个类中，一般就以ClassName名称新建一个文件，编写跟这个类相关的扩展函数，或者建一个统一管理扩展函数的文件，比如Extensions.kt。</p><h3 id="扩展函数的本质"><a href="#扩展函数的本质" class="headerlink" title="扩展函数的本质"></a>扩展函数的本质</h3><p> 上面的kotlin扩展函数的这种写法给人感觉就是Float这个类中有一个dp2px方法，那么Kotlin是如何实现的这个神奇功能呢，我们看看这个Extensions.kt文件的kotlin字节码反编译成Java语言后都干了些啥。<br> 具体查看步骤：Android Studio的Tools菜单栏 -&gt; Kotlin -&gt; Show Kotlin Bytecode -&gt; 然后Kotlin Bytecode面板上点击Decompile按钮就可以如下代码（已简化）：<br> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ExtensionsKt</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token function">dp2px</span><span class="token punctuation">(</span><span class="token keyword">float</span> $<span class="token keyword">this</span>$dp2px<span class="token punctuation">,</span> <span class="token annotation punctuation">@NotNull</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Resources</span> var10002 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token class-name">TypedValue</span><span class="token punctuation">.</span><span class="token function">applyDimension</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> $<span class="token keyword">this</span>$dp2px<span class="token punctuation">,</span> var10002<span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>可以看到反编译之后的Java代码，其实就是在ExtensionsKt类中定义了一个<strong>static final</strong>方法，上面写的<code>20f.dp2px(context)</code> 就是调用的这个方法，而Float类中并不存在dp2px方法，我们也不可能去修改Float类。我们发现反编译的java函数比我们定义的扩展函数，多了一个float参数，这个参数的类型正是定义扩展函数时的ClassName类型，调用时相当于把20f作为参数传入了静态方法，这样做，一是限定了调用该扩展函数的调用者类型，二是为扩展函数内部计算提供了该对象数据。</p><p>对于扩展函数还需要注意以下两点。<br><strong>一、扩展函数是静态解析的，是采用静态分派的过程来处理</strong><br>这是说调用的扩展函数是由函数调用所在的表达式的类型（定义时的ClassName）来决定的， 而不是由表达式运行时求值结果决定的。如果类本身和其子类都进行了同一个函数的扩展，这函数是不会有重写关系的，在使用的时候，只会根据需要使用该方法的对象的实际类型来决定是调用了哪个扩展函数。<br>比如下面的代码：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">open</span> <span class="token keyword">class</span> Shape<span class="token keyword">class</span> Rectangle<span class="token operator">:</span> <span class="token function">Shape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">fun</span> Shape<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"Shape"</span><span class="token keyword">fun</span> Rectangle<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"Rectangle"</span><span class="token keyword">fun</span> <span class="token function">printClassName</span><span class="token punctuation">(</span>s<span class="token operator">:</span> Shape<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">printClassName</span><span class="token punctuation">(</span><span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果会打印“Shape”，相当于是调用了Shape类中的静态方法，子类并不会影响父类。</p><p><strong>二、如果一个类中定义了一个和成员函数一模一样的扩展函数，那么调用的时候始终会调用成员函数。</strong><br>就是说一个类中定义了一个函数，然后又定义了一个和这个成员函数一样结构的扩展函数，调用的时候将不会调用到扩展函数，举个例子</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Example <span class="token punctuation">&#123;</span>    <span class="token keyword">fun</span> <span class="token function">printFunctionType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Class method"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fun</span> Example<span class="token punctuation">.</span><span class="token function">printFunctionType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Extension function"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token comment">// 调用方法</span><span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">printFunctionType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码执行结果会打印”Class method”</p><h3 id="更优雅的写法"><a href="#更优雅的写法" class="headerlink" title="更优雅的写法"></a>更优雅的写法</h3><p>对于上面dp转px的方法，其实还可以进一步优化，可以定义一个顶层属性。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> Float<span class="token punctuation">.</span>dp    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> TypedValue<span class="token punctuation">.</span><span class="token function">applyDimension</span><span class="token punctuation">(</span>        TypedValue<span class="token punctuation">.</span>COMPLEX_UNIT_DIP<span class="token punctuation">,</span>        <span class="token keyword">this</span><span class="token punctuation">,</span>        Resources<span class="token punctuation">.</span><span class="token function">getSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>displayMetrics    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义了一个dp属性，然后将dp转px的结果赋值给它的get方法，最后调用的时候只需要像下面这种方式写就可以了。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> pxValue <span class="token operator">=</span> <span class="token number">20f</span><span class="token punctuation">.</span>dp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种写法是不是非常简洁！<br>这里有个小技巧，我们将传入参数Context来获取Resources的方式改为了<strong>Resources.getSystem()</strong> 的方式，这样就不用每次调用时传入一个context对象了，通过Resources.getSystem()获取的Resources不能用来获取App应用相关的东西，比如包名，但是获取手机系统相关的数据还是可以的，因为这里只需要用到displayMetrics，所以用这种方式获取Resources完全没问题。<br>其实这种顶层属性的写法同样也是会生成一个静态方法，看下反编译之后的Java代码就明白了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ExtensionsKt</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token function">getDp</span><span class="token punctuation">(</span><span class="token keyword">float</span> $<span class="token keyword">this</span>$dp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Resources</span> var10002 <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Intrinsics</span><span class="token punctuation">.</span><span class="token function">checkNotNullExpressionValue</span><span class="token punctuation">(</span>var10002<span class="token punctuation">,</span> <span class="token string">"Resources.getSystem()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token class-name">TypedValue</span><span class="token punctuation">.</span><span class="token function">applyDimension</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> $<span class="token keyword">this</span>$dp<span class="token punctuation">,</span> var10002<span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过这种方法，我们同样可以定义许多其他的扩展函数，sp转px，px转dp，px转sp等，Kotlin也给我们内置了很多实用的扩展函数。</p><h3 id="Kotlin内置扩展函数"><a href="#Kotlin内置扩展函数" class="headerlink" title="Kotlin内置扩展函数"></a>Kotlin内置扩展函数</h3><p>Google给我们提供了非常多的扩展函数，这些函数都包含在KTX扩展库中，这个扩展库会在Android Studio创建项目的时候自动引入到build.gradle的dependencies中。</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">implementation <span class="token string gstring">"androidx.core:core-ktx:1.3.2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/ae2cc0d236db4a09898220b8c34d3786.png" alt="core-ktv"><br>如果能利用好扩展函数这个功能，将会大幅度地提升你的代码质量和开发效率。<br>简单举几个例子：<br><strong>1、关闭文件流</strong></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> output <span class="token operator">=</span> <span class="token function">openFileOutput</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> Context<span class="token punctuation">.</span>MODE_PRIVATE<span class="token punctuation">)</span><span class="token keyword">val</span> writer <span class="token operator">=</span> <span class="token function">BufferedWriter</span><span class="token punctuation">(</span><span class="token function">OutputStreamWriter</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span>writer<span class="token punctuation">.</span><span class="token function">use</span> <span class="token punctuation">&#123;</span>it<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>inputText<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用了一个use内置扩展函数。它是一个实现Closeable接口的对象可以使用的扩展函数，它会保证在Lambda表达式中的代码全部执行完之后自动将外层的流关闭，这样就不需要我们再编写一个finally语句，手动去关闭流了，是一个非常好用的扩展函数。</p><p><strong>2、监听TextView文本内容变化</strong></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">edittext<span class="token punctuation">.</span><span class="token function">doBeforeTextChanged</span><span class="token punctuation">&#123;</span> text<span class="token punctuation">,</span> start<span class="token punctuation">,</span> count<span class="token punctuation">,</span> after <span class="token operator">-></span> <span class="token punctuation">&#125;</span>edittext<span class="token punctuation">.</span><span class="token function">doOnTextChanged</span> <span class="token punctuation">&#123;</span> text<span class="token punctuation">,</span> start<span class="token punctuation">,</span> before<span class="token punctuation">,</span> count <span class="token operator">-></span> <span class="token punctuation">&#125;</span>edittext<span class="token punctuation">.</span><span class="token function">doAfterTextChanged</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以很方便实现对TextView的文本内容改变进行监听</p><p><strong>3、SharePreferences保存数据</strong><br>在不使用扩展函数的情况下</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> editor <span class="token operator">=</span> <span class="token function">getSharedPreferences</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> Context<span class="token punctuation">.</span>MODE_PRIVATE<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>editor<span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span>editor<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>editor<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用了扩展函数之后，edit函数会自动完成提交操作</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">getSharedPreferences</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> Context<span class="token punctuation">.</span>MODE_PRIVATE<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">edit</span> <span class="token punctuation">&#123;</span><span class="token function">putString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin扩展函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin作用域函数--let、with、run、apply、also</title>
      <link href="/KotlinScopeFunction/"/>
      <url>/KotlinScopeFunction/</url>
      
        <content type="html"><![CDATA[<h2 id="Kotlin作用域函数"><a href="#Kotlin作用域函数" class="headerlink" title="Kotlin作用域函数"></a>Kotlin作用域函数</h2><p>Kotlin 提供了一系列用来在给定对象上下文中执行代码块的函数，包括let、with、run、apply、also。每个库函数都有它的实际应用场景，使用它们能让你的代码会更具有可读性、更优雅、更简洁。善于合理使用标准库函数，也是衡量对Kotlin掌握程度标准之一。 下面是每个函数的基本用法和适用场景，最后对他们进行对比总结以及在实际编码中该如何选择哪个函数。</p><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>let函数只接收一个Lambda参数，并且会在Lambda表达式中提供调用对象的上下文it。返回值为函数块的最后一行或指定return表达式。</p><p><strong>底层内联结构：</strong></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token label symbol">@kotlin</span><span class="token punctuation">.</span>internal<span class="token punctuation">.</span>InlineOnly<span class="token keyword">public</span> <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> T<span class="token punctuation">.</span><span class="token function">let</span><span class="token punctuation">(</span>block<span class="token operator">:</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">-></span> R<span class="token punctuation">)</span><span class="token operator">:</span> R <span class="token operator">=</span> <span class="token function">block</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>语法结构：</strong></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> result <span class="token operator">=</span> obj<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">&#123;</span> <span class="token comment">// it指代obj的上下文</span>it<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// let函数的返回值 </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>let的适用场景：</strong></p><p>使用let函数处理需要针对一个可null的对象统一做判空处理。</p><h3 id="with"><a href="#with" class="headerlink" title="with"></a>with</h3><p>with函数接收两个参数： 第一个参数可以是一个任意类型的对象， 第二个参数是一个Lambda表达式。</p><p>with函数会在Lambda表达式中提供第一个参数对象的上下文，并使用Lambda表达式中的最后一行代码或return语句作为返回值返回。</p><p><strong>底层内联结构：</strong></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token label symbol">@kotlin</span><span class="token punctuation">.</span>internal<span class="token punctuation">.</span>InlineOnly<span class="token keyword">public</span> <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">with</span><span class="token punctuation">(</span>receiver<span class="token operator">:</span> T<span class="token punctuation">,</span> block<span class="token operator">:</span> T<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> R<span class="token punctuation">)</span><span class="token operator">:</span> R <span class="token operator">=</span> receiver<span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>语法结构：</strong></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">with</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这里是obj的上下文 "value" </span>   <span class="token comment">// with函数的返回值 </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>with的适用场景：</strong></p><p>适用于调用同一个类的多个方法时，可以省去类名重复，直接调用类的方法即可，经常用于Android中RecyclerView中onBinderViewHolder中，数据model的属性映射到UI上。</p><p>例：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">with</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>holder<span class="token punctuation">.</span>tvTitle<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">"标题: <span class="token interpolation variable">$title</span>"</span>holder<span class="token punctuation">.</span>tvDescription <span class="token operator">=</span> <span class="token string">"描述: <span class="token interpolation variable">$description</span>"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在with块中可以直接访问item的实例的公有属性和方法。</p><h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><p>run函数的用法和使用场景其实和with函数是非常类似的，只是稍微做了一些语法改动而已。</p><p>首先run函数是不能直接调用的，而是一定要调用某个对象的run函数才行；</p><p>其次run函数只接收一个Lambda参数，并且会在Lambda表达式中提供调用对象的上下文。</p><p>其他方面和with函数是一样的，包括也会使用Lambda表达式中的最后一行代码或者return表达式作为返回值返回，run函数实际上可以说是let和with两个函数的结合体。 </p><p><strong>底层内联结构：</strong></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token label symbol">@kotlin</span><span class="token punctuation">.</span>internal<span class="token punctuation">.</span>InlineOnly<span class="token keyword">public</span> <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> T<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>block<span class="token operator">:</span> T<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> R<span class="token punctuation">)</span><span class="token operator">:</span> R <span class="token operator">=</span> <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>语法结构：</strong></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> result <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">run</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 这里是obj的上下文 </span>    <span class="token string">"value"</span> <span class="token comment">// run函数的返回值 </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>run的适用场景：</strong></p><p>适用于let,with函数任何场景。因为run函数是let,with两个函数结合体，准确来说它弥补了let函数在函数体内必须使用it参数替代对象，在run函数中可以像with函数一样可以省略，直接访问实例的公有属性和方法，另一方面它弥补了with函数传入对象判空问题，在run函数中可以像let函数一样做判空处理。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">item<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">run</span> <span class="token punctuation">&#123;</span>holder<span class="token punctuation">.</span>tvTitle<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">"标题: <span class="token interpolation variable">$title</span>"</span>holder<span class="token punctuation">.</span>tvDescription <span class="token operator">=</span> <span class="token string">"描述: <span class="token interpolation variable">$description</span>"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><p>apply函数和run函数也是极其类似的，都是要在某个对象上调用，并且只接收一个Lambda参数，也会在Lambda表达式中提供调用对象的上下文，</p><p>但是apply函数无法指定返回值，而是会自动返回调用对象本身。代码块中上下文对象是this</p><p><strong>底层内联结构：</strong></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token label symbol">@kotlin</span><span class="token punctuation">.</span>internal<span class="token punctuation">.</span>InlineOnly<span class="token keyword">public</span> <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>block<span class="token operator">:</span> T<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token punctuation">&#123;</span> <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>语法结构：</strong></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> result <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 这里是obj的上下文 </span><span class="token punctuation">&#125;</span><span class="token comment">//result是obj对象本身</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>apply的适用场景：</strong></p><p>整体作用功能和run函数很像，唯一不同点就是它返回的值是对象本身，而run函数是一个闭包形式返回，返回的是最后一行的值。正是基于这一点差异它的适用场景稍微与run函数有点不一样。apply一般用于一个对象实例初始化的时候，需要对对象中的属性进行赋值。或者动态inflate出一个XML的View的时候需要给View绑定数据也会用到，这种情景非常常见。特别是在我们开发中会有一些数据model向View model转化实例化的过程中需要用到。</p><p>例：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">mSheetDialogView <span class="token operator">=</span> View<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>layout_sheet<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">&#123;</span>   isFakeBoldText <span class="token operator">=</span> <span class="token boolean">true</span>   max <span class="token operator">=</span> <span class="token number">10</span>   progress <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="also"><a href="#also" class="headerlink" title="also"></a>also</h3><p>also函数的结构实际上和let很像唯一的区别就是返回值的不一样，let是以闭包的形式返回，返回函数体内最后一行的值，如果最后一行为空就返回一个Unit类型的默认值。而also函数返回的则是传入对象的本身</p><p><strong>底层内联结构：</strong></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token label symbol">@kotlin</span><span class="token punctuation">.</span>internal<span class="token punctuation">.</span>InlineOnly<span class="token annotation builtin">@SinceKotlin</span><span class="token punctuation">(</span>“<span class="token number">1.1</span>”<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">inline</span> <span class="token keyword">fun</span> T<span class="token punctuation">.</span><span class="token function">also</span><span class="token punctuation">(</span>block<span class="token operator">:</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token punctuation">&#123;</span> <span class="token function">block</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>语法结构：</strong></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> result <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// it是obj的上下文 </span><span class="token punctuation">&#125;</span><span class="token comment">//result是obj对象本身</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>also的适用场景：</strong></p><p>适用于let函数的任何场景，also函数和let很像，只是唯一的不同点就是let函数最后的返回值是最后一行的返回值而also函数的返回值是返回当前的这个对象。一般可用于多个扩展函数链式调用。</p><p>例：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">items<span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">&#123;</span><span class="token comment">//初始化配置</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">&#123;</span><span class="token comment">//附加操作</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">&#123;</span><span class="token comment">//it.something</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结对比"><a href="#总结对比" class="headerlink" title="总结对比"></a>总结对比</h3><table><thead><tr><th>函数名</th><th align="left">函数体内对象</th><th align="left">返回值</th><th align="center">是否是扩展函数</th><th align="left">适用场景</th></tr></thead><tbody><tr><td>let</td><td align="left">it指代当前对象</td><td align="left">Lambda表达式最后一行或return语句</td><td align="center">是</td><td align="left">适用于处理不为null的操作场景</td></tr><tr><td>with</td><td align="left">this指代当前对象或者省略</td><td align="left">Lambda表达式最后一行或return语句</td><td align="center">否</td><td align="left">适用于调用同一个类的多个方法时，可以省去类名重复，直接调用类的方法</td></tr><tr><td>run</td><td align="left">this指代当前对象或者省略</td><td align="left">Lambda表达式最后一行或return语句</td><td align="center">是</td><td align="left">适用于let,with函数任何场景。</td></tr><tr><td>apply</td><td align="left">this指代当前对象或者省略</td><td align="left">上下文对象(自身)</td><td align="center">是</td><td align="left">1、适用于run函数的任何场景，一般用于初始化一个对象实例的时候，操作对象属性，并最终返回这个对象。<br>2、动态inflate出一个XML的View的时候需要给View绑定数据也会用到。<br>3、一般可用于多个扩展函数链式调用。  <br>4、数据model多层级包裹判空处理的问题。</td></tr><tr><td>also</td><td align="left">it指代当前对象</td><td align="left">上下文对象(自身)</td><td align="center">是</td><td align="left">适用于let函数的任何场景，一般可用于多个扩展函数链式调用</td></tr></tbody></table><h3 id="如何选择？"><a href="#如何选择？" class="headerlink" title="如何选择？"></a>如何选择？</h3><p>要选择正确的函数， 请考虑以下几点：<br>是否在块中的多个对象上调用方法， 或者将上下中对象的实例作为参数传递？ 如果是， 那么使用以it  而不是  this  形式访问上下文对象的函数之一  （  also  或  let  ） 。 如果在代码块中根本没有用到接收者， 那么使用also。下面是一张来自其他博客的标准函数选择图：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/688157a7a55c08b243606f9ae5b4dae5.png"></p><p>通过这张图可以更加清晰的知道该如何选择使用哪个函数。</p><p><strong>其他注意点：</strong></p><ul><li>建议尽量不要使用多个标准库函数进行嵌套，不要为了简化而去做简化，否则整个代码可读性会大大降低，一会是it指代，一会又是this指代，估计隔一段时间后连自己都不知道指代什么了。</li><li>let、with和run函数之所以能够返回其他类型的值，其原理在于lambda表达式内部返回最后一行表达式的值，所以只要最后一行表达式返回不同的对象，那么它们就返回不同类型，表现上就是返回其他类型。</li><li>关于T.also和T.apply函数为什么都能返回自己本身，是因为在各自Lambda表达式内部最后一行都调用return this,返回它们自己本身，这个this能被指代调用者，是因为它们都是扩展函数特性。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作用域函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kotlin面向对象编程</title>
      <link href="/KotlinObjectOriented/"/>
      <url>/KotlinObjectOriented/</url>
      
        <content type="html"><![CDATA[<h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>与java函数不同的是，定义函数要在前面加上”<em><strong>fun</strong></em>“ 关键字，返回值类型放在方法名之后，如：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">getResult</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果一个函数只有一个并且是表达式函数体并且是返回类型自动推断的话，可以直接这样写:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">getResult</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> a <span class="token operator">+</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果一个函数返回一个无意义的值，好比Java中的void，则函数返回值用<em><strong>Unit</strong></em>.</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">getResult</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token punctuation">&#123;</span>   <span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>而<em><strong>Unit</strong></em>关键字可以省略不写</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">getResult</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="创建数据实体类"><a href="#创建数据实体类" class="headerlink" title="创建数据实体类"></a>创建数据实体类</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">var</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>kotlin会为Person类提供一下功能:</p><ul><li>所有属性的getters以及var定义的setters方法</li><li>equals()</li><li>hashCode()</li><li>toString()</li><li>copy(),可对部分属性值进行修改</li><li>所有属性的component1,component2..</li></ul>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin集合与数组</title>
      <link href="/KotlinArray/"/>
      <url>/KotlinArray/</url>
      
        <content type="html"><![CDATA[<h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> items <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"kiwi"</span><span class="token punctuation">)</span><span class="token keyword">val</span> sets <span class="token operator">=</span> <span class="token function">setOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token comment">//arraylist</span><span class="token keyword">var</span> arrayList <span class="token operator">=</span> ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> arrayList2 <span class="token operator">=</span> <span class="token function">arrayListOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">//mutableList</span><span class="token keyword">var</span> mutableList <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//空list</span>emptyList<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">var</span> map <span class="token operator">=</span> mapOf<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//HashMap</span><span class="token keyword">var</span> hashMap <span class="token operator">=</span> hashMapOf<span class="token operator">&lt;</span>Int<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> hashMap2 <span class="token operator">=</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//MutableMap</span><span class="token keyword">val</span> mutableMapOf <span class="token operator">=</span> mutableMapOf<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//LinkedHashMap</span><span class="token keyword">val</span> linkedHashMap <span class="token operator">=</span> LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> linkedMap <span class="token operator">=</span> <span class="token function">linkedMapOf</span><span class="token punctuation">(</span><span class="token string">"key1"</span> <span class="token keyword">to</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"key2"</span> <span class="token keyword">to</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">//示例</span><span class="token keyword">val</span> maps <span class="token operator">=</span> <span class="token function">mapOf</span><span class="token punctuation">(</span><span class="token string">"12"</span> <span class="token keyword">to</span> <span class="token string">"label12"</span><span class="token punctuation">,</span> <span class="token string">"13"</span> <span class="token keyword">to</span> <span class="token string">"label13"</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token keyword">in</span> maps<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key=<span class="token interpolation variable">$key</span>, value=<span class="token interpolation variable">$value</span>"</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span>maps<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h4><h5 id="数组定义"><a href="#数组定义" class="headerlink" title="数组定义"></a>数组定义</h5><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 指定数组长度</span><span class="token keyword">var</span> a1 <span class="token operator">=</span> arrayOfNulls<span class="token operator">&lt;</span>Int<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">// 使用装箱操作</span><span class="token keyword">var</span> a2<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token string">"何晓明"</span><span class="token punctuation">,</span> <span class="token string">"张一嗨"</span><span class="token punctuation">,</span> <span class="token string">"大桥急多"</span><span class="token punctuation">)</span> 或 <span class="token keyword">var</span> a2 <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token string">"何晓明"</span><span class="token punctuation">,</span> <span class="token string">"张一嗨"</span><span class="token punctuation">,</span> <span class="token string">"大桥急多"</span><span class="token punctuation">)</span><span class="token keyword">var</span> a3 <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> 还有<span class="token function">floatArrayOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 等<span class="token comment">// 空数组</span><span class="token keyword">var</span> a4 <span class="token operator">=</span> emptyArray<span class="token operator">&lt;</span>Float<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数组用类 Array 实现，并且还有一个 size 属性及 get 和 set 方法,数组有两种创建方式</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//[1,2,3]</span><span class="token keyword">val</span> a <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//[0,2,4]</span><span class="token keyword">val</span> b <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> i <span class="token operator">-></span> <span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> 或<span class="token keyword">val</span> b <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token operator">-></span> <span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了类Array，还有ByteArray, ShortArray, IntArray … ，用来表示各个类型的数组，省去了装箱操作，因此效率更高</p><h5 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h5><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 或者 <span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="修改元素内容"><a href="#修改元素内容" class="headerlink" title="修改元素内容"></a>修改元素内容</h5><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123</span> 或者a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h5><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="遍历数组下标"><a href="#遍历数组下标" class="headerlink" title="遍历数组下标"></a>遍历数组下标</h5><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token keyword">in</span> a<span class="token punctuation">.</span>indices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin条件控制与循环</title>
      <link href="/KotlinControlAndLoop/"/>
      <url>/KotlinControlAndLoop/</url>
      
        <content type="html"><![CDATA[<h2 id="Kotlin-的逻辑控制"><a href="#Kotlin-的逻辑控制" class="headerlink" title="Kotlin 的逻辑控制"></a>Kotlin 的逻辑控制</h2><p>程序的执行语句主要分为3种：<strong>顺序语句</strong>、<strong>条件语句</strong>和<strong>循环语句</strong>。顺序语句很好理解，就是代码一行一行地往下执行就可以了，但是这种执行方式在很多情况下并不能满足我们的编程需求，这时就需要引入条件语句和循环语句了。</p><h3 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h3><h5 id="if条件语句"><a href="#if条件语句" class="headerlink" title="if条件语句"></a>if条件语句</h5><p>Kotlin中的条件语句主要有两种实现方式：if和when。</p><p>一个 if 语句包含一个布尔表达式和一条或多条语句。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">largerNumber</span><span class="token punctuation">(</span>num1<span class="token operator">:</span> Int<span class="token punctuation">,</span> num2<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>num1 <span class="token operator">></span> num2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> value <span class="token operator">=</span> num1 <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> value <span class="token operator">=</span> num2 <span class="token punctuation">&#125;</span> <span class="token keyword">return</span> value<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的示例中可以看出Kotlin中的if用法和Java中基本上是一样的。但是Kotlin中的if语句相比于Java有一个额外的功能，它是可以有返回值的，返回值就是if语句每一个条件中最后一行代码的返回值。因此，上述代码就可以简化成如下形式：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">largerNumber</span><span class="token punctuation">(</span>num1<span class="token operator">:</span> Int<span class="token punctuation">,</span> num2<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span> <span class="token keyword">val</span> value <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num1 <span class="token operator">></span> num2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> num1 <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> num2 <span class="token punctuation">&#125;</span> <span class="token keyword">return</span> value<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于没有重新赋值的情况了，因此可以使用val关键字来声明value变量，最</p><p>终将value变量返回。而且value其实也是一个多余的变量，我们可以直接将if语句返回，这样代码将会变得更加精简，如下所示：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">largerNumber</span><span class="token punctuation">(</span>num1<span class="token operator">:</span> Int<span class="token punctuation">,</span> num2<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num1 <span class="token operator">></span> num2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> num1 <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> num2 <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者直接写成一行， 返回值类型可以自动推导出来，所以也可以省略：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">largerNumber</span><span class="token punctuation">(</span>num1<span class="token operator">:</span> Int<span class="token punctuation">,</span> num2<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num1 <span class="token operator">></span> num2<span class="token punctuation">)</span> num1 <span class="token keyword">else</span> num2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="when表达式"><a href="#when表达式" class="headerlink" title="when表达式"></a>when表达式</h5><p>在条件分支变得很多的时候， 使用if语句就会产生大量的冗余代码， 而且if语句也有一定的局限性，这时就需要使用when表达式了。</p><p>Kotlin中的when语句有点类似于Java中的switch语句，但它又远比switch语句强大得多。 Java中的switch语句并不怎么好用。</p><p>首先，switch只能传入整型或短于整型的变量作为条件，JDK 1.7之后增加了对字符串变量的支持，如果不是这几种类型的变量，则不能使用switch。</p><p>其次，switch中的每个case条件都要在最后主动加上一个break，否则执行完当前case之后会依次执行下面的case，这一特性可能导致许多奇怪的bug，就是因为有人忘记添加break，执行了多余的case语句。</p><p>而Kotlin中的when语句不仅解决了上述痛点，还增加了许多更为强大的新特性。when运行原理就是将它的参数依次和所有的分支条件顺序比较，直到某个分支满足条件，when语句允许传入一个任意类型的参数，可以是具体的值或某个类型；而when的分支条件语句可以是判断某个具体的值、或着是判断是否为某个类型、或者是判断是否在某个区间。当所有分支语句都不满足时，可以使用一个else语句执行匹配失败的流程，类似于Java的switch中的default语句。</p><p>下面是一个完整的示例：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">when</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token number">1</span> <span class="token operator">-></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"x == 1"</span><span class="token punctuation">)</span>    <span class="token number">2</span> <span class="token operator">-></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"x == 2"</span><span class="token punctuation">)</span>    <span class="token keyword">is</span> String <span class="token operator">-></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"x是一个string"</span><span class="token punctuation">)</span>  <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">4</span> <span class="token operator">-></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"在1到4之间"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"x 不是 1 ，也不是 2"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>when语句的基本用法就是这些，但其实when语句还有一种不带参数的用法，虽然这种用法可能不太常用，但有的时候却能发挥很强的扩展性。这种用法是将判断的表达式完整地写在when的结构体当中。如下所示：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">when</span> <span class="token punctuation">&#123;</span>    x <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">-></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"x == 1"</span><span class="token punctuation">)</span>    x <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">-></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"x == 2"</span><span class="token punctuation">)</span>    x <span class="token keyword">is</span> String <span class="token operator">-></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"x是一个string"</span><span class="token punctuation">)</span>  x <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">4</span> <span class="token operator">-></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"在1到4之间"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"x 不是 1 ，也不是 2"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h3><p>Java中主要有两种循环语句：while循环和for循环。而Kotlin也提供了while循环和for循环，其中while循环不管是在语法还是使用技巧上都和Java中的while循环没有任何区别，而Kotlin在for循环方面做了很大幅度的修改，Java中最常用的for-i循环在Kotlin中直接被舍弃了，而Java中另一种for-each循环则被Kotlin进行了大幅度的加强，变成了for-in循环，在了解for-in循环之前，需要先了解一下kotlin区间的概念。</p><h5 id="区间"><a href="#区间" class="headerlink" title="区间"></a>区间</h5><p>kotlin中可以使用<code>..</code> 、<code>until</code> 、 <code>downTo</code>表示一个区间范围， <code>..</code>和<code>until</code>是从小到大，<code>downTo</code>是从大到小。</p><p><code>..</code> 表示两个端点都在区间的升序闭区间，如：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> range <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">..</span><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>range的取值范围为: 0 1 2 3 4 5.</p><p><code>until</code> 表示左闭右开升序区间，如：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> range <span class="token operator">=</span> <span class="token number">0</span> until <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>range的取值范围为: 0 1 2 3 4.</p><p><code>downTo</code> 表示两个端点都在区间的降序闭区间，如：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> range <span class="token operator">=</span> <span class="token number">0</span> downTo <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>range的取值范围为: 5 4 3 2 1 0.</p><h5 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for-in循环"></a>for-in循环</h5><p>默认情况下，for-in循环每次执行循环时会在区间范围内递增1或递减1，相当于Java for-i循环中的i++或i–效果，而如果要跳过其中的一些元素，可以使用step关键字：step表示步长，默认step为1，现在给step设置为2，如下示例</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">6</span> step <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>i的取值范围为: 1 3 5.</p><p>for-in循环除了可以对区间进行遍历之外，还可以用于遍历数组和集合，下面是一些for-in循环示例：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> items <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string">"实"</span><span class="token punctuation">,</span> <span class="token string">"力"</span><span class="token punctuation">,</span> <span class="token string">"K"</span><span class="token punctuation">,</span> <span class="token string">"O"</span><span class="token punctuation">)</span><span class="token comment">//实力KO</span><span class="token keyword">for</span> <span class="token punctuation">(</span>item <span class="token keyword">in</span> items<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">print</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//实力KO</span><span class="token keyword">for</span> <span class="token punctuation">(</span>index <span class="token keyword">in</span> items<span class="token punctuation">.</span>indices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">print</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//实力KO</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">in</span> items<span class="token punctuation">.</span><span class="token function">withIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//实力KO</span>items<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">&#123;</span><span class="token function">print</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h5><p>while循环和Java中的while循环一样， 语法如下：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">while</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>执行逻辑<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当满足条件时就会执行结构体中的逻辑，然后再次执行判断条件，直到不满足条件才结束while循环，如下示例：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> items <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string">"实"</span><span class="token punctuation">,</span> <span class="token string">"力"</span><span class="token punctuation">,</span> <span class="token string">"K"</span><span class="token punctuation">,</span> <span class="token string">"O"</span><span class="token punctuation">)</span><span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">print</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>index<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token comment">//当index小于items的size时， 执行index++，一直到index=items.size时结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同Java一样，kotlin也支持do while循环，语法如下：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>执行逻辑<span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>do while循环与上面的while循环的区别在于do while循环会先执行一次结构体中的逻辑，然后再判断条件是否满足进行下一次循环， 而while循环是先判断条件是否满足再执行逻辑，所以do while循环至少会执行一次结构体逻辑， 而while至少执行0次结构体逻辑。</p><h5 id="跳出循环"><a href="#跳出循环" class="headerlink" title="跳出循环"></a>跳出循环</h5><p>Kotlin 有三种结构化跳转表达式：</p><ul><li><em>return</em>,   默认从最直接包围它的函数或者匿名函数返回。</li><li><em>break</em>,  终止最直接包围它的循环。</li><li><em>continue</em>, 继续下一次最直接包围它的循环。</li></ul><p>在 Kotlin 中任何表达式都可以用标签（label）来标记。 标签的格式为标识符后跟 @ 符号，例如：abc@、fooBar@</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token label symbol">loop@</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>……<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token label symbol">@loop</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标签限制的 break 跳转到刚好位于该标签指定的循环后面的执行点。 continue 继续标签指定的循环的下一次迭代.</p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin中String的常用方法</title>
      <link href="/KotlinString/"/>
      <url>/KotlinString/</url>
      
        <content type="html"><![CDATA[<p>Kotlin的String类中有非常多的方法，下面列举一些经常用到的方法，首先定义一个字符串变量，后面都以这个变量来验证String相关的方法。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//定义字符串</span><span class="token keyword">val</span> str <span class="token operator">=</span> <span class="token string">"123456789"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h2><p>字符串截取操作可以使用substring、dropXXX系列和takeXXX系列方法</p><h4 id="drop-n-Int-String"><a href="#drop-n-Int-String" class="headerlink" title="drop(n: Int): String"></a>drop(n: Int): String</h4><p>去掉前n个字符，返回其余的字符串，等同于substring(n)</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//删掉前3个字符</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//输出结果：456789</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="dropLast-n-Int-String"><a href="#dropLast-n-Int-String" class="headerlink" title="dropLast(n: Int): String"></a>dropLast(n: Int): String</h4><p>去掉后n个字符，返回其余的字符串，等同于substring(0, str.length - n)</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//删掉后4个字符</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">dropLast</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//输出结果：12345</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="dropWhile-predicate-Char-gt-Boolean-String"><a href="#dropWhile-predicate-Char-gt-Boolean-String" class="headerlink" title="dropWhile(predicate: (Char) -&gt; Boolean): String"></a>dropWhile(predicate: (Char) -&gt; Boolean): String</h4><p>根据条件从前往后逐一去掉字符，直到不满足条件时则返回后面的字符串，该方法参数是一个lambda表达式，下面举几个例子</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//删掉字符串前面等于1或2的字符</span><span class="token keyword">val</span> str <span class="token operator">=</span> <span class="token string">"123456789"</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">dropWhile</span> <span class="token punctuation">&#123;</span>    it <span class="token operator">==</span> <span class="token string">'1'</span> <span class="token operator">||</span> it <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//输出结果：3456789</span><span class="token keyword">val</span> str <span class="token operator">=</span> <span class="token string">"12111223456789"</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">dropWhile</span> <span class="token punctuation">&#123;</span>    it <span class="token operator">==</span> <span class="token string">'1'</span> <span class="token operator">||</span> it <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//输出结果：3456789</span><span class="token keyword">val</span> str <span class="token operator">=</span> <span class="token string">"13456781219232"</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">dropWhile</span> <span class="token punctuation">&#123;</span>    it <span class="token operator">==</span> <span class="token string">'1'</span> <span class="token operator">||</span> it <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//输出结果：3456781219232</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="dropLastWhile-predicate-Char-gt-Boolean-String"><a href="#dropLastWhile-predicate-Char-gt-Boolean-String" class="headerlink" title="dropLastWhile(predicate: (Char) -&gt; Boolean): String"></a>dropLastWhile(predicate: (Char) -&gt; Boolean): String</h4><p>和dropWhile相反，dropLastWhile是从后面开始根据条件去掉字符串</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> str <span class="token operator">=</span> <span class="token string">"13456781219232"</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">dropLastWhile</span> <span class="token punctuation">&#123;</span>    it <span class="token operator">==</span> <span class="token string">'1'</span> <span class="token operator">||</span> it <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//输出结果：1345678121923</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="take-n-Int-String"><a href="#take-n-Int-String" class="headerlink" title="take(n: Int): String"></a>take(n: Int): String</h4><p>获取前n个字符，如果n大于字符串的长度则会返回整个字符串</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//获取前4个字符</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//输出结果：1234</span><span class="token comment">//获取前20个字符</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//输出结果：123456789</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="takeLast-n-Int-CharSequence"><a href="#takeLast-n-Int-CharSequence" class="headerlink" title="takeLast(n: Int): CharSequence"></a>takeLast(n: Int): CharSequence</h4><p>和take方法对应，takeLast则是从后开始获取n个字符</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//获取后3个字符，输出：789</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">takeLast</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="takeWhile-predicate-Char-gt-Boolean-String"><a href="#takeWhile-predicate-Char-gt-Boolean-String" class="headerlink" title="takeWhile(predicate: (Char) -&gt; Boolean): String"></a>takeWhile(predicate: (Char) -&gt; Boolean): String</h4><p>这个方法会从前往后一直返回满足条件的字符，直到不满足条件为止</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//获取以6开头的所有字符</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">takeWhile</span> <span class="token punctuation">&#123;</span>it <span class="token operator">==</span> <span class="token string">'6'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//输出结果为空</span><span class="token comment">//获取以1或2开头的所有字符</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">takeWhile</span> <span class="token punctuation">&#123;</span>it <span class="token operator">==</span> <span class="token string">'1'</span> <span class="token operator">||</span> it <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//输出结果为空：12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="takeLastWhile-predicate-Char-gt-Boolean-String"><a href="#takeLastWhile-predicate-Char-gt-Boolean-String" class="headerlink" title="takeLastWhile(predicate: (Char) -&gt; Boolean): String"></a>takeLastWhile(predicate: (Char) -&gt; Boolean): String</h4><p>这个方法和takeWhile对应,从后往前匹配，返回符合条件的数据</p><h4 id="takeIf-predicate-T-gt-Boolean-T"><a href="#takeIf-predicate-T-gt-Boolean-T" class="headerlink" title="takeIf(predicate: (T) -&gt; Boolean): T?"></a>takeIf(predicate: (T) -&gt; Boolean): T?</h4><p>这个方法会根据lambda参数条件判断，满足条件返回自身，否则返回null。参数对象是一个泛型，不仅适合String类型，其他任何类型都可以。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//判断字符串的长度是否大于5</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">takeIf</span> <span class="token punctuation">&#123;</span>it<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//输入结果：123456789</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="first-first-predicate-Char-gt-Boolean-Char"><a href="#first-first-predicate-Char-gt-Boolean-Char" class="headerlink" title="first() / first(predicate: (Char) -&gt; Boolean): Char"></a>first() / first(predicate: (Char) -&gt; Boolean): Char</h4><p>返回字符串的第一个元素，或者可以传入一个过滤条件，返回满足条件的第一个元素</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//输出：1</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">first</span> <span class="token punctuation">&#123;</span>it <span class="token operator">==</span> <span class="token string">'5'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">//输出：5</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">first</span> <span class="token punctuation">&#123;</span>it <span class="token operator">==</span> <span class="token string">'a'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">//输出：</span>Exception <span class="token keyword">in</span> thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>NoSuchElementException<span class="token operator">:</span> Char sequence contains no character matching the predicate<span class="token punctuation">.</span>at com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demoapp<span class="token punctuation">.</span>DemoCheckKt<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>DemoCheck<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">19</span><span class="token punctuation">)</span>at com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demoapp<span class="token punctuation">.</span>DemoCheckKt<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>DemoCheck<span class="token punctuation">.</span>kt<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="firstOrNull-firstOrNull-predicate-Char-gt-Boolean-Char"><a href="#firstOrNull-firstOrNull-predicate-Char-gt-Boolean-Char" class="headerlink" title="firstOrNull() / firstOrNull(predicate: (Char) -&gt; Boolean): Char"></a>firstOrNull() / firstOrNull(predicate: (Char) -&gt; Boolean): Char</h4><p>和上面的方法一样，返回字符串的第一个元素，或者可以传入一个过滤条件，返回满足条件的第一个元素，但是不一样的地方在于，上面的方法如果没有匹配的结果则会抛出NoSuchElementException异常，而firstOrNull则不会抛出异常，会直接返回null。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">firstOrNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//输出：1</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">firstOrNull</span><span class="token punctuation">&#123;</span>it <span class="token operator">==</span> <span class="token string">'5'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">//输出：5</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">firstOrNull</span><span class="token punctuation">&#123;</span>it <span class="token operator">==</span> <span class="token string">'a'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">//输出：null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>与first()和firstOrNull()相对应的方法，last()、lastOrNull()则是获取最后一个满足条件的元素。还有find(predicate: (Char) -&gt; Boolean): Char?方法也是根据条件查找元素，就不再赘述了。</p><h2 id="空格处理"><a href="#空格处理" class="headerlink" title="空格处理"></a>空格处理</h2><h3 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//去掉开头的空格</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 123  456 "</span><span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//去掉结尾的空格</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 123  456 "</span><span class="token punctuation">.</span><span class="token function">trimEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//去掉两端的空格</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 123  456 "</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//过滤字符:去掉所有空格,输出：12345678</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123 456  7   8"</span><span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">&#123;</span> <span class="token operator">!</span>it<span class="token punctuation">.</span><span class="token function">isWhitespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="reversed"><a href="#reversed" class="headerlink" title="reversed"></a>reversed</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//反转字符串，输出：987654321</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin基础语法</title>
      <link href="/KotlinBasicGrammar/"/>
      <url>/KotlinBasicGrammar/</url>
      
        <content type="html"><![CDATA[<h4 id="定义包"><a href="#定义包" class="headerlink" title="定义包"></a>定义包</h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">package</span> my<span class="token punctuation">.</span>demo<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h4><p>带有两个 Int 参数、返回 Int 的函数：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span><span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将表达式作为函数体、返回值类型自动推断的函数</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> a <span class="token operator">+</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>函数返回无意义的值</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">printSum</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span>Unit<span class="token punctuation">&#123;</span>  <span class="token comment">//$varName 表示变量值,$&#123;表达式&#125;执行表达式</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum of <span class="token interpolation variable">$a</span> and <span class="token interpolation variable">$b</span> is <span class="token interpolation"><span class="token delimiter variable">$&#123;</span>a <span class="token operator">+</span> b<span class="token delimiter variable">&#125;</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Unit返回类型可以省略</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">printSum</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span>Unit<span class="token punctuation">&#123;</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum of <span class="token interpolation variable">$a</span> and <span class="token interpolation variable">$b</span> is <span class="token interpolation"><span class="token delimiter variable">$&#123;</span>a <span class="token operator">+</span> b<span class="token delimiter variable">&#125;</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可变长参数函数,用 vararg 关键字进行标识：</p><p>函数的变长参数可以用 vararg 关键字进行标识：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">vars</span><span class="token punctuation">(</span><span class="token keyword">vararg</span> v<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>it <span class="token keyword">in</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>vars(1,2,3,4) ,输出1234</p><h4 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h4><p>定义只读局部变量使用关键字 <code>val</code> 定义。只能为其赋值一次。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> a<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">//立即赋值</span><span class="token keyword">val</span> b <span class="token operator">=</span> <span class="token number">3.0</span> <span class="token comment">//自动推断类型为Short</span><span class="token keyword">val</span> c<span class="token operator">:</span> Double <span class="token comment">//变量申明</span>c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">.</span>9D <span class="token comment">//赋值</span><span class="token comment">// Byte 定义字节值</span><span class="token keyword">var</span> b<span class="token operator">:</span>byte <span class="token operator">=</span> <span class="token number">127</span><span class="token comment">// Short 定义短整型值</span><span class="token keyword">var</span> number<span class="token operator">:</span>Short <span class="token operator">=</span> <span class="token number">32767</span><span class="token comment">// Int 定义Int值</span><span class="token keyword">var</span> age<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">2017</span> 或者 <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">2017</span> （自动推断类型）<span class="token comment">// Long 定义长整型</span><span class="token keyword">var</span> money<span class="token operator">:</span> Long <span class="token operator">=</span> <span class="token number">9999999999L</span> 或者 <span class="token keyword">var</span> money <span class="token operator">=</span> <span class="token number">99999999999L</span> <span class="token comment">// Float 定义单精度值</span><span class="token keyword">var</span> f<span class="token operator">:</span> Float <span class="token operator">=</span> <span class="token number">123456789f</span> 或者 <span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token number">123456789f</span><span class="token comment">// Double 定义双精度值</span><span class="token keyword">var</span> d<span class="token operator">:</span> Double <span class="token operator">=</span> <span class="token number">66666666.0</span> 或者 <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">66666666.0</span><span class="token comment">// boolean 定义布尔值</span><span class="token keyword">var</span> biu <span class="token operator">=</span> <span class="token boolean">true</span><span class="token operator">/</span><span class="token boolean">false</span><span class="token comment">// Char 定义字符</span><span class="token keyword">var</span> cili <span class="token operator">=</span> <span class="token string">"c"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义重复赋值变量使用<code>var</code> 关键字</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">var</span> a<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">32</span>a <span class="token operator">=</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="延迟初始化属性-（Late-Initialized-Properties）"><a href="#延迟初始化属性-（Late-Initialized-Properties）" class="headerlink" title="延迟初始化属性 （Late-Initialized Properties）"></a>延迟初始化属性 （Late-Initialized Properties）</h4><p>在Kotlin中，声明为具有非空类型的属性必须在构造函数中初始化，但是往往不希望在构造函数中初始化，例如在通过依赖注入或单元测试的设置方法来初始化属性的时候，不能在构造器中提供一个非空的初始化语句，为了处理这种情况，就要在属性上加lateinit关键字来延迟初始化</p><pre class="line-numbers language-none"><code class="language-none">public class MyTest &#123;    lateinit var subject: TestSubject    @Before fun setup() &#123;        subject &#x3D; TestSubject()    &#125;    @Test fun test() &#123;        subject.method()     &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：<strong>lateinit</strong>只能够在var类型的属性中，不能用于构造函数，而且属性不能有自定义的getter和setting，这些属性必须是非空类型，并且不能是基本类型。 如果在一个延迟初始化的属性初始化前调用,会导致一个特定异常,调用的时候值还没有初始化.</p><h4 id="NULL检查机制"><a href="#NULL检查机制" class="headerlink" title="NULL检查机制"></a>NULL检查机制</h4><p>Kotlin的空安全设计对于声明可为空的参数，在使用时要进行空判断处理，有两种处理方式，字段后加!!像Java一样抛出空异常，另一种字段后加?可不做处理返回值为 null或配合?:做空判断处理</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//类型后面加?表示可为空</span><span class="token keyword">var</span> age<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token string">"23"</span> <span class="token comment">//抛出空指针异常</span><span class="token keyword">val</span> ages <span class="token operator">=</span> age<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//不做处理返回 null</span><span class="token keyword">val</span> ages1 <span class="token operator">=</span> age<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//age为空返回-1</span><span class="token keyword">val</span> ages2 <span class="token operator">=</span> age<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?:</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类型检测及自动转换"><a href="#类型检测及自动转换" class="headerlink" title="类型检测及自动转换"></a>类型检测及自动转换</h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">getStringLength</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> Any<span class="token punctuation">)</span><span class="token operator">:</span> Int<span class="token operator">?</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!</span><span class="token keyword">is</span> String<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">null</span>  <span class="token comment">// 在这个分支中, `obj` 的类型会被自动转换为 `String`</span>  <span class="token keyword">return</span> obj<span class="token punctuation">.</span>length<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><p>Kotlin 的基本数值类型包括 Byte、Short、Int、Long、Float、Double 等</p><table><thead><tr><th align="left">类型</th><th align="left">位宽度</th><th>示例</th></tr></thead><tbody><tr><td align="left">Double</td><td align="left">64</td><td>2.0</td></tr><tr><td align="left">Float</td><td align="left">32</td><td>2f</td></tr><tr><td align="left">Long</td><td align="left">64</td><td>3L</td></tr><tr><td align="left">Int</td><td align="left">32</td><td>3</td></tr><tr><td align="left">Short</td><td align="left">16</td><td>4</td></tr><tr><td align="left">Byte</td><td align="left">8</td><td>5</td></tr></tbody></table><p>可以使用下划线使数字常量更易读</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> oneMillion <span class="token operator">=</span> <span class="token number">1_000_000</span><span class="token keyword">val</span> hexBytes <span class="token operator">=</span> <span class="token number">0xFF_EC_DE_5E</span><span class="token keyword">val</span> phoneNumber <span class="token operator">=</span> <span class="token number">185_5162_3845</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在 Kotlin 中，三个等号 === 表示比较对象地址，两个 == 表示比较两个值大小。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> a<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">10000</span><span class="token comment">//经过了装箱，创建了两个不同的对象</span><span class="token keyword">val</span> boxedA<span class="token operator">:</span> Int<span class="token operator">?</span> <span class="token operator">=</span> a<span class="token keyword">val</span> anotherBoxedA<span class="token operator">:</span> Int<span class="token operator">?</span> <span class="token operator">=</span> a<span class="token comment">//虽然经过了装箱，但是值是相等的</span><span class="token function">println</span><span class="token punctuation">(</span>boxedA <span class="token operator">===</span> anotherBoxedA<span class="token punctuation">)</span> <span class="token comment">//  false，值相等，对象地址不一样</span><span class="token function">println</span><span class="token punctuation">(</span>boxedA <span class="token operator">==</span> anotherBoxedA<span class="token punctuation">)</span> <span class="token comment">// true，值相等</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类型转换:每种数据类型都有下面的这些方法，可以转化为其它的类型：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">toByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Byte<span class="token function">toShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Short<span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int<span class="token function">toLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Long<span class="token function">toFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Float<span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Double<span class="token function">toChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Char<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从kotlin1.3开始，引入了<strong>无符号整型</strong>数据类型，目前还是<em><strong>实验性</strong></em>的。</p><table><thead><tr><th>类型</th><th>位宽度</th><th>范围</th><th>示例</th></tr></thead><tbody><tr><td>UByte</td><td>8</td><td>0~255</td><td>221u</td></tr><tr><td>UShort</td><td>16</td><td>0~2^16^-1</td><td>12u</td></tr><tr><td>UInt</td><td>32</td><td>0~2^32^-1</td><td>36u</td></tr><tr><td>ULong</td><td>64</td><td>0~2^64^-1</td><td>1284uL</td></tr></tbody></table><h4 id="kotlin修饰符及关键字"><a href="#kotlin修饰符及关键字" class="headerlink" title="kotlin修饰符及关键字"></a>kotlin修饰符及关键字</h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">public</span> <span class="token operator">/</span> <span class="token keyword">protected</span> <span class="token operator">/</span> <span class="token keyword">private</span> <span class="token operator">/</span> <span class="token keyword">internal</span><span class="token keyword">expect</span> <span class="token operator">/</span> <span class="token keyword">actual</span><span class="token keyword">final</span> <span class="token operator">/</span> <span class="token keyword">open</span> <span class="token operator">/</span> <span class="token keyword">abstract</span> <span class="token operator">/</span> <span class="token keyword">sealed</span> <span class="token operator">/</span> <span class="token keyword">const</span><span class="token keyword">external</span><span class="token keyword">override</span><span class="token keyword">lateinit</span><span class="token keyword">tailrec</span><span class="token keyword">vararg</span><span class="token keyword">suspend</span><span class="token keyword">inner</span><span class="token keyword">enum</span> <span class="token operator">/</span> <span class="token keyword">annotation</span><span class="token keyword">companion</span><span class="token keyword">inline</span><span class="token keyword">infix</span><span class="token keyword">operator</span><span class="token keyword">data</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与Java不同的是，kotlin默认的访问修饰符是public,而且多了一个internal（模块）修饰符<br>其他private 和 protected的作用范围和Java一样</p><ul><li>private：只该类可见（包括该类的所有成员）</li><li>protected：同private 加子类可见</li><li>internal：在同一个模块中可见</li><li>public：公共，所有都可见</li></ul><p>在kotlin中增加了top-level属性和方法，与class同级</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">package</span> foo<span class="token punctuation">.</span>bar<span class="token keyword">val</span> prop<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">"top-level-prop"</span><span class="token keyword">fun</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">loge</span><span class="token punctuation">(</span><span class="token string">"top-level"</span><span class="token punctuation">,</span> <span class="token string">"top-level-demo()"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> Kot <span class="token punctuation">&#123;</span>    <span class="token keyword">fun</span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">loge</span><span class="token punctuation">(</span><span class="token string">"top-level"</span><span class="token punctuation">,</span> prop<span class="token punctuation">)</span>        <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的prop属性和demo()方法就是顶级属性及方法，在Kot类编译成class文件的时候，会把Top-level的属性和函数创建到以类名+Kt为名的class文件中，如：KotKt.class</p><p>顶级属性和方法前面不能用protected访问修饰符</p><h4 id="Kotlin随机数"><a href="#Kotlin随机数" class="headerlink" title="Kotlin随机数"></a>Kotlin随机数</h4><p>kotlin1.3加入多平台random随机数，kotlin.random.Random</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">Random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//Int.MIN_VALUE ~ Int.MAX_VALUE</span>Random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">)</span> <span class="token comment">//0 ~ 52</span>Random<span class="token punctuation">.</span><span class="token function">nextBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//true or false</span>Random<span class="token punctuation">.</span><span class="token function">nextFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//0 ~ 1</span>Random<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//0 ~ 1</span>Random<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token number">5.0</span><span class="token punctuation">)</span> <span class="token comment">//0 ~ 5.0</span><span class="token comment">//生成一个长度23的随机数组</span><span class="token keyword">val</span> nextBytes <span class="token operator">=</span> Random<span class="token punctuation">.</span><span class="token function">nextBytes</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span>it <span class="token keyword">in</span> nextBytes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><h5 id="单目运算符"><a href="#单目运算符" class="headerlink" title="单目运算符"></a>单目运算符</h5><table><thead><tr><th>表达式</th><th>对应函数</th></tr></thead><tbody><tr><td>+a</td><td>a.unaryPlus()</td></tr><tr><td>-a</td><td>a.unaryMinus()</td></tr><tr><td>in</td><td>a.not()</td></tr><tr><td>a++</td><td>a.inc()</td></tr><tr><td>a–</td><td>a.dec()</td></tr></tbody></table><h5 id="双目运算符"><a href="#双目运算符" class="headerlink" title="双目运算符"></a>双目运算符</h5><table><thead><tr><th>表达式</th><th>对应函数</th></tr></thead><tbody><tr><td>a+b</td><td>a.plus(b)</td></tr><tr><td>a-b</td><td>a.minus(b)</td></tr><tr><td>a*b</td><td>a.times(b)</td></tr><tr><td>a/b</td><td>a.div(b)</td></tr><tr><td>a%b</td><td>a.rem(b) / a.mod(b) 已过时</td></tr><tr><td>a..b</td><td>a.rangTo(b)</td></tr><tr><td>a in b</td><td>a.contains(b)</td></tr><tr><td>a !in b</td><td>!a.contains(b)</td></tr><tr><td>a += b</td><td>a.plusAssign(b)</td></tr><tr><td>a -= b</td><td>a.minusAssign(b)</td></tr><tr><td>a *= b</td><td>a.timesAssign(b)</td></tr><tr><td>a /= b</td><td>a.divAssign(b)</td></tr><tr><td>a %= b</td><td>a.remAssign(b)</td></tr><tr><td>a &amp;&amp; b</td><td>a.and(b)</td></tr><tr><td>a || b</td><td>a.or(b)</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快捷键--Android Studio(Windows版)</title>
      <link href="/ASKeymapForWindows/"/>
      <url>/ASKeymapForWindows/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">快捷键</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">Ctrl + B</td><td align="left">跳转到类、方法、成员变量（和Ctrl + 左键单击 等同） / 鼠标中键</td></tr><tr><td align="center">Ctrl + D</td><td align="left">复制选中的部分在下面，没有选中则复制光标所在的行</td></tr><tr><td align="center">Ctrl + E</td><td align="left">显示最近编辑的文件列表</td></tr><tr><td align="center">Ctrl + F</td><td align="left">查找选中部分在类中的所有位置</td></tr><tr><td align="center">Ctrl + G</td><td align="left">跳转到指定的行和列</td></tr><tr><td align="center">Ctrl + H</td><td align="left">查看当前类的继承层次结构</td></tr><tr><td align="center">Ctrl + I</td><td align="left">显示接口中所有可以实现的方法</td></tr><tr><td align="center">Ctrl + J</td><td align="left">提示快速模板代码简写 快速模板代码</td></tr><tr><td align="center">Ctrl + K</td><td align="left">版本控制提交代码</td></tr><tr><td align="center">Ctrl + N</td><td align="left">可以快速打开类</td></tr><tr><td align="center">Ctrl + O</td><td align="left">可以选择父类的方法进行重写</td></tr><tr><td align="center">Ctrl  + P</td><td align="left">查看方法需要哪些参数</td></tr><tr><td align="center">Ctrl + R</td><td align="left">替换</td></tr><tr><td align="center">Ctrl + T</td><td align="left">版本控制更新代码</td></tr><tr><td align="center">Ctrl + W</td><td align="left">扩大选中范围</td></tr><tr><td align="center">Ctrl  + X</td><td align="left">剪切一行</td></tr><tr><td align="center">Ctrl  + Y</td><td align="left">删除一行</td></tr><tr><td align="center">Ctrl + [ 或 ]</td><td align="left">跳到大括号的开头或末尾处</td></tr><tr><td align="center">Ctrl +  “-“</td><td align="left">折叠光标所在的方法</td></tr><tr><td align="center">Ctrl +  “+”</td><td align="left">展开光标所在的方法</td></tr><tr><td align="center">Ctrl + F7</td><td align="left">可以查询当前元素在当前文件中的引用，然后按F3可以选择</td></tr><tr><td align="center">Ctrl + F9</td><td align="left">编译Project</td></tr><tr><td align="center">Ctrl + F11</td><td align="left">设置或移除标签（并添加编号）</td></tr><tr><td align="center">Ctrl + F12</td><td align="left">可以显示当前文件的结构</td></tr><tr><td align="center">Ctrl + Tab</td><td align="left">相当于Ctrl + E ,切换历史操作过的类</td></tr><tr><td align="center">Ctrl + Shift + A</td><td align="left">打开action 输入框，快速搜索所有的菜单或命令</td></tr><tr><td align="center">Ctrl + Shift + C</td><td align="left">复制当前类的绝对路径</td></tr><tr><td align="center">Ctrl + Shift + E</td><td align="left">打开最近编辑过的文件列表</td></tr><tr><td align="center">Ctrl + Shift + J</td><td align="left">整合两行（将本行以下的代码上移一行）</td></tr><tr><td align="center">Ctrl + Shift + N</td><td align="left">快速打开文件</td></tr><tr><td align="center">Ctrl + Shift + U</td><td align="left">将选中的单词全部大写/小写</td></tr><tr><td align="center">Ctrl + Shift + T</td><td align="left">类到测试类（新建、查询、跳转）</td></tr><tr><td align="center">Ctrl + Shift + Z</td><td align="left">回退/撤销</td></tr><tr><td align="center">Ctrl + Shift +  “-“</td><td align="left">折叠当前类中所有方法</td></tr><tr><td align="center">Ctrl + Shift +  “+”</td><td align="left">展开当前类中所有方法</td></tr><tr><td align="center">Ctrl + Shift + Backspace</td><td align="left">跳转到上次编辑的地方</td></tr><tr><td align="center">Ctrl + Shift + Insert</td><td align="left">选择剪贴板内容并插入</td></tr><tr><td align="center">Ctrl + Shift + ‘(引号)</td><td align="left">子窗口最大化</td></tr><tr><td align="center">Ctrl + Shift + →↓↑←</td><td align="left">调整子窗口的尺寸</td></tr><tr><td align="center">Ctrl + Shift + Alt + N</td><td align="left">快速打开符号</td></tr><tr><td align="center">Ctrl + / 和 Ctrl + Shift  +/</td><td align="left">单行和代码块注释（Java类和xml文件一样）</td></tr><tr><td align="center">Ctrl + Alt + B</td><td align="left">跳转到抽象方法的实现</td></tr><tr><td align="center">Ctrl + Alt + L</td><td align="left">格式化对齐代码</td></tr><tr><td align="center">Ctrl + Alt + M</td><td align="left">提取一段选中的代码成一个方法</td></tr><tr><td align="center">Ctrl + Alt + O</td><td align="left">删除当前类所有没有使用到的包的引用</td></tr><tr><td align="center">Ctrl + Alt + T</td><td align="left">使用模板包裹选中的代码</td></tr><tr><td align="center">Ctrl + Alt + V</td><td align="left">为当前行代码执行结果生成变量</td></tr><tr><td align="center">Ctrl+Alt+Up /Ctrl+Alt+Down</td><td align="left">快速跳转搜索结果</td></tr><tr><td align="center">Ctrl + Alt + Shift + C</td><td align="left">复制当前类的包名全路径</td></tr><tr><td align="center">Ctrl + Alt + Shift + N</td><td align="left">通过关键字搜索类或变量</td></tr><tr><td align="center">Alt + Shift + ↑ 或↓</td><td align="left">代码上移或者下移一行</td></tr><tr><td align="center">Alt+Insert</td><td align="left">显示generate，可以生成构造器/Getter/Setter等</td></tr><tr><td align="center">Alt+↑ / ↓</td><td align="left">可在方法间快速移动</td></tr><tr><td align="center">Alt + Enter</td><td align="left">快速修复，快速提示代码</td></tr><tr><td align="center">Alt+F3</td><td align="left">快速寻找</td></tr><tr><td align="center">Alt + F7</td><td align="left">显示当前文件、方法或参数在类中的使用位置</td></tr><tr><td align="center">Alt + 左键</td><td align="left">选中多行进行编辑  （矩形选择） / 鼠标中键</td></tr><tr><td align="center">Alt + 1</td><td align="left">显示/隐藏工程目录结构</td></tr><tr><td align="center">Alt + 2</td><td align="left">显示/隐藏Favorites(收藏夹)窗口</td></tr><tr><td align="center">Alt + 3</td><td align="left">显示/隐藏find窗口</td></tr><tr><td align="center">Alt + 4</td><td align="left">显示/隐藏Run窗口</td></tr><tr><td align="center">Alt + 5</td><td align="left">显示/隐藏Debug窗口</td></tr><tr><td align="center">Alt + 6</td><td align="left">显示和隐藏控制台（android monitor）</td></tr><tr><td align="center">Alt + 7</td><td align="left">显示/隐藏Structure窗口</td></tr><tr><td align="center">Alt + 8</td><td align="left">显示/隐藏类层次结构窗口</td></tr><tr><td align="center">Alt + 9</td><td align="left">显示/隐藏Version Control窗口</td></tr><tr><td align="center">Alt + 0</td><td align="left">显示/隐藏Message窗口</td></tr><tr><td align="center">Alt  +  B</td><td align="left">跳转到菜单栏Build</td></tr><tr><td align="center">Alt  +  C</td><td align="left">跳转到菜单栏Code</td></tr><tr><td align="center">Alt  +  E</td><td align="left">跳转到菜单栏Edit</td></tr><tr><td align="center">Alt  +  F</td><td align="left">跳转到菜单栏File</td></tr><tr><td align="center">Alt  +  T</td><td align="left">跳转到菜单栏Tools</td></tr><tr><td align="center">Alt  +  N</td><td align="left">跳转到菜单栏Navigate</td></tr><tr><td align="center">Alt  +  V</td><td align="left">跳转到菜单栏View</td></tr><tr><td align="center">Alt  +  S</td><td align="left">打开jsonFormat（光标要在编辑区内）</td></tr><tr><td align="center">Alt + ← /  →</td><td align="left">工程目录结构切换</td></tr><tr><td align="center">Shift  + 左键单击</td><td align="left">关闭窗口文件（鼠标移到文件名字区域）</td></tr><tr><td align="center">Shift + Shift</td><td align="left">输入关键字查询所有的类或者文件</td></tr><tr><td align="center">Shift + F6</td><td align="left">重命名，可以同步所有位置</td></tr><tr><td align="center">Shift + F9</td><td align="left">Debug</td></tr><tr><td align="center">Shift + F10</td><td align="left">运行</td></tr><tr><td align="center">Shift + F11</td><td align="left">显示标签列表</td></tr></tbody></table><p>更多 <strong>Android Studio</strong>  快捷键可以到<a href="https://developer.android.google.cn/studio/intro/keyboard-shortcuts?hl=zh_cn">AndroidDeveloper</a> 上面去查看，或者到 <a href="https://resources.jetbrains.com/storage/products/intellij-idea/docs/IntelliJIDEA_ReferenceCard.pdf">IntelliJ IDEA官网</a> 去学习</p>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快捷键--Android Studio(Mac版)</title>
      <link href="/ASKeymapForMac/"/>
      <url>/ASKeymapForMac/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">快捷键</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">cmd⌘ + B</td><td align="left">跳转到类、方法、成员变量（和cmd⌘ + 左键单击 等同） / 鼠标中键</td></tr><tr><td align="center">cmd⌘ + D</td><td align="left">复制选中的部分在下面，没有选中则复制光标所在的行</td></tr><tr><td align="center">cmd⌘ + E</td><td align="left">显示最近打开的文件列表</td></tr><tr><td align="center">cmd⌘ + F</td><td align="left">搜索选中部分在类中的所有位置</td></tr><tr><td align="center">cmd⌘ + L</td><td align="left">跳转到指定的行和列位置</td></tr><tr><td align="center">cmd⌘ + H</td><td align="left">隐藏窗口</td></tr><tr><td align="center">cmd⌘ + J</td><td align="left">提示快速模板代码简写 快速模板代码</td></tr><tr><td align="center">cmd⌘ + K</td><td align="left">版本控制提交代码</td></tr><tr><td align="center">cmd⌘ + Shift⇧ + K</td><td align="left">版本控制push代码</td></tr><tr><td align="center">cmd⌘ + M</td><td align="left">最小化窗口</td></tr><tr><td align="center">cmd⌘ + N</td><td align="left">在类目录上使用时创建新的类，在代码编辑区使用时显示generate</td></tr><tr><td align="center">cmd⌘ + O</td><td align="left">根据类名搜索文件</td></tr><tr><td align="center">cmd⌘ + P</td><td align="left">查看方法需要哪些参数</td></tr><tr><td align="center">cmd⌘ + R</td><td align="left">替换</td></tr><tr><td align="center">cmd⌘ + T</td><td align="left">版本控制更新代码</td></tr><tr><td align="center">cmd⌘ + W</td><td align="left">关闭当前编辑窗口</td></tr><tr><td align="center">cmd⌘ + X</td><td align="left">剪切</td></tr><tr><td align="center">cmd⌘ + Backspace⌫</td><td align="left">删除一行</td></tr><tr><td align="center">cmd⌘ + [ 或 ]</td><td align="left">可以跳到大括号的开头结尾</td></tr><tr><td align="center">cmd⌘ +  “-“</td><td align="left">折叠光标所在的方法</td></tr><tr><td align="center">cmd⌘ +  “+”</td><td align="left">展开光标所在的方法</td></tr><tr><td align="center">cmd⌘ +  “,”</td><td align="left">打开设置界面</td></tr><tr><td align="center">cmd⌘ + 1</td><td align="left">显示/隐藏工程目录结构</td></tr><tr><td align="center">cmd⌘ + 2</td><td align="left">显示/隐藏Favorites(收藏夹)窗口</td></tr><tr><td align="center">cmd⌘ + 3</td><td align="left">显示/隐藏find窗口</td></tr><tr><td align="center">cmd⌘ + 4</td><td align="left">显示/隐藏Run窗口</td></tr><tr><td align="center">cmd⌘ + 5</td><td align="left">显示/隐藏Debug窗口</td></tr><tr><td align="center">cmd⌘ + 6</td><td align="left">显示和隐藏控制台（android monitor）</td></tr><tr><td align="center">cmd⌘ + 7</td><td align="left">显示/隐藏Structure窗口</td></tr><tr><td align="center">cmd⌘ + 8</td><td align="left">显示/隐藏类层次结构窗口</td></tr><tr><td align="center">cmd⌘ + 9</td><td align="left">显示/隐藏Version Control窗口</td></tr><tr><td align="center">cmd⌘ + 0</td><td align="left">显示/隐藏Message窗口</td></tr><tr><td align="center">cmd⌘ + F9</td><td align="left">编译工程</td></tr><tr><td align="center">cmd⌘ + Shift⇧ + A</td><td align="left">打开action 输入框，快速搜索所有的菜单或命令</td></tr><tr><td align="center">cmd⌘ + Shift⇧ + C</td><td align="left">复制当前类的绝对路径</td></tr><tr><td align="center">cmd⌘ + Shift⇧ + E</td><td align="left">打开最近编辑过的文件列表</td></tr><tr><td align="center">cmd⌘ + Shift⇧ + L</td><td align="left">在百度中搜索选中的内容</td></tr><tr><td align="center">cmd⌘ + Shift⇧ + U</td><td align="left">将选中的单词全部大写/小写</td></tr><tr><td align="center">cmd⌘ + Shift⇧ + T</td><td align="left">类到测试类（新建、查询、跳转）</td></tr><tr><td align="center">cmd⌘ + Shift⇧ + Z</td><td align="left">回退/撤销</td></tr><tr><td align="center">cmd⌘ + Shift⇧ + Backspace⌫</td><td align="left">可以跳转到上次编辑的地方</td></tr><tr><td align="center">cmd⌘ + Shift⇧ + ‘(引号)</td><td align="left">子窗口最大化</td></tr><tr><td align="center">cmd⌘ + Shift⇧ + →↓↑←</td><td align="left">调整子窗口的尺寸</td></tr><tr><td align="center">cmd⌘ + /</td><td align="left">单行注释</td></tr><tr><td align="center">cmd⌘（Ctrl） + Shift⇧  + /</td><td align="left">注释代码块</td></tr><tr><td align="center">cmd⌘ + Alt⌥ + B</td><td align="left">可以跳转到抽象方法的实现</td></tr><tr><td align="center">cmd⌘ + Alt⌥ + L</td><td align="left">格式化对齐代码</td></tr><tr><td align="center">cmd⌘ + Alt⌥ + T</td><td align="left">使用模板包裹选中的代码</td></tr><tr><td align="center">cmd⌘ + Alt⌥ + V</td><td align="left">为当前行代码执行结果生成变量</td></tr><tr><td align="center">cmd⌘ + Alt⌥ + Shift⇧ + C</td><td align="left">复制当前类的包名全路径</td></tr><tr><td align="center">Ctrl + D</td><td align="left">Debug APP</td></tr><tr><td align="center">Ctrl + R</td><td align="left">运行APP</td></tr><tr><td align="center">Ctrl + Tab</td><td align="left">切换历史操作过的类</td></tr><tr><td align="center">Alt⌥ + ↑或↓</td><td align="left">扩大或者减小选中区域</td></tr><tr><td align="center">Alt⌥ + Shift⇧ + ↑ 或↓</td><td align="left">代码上移或者下移一行</td></tr><tr><td align="center">Alt⌥ + 左键</td><td align="left">选中多行进行编辑  （矩形选择） / 鼠标中键</td></tr><tr><td align="center">Shift⇧ + F6</td><td align="left">重新命名</td></tr><tr><td align="center">Shift⇧ + 左键单击</td><td align="left">关闭窗口文件（鼠标移到文件名字区域）</td></tr><tr><td align="center">Shift⇧ + Shift⇧</td><td align="left">输入关键字查询所有的类或者文件</td></tr></tbody></table><p>更多 <strong>Android Studio</strong>  快捷键可以到<a href="https://developer.android.google.cn/studio/intro/keyboard-shortcuts?hl=zh_cn">AndroidDeveloper</a> 上面去查看，或者到 <a href="https://resources.jetbrains.com/storage/products/intellij-idea/docs/IntelliJIDEA_ReferenceCard.pdf">IntelliJ IDEA官网</a> 去学习</p>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快捷键--浏览器篇（Windows版）</title>
      <link href="/WindowsBrowserKeymap/"/>
      <url>/WindowsBrowserKeymap/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td>Ctrl  +  F   or   F3</td><td>搜索</td></tr><tr><td>Ctrl  +  H</td><td>打开历史记录</td></tr><tr><td>Ctrl  +  J</td><td>打开下载管理页面</td></tr><tr><td>Ctrl  +  N</td><td>创建新窗口</td></tr><tr><td>Ctrl  +  P</td><td>打印</td></tr><tr><td>Ctrl  +  T</td><td>新建标签页</td></tr><tr><td>Ctrl  +  W</td><td>关闭标签页</td></tr><tr><td>Ctrl  +  -</td><td>. 缩小页面</td></tr><tr><td>Ctrl  +  +</td><td>放大页面</td></tr><tr><td>Ctrl  +  0</td><td>还原页面到未缩放状态</td></tr><tr><td>Ctrl  +  Tab</td><td>向右切换标签页</td></tr><tr><td>Ctrl  +  Shift  + Tab</td><td>向左切换标签页</td></tr><tr><td>Ctrl  +  Shift  +  I  or  F12</td><td>打开/关闭控制台</td></tr><tr><td>Ctrl  +  Shift  +  B</td><td>显示/隐藏书签栏</td></tr><tr><td>Alt  +  D  or  Ctrl  +  L  or  F6</td><td>选中地址栏地址</td></tr><tr><td>F5</td><td>重新加载页面</td></tr><tr><td>F11</td><td>全屏显示</td></tr><tr><td>Space</td><td>向下滚动页面</td></tr><tr><td>Home</td><td>回到网页顶部</td></tr><tr><td>End</td><td>回到网页底部</td></tr><tr><td>Ctrl  +  1…8</td><td>快速切换第1到8个标签页</td></tr><tr><td>Ctrl  +  9</td><td>快速切换到最后一个标签页</td></tr><tr><td>Ctrl  +  U</td><td>在新标签中打开当前网页的源代码</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快捷键--浏览器篇（Mac版）</title>
      <link href="/MacBrowserKeymap/"/>
      <url>/MacBrowserKeymap/</url>
      
        <content type="html"><![CDATA[<h3 id="Safari浏览器"><a href="#Safari浏览器" class="headerlink" title="Safari浏览器"></a>Safari浏览器</h3><table><thead><tr><th align="left">快捷键</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">cmd  +  D</td><td align="left">为当前页创建书签</td></tr><tr><td align="left">cmd  +  F</td><td align="left">搜索或替换</td></tr><tr><td align="left">cmd  +  H</td><td align="left">隐藏窗口</td></tr><tr><td align="left">cmd  +  alt  +  H</td><td align="left">隐藏其他窗口</td></tr><tr><td align="left">cmd  +  R</td><td align="left">重新加载页面</td></tr><tr><td align="left">cmd  +  T</td><td align="left">新建标签页</td></tr><tr><td align="left">cmd  +  W</td><td align="left">关闭标签页</td></tr><tr><td align="left">cmd  +  M</td><td align="left">最小化窗口</td></tr><tr><td align="left">cmd  +  N</td><td align="left">创建新窗口</td></tr><tr><td align="left">cmd  +  P</td><td align="left">打印</td></tr><tr><td align="left">cmd  +  Q</td><td align="left">退出浏览器</td></tr><tr><td align="left">cmd  +  Y</td><td align="left">显示历史记录</td></tr><tr><td align="left">cmd  +  -</td><td align="left">缩小页面</td></tr><tr><td align="left">cmd  +  +</td><td align="left">放大页面</td></tr><tr><td align="left">cmd  +  0</td><td align="left">还原页面到未缩放状态</td></tr><tr><td align="left">cmd  + 1…8</td><td align="left">快速切换第1到8个标签页</td></tr><tr><td align="left">cmd  + 9</td><td align="left">快速切换到最后一个标签页</td></tr><tr><td align="left">Ctrl  +  Tab</td><td align="left">向右切换标签页</td></tr><tr><td align="left">Ctrl  +  Shift  + Tab</td><td align="left">向左切换标签页</td></tr><tr><td align="left">cmd  +  Shift  +  B</td><td align="left">显示/隐藏书签栏</td></tr><tr><td align="left">cmd  +  Shift  +  L</td><td align="left">显示/隐藏书签边栏</td></tr></tbody></table><h3 id="Chrome浏览器"><a href="#Chrome浏览器" class="headerlink" title="Chrome浏览器"></a>Chrome浏览器</h3><table><thead><tr><th align="left">快捷键</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">cmd  +  0</td><td align="left">还原页面到未缩放状态</td></tr><tr><td align="left">cmd  + 1…8</td><td align="left">快速切换第1到8个标签页</td></tr><tr><td align="left">cmd  + 9</td><td align="left">快速切换最后一个标签页</td></tr><tr><td align="left">cmd  +  H</td><td align="left">隐藏窗口</td></tr><tr><td align="left">cmd  +  alt  +  H</td><td align="left">隐藏其他窗口</td></tr><tr><td align="left">cmd  +  Shift  +  J</td><td align="left">打开下载界面</td></tr><tr><td align="left">cmd  +  M</td><td align="left">最小化窗口</td></tr><tr><td align="left">cmd  +  P</td><td align="left">打印</td></tr><tr><td align="left">cmd  +  Q</td><td align="left">退出浏览器</td></tr><tr><td align="left">cmd  +  U</td><td align="left">在新标签中打开当前网页的源代码</td></tr><tr><td align="left">cmd  +  Y</td><td align="left">显示历史记录</td></tr><tr><td align="left">Ctrl  +  Tab  或  cmd  +  alt  + →</td><td align="left">向右切换标签页</td></tr><tr><td align="left">Ctrl  +  Shift  + Tab  或 cmd  +  alt  +  ←</td><td align="left">向左切换标签页</td></tr><tr><td align="left">Space</td><td align="left">向下滚动页面</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用ADB命令</title>
      <link href="/ADB/"/>
      <url>/ADB/</url>
      
        <content type="html"><![CDATA[<h3 id="ADB-Android-Debug-Bridge"><a href="#ADB-Android-Debug-Bridge" class="headerlink" title="ADB(Android Debug Bridge)"></a>ADB(Android Debug Bridge)</h3><p><strong>ADB</strong>是Android开发者和测试人员必不可少的工具。熟悉ADB命令将会给日常开发带来很多帮助，下面是我整理的一些平时使用比较多的ADB命令，当然ADB命令远不止这些，更多的命令可以参考<code>Zhuang Ma</code>的<a href="https://github.com/mzlogin/awesome-adb">GitHub项目</a> 。</p><p>在介绍ADB命令之前先让我们打开命令运行窗口：</p><ul><li>Windows：win + R 打开运行窗口，然后输入<code>cmd</code>回车即可。</li><li>Mac：cmd⌘ + space打开spotlight，然后输入<code>Terminal</code>回车即可。</li><li>Android Studio：Terminal窗口。</li></ul><p>下面正式开始ADB命令介绍：</p><h4 id="查看adb的路径"><a href="#查看adb的路径" class="headerlink" title="查看adb的路径"></a>查看adb的路径</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">where adb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如：D:\project\sdk\platform-tools\adb.exe，adb位于SDK安装路径的platform-tools目录下面。</p><p>####查看adb版本信息</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接输入<code>adb</code>或者<code>adb help</code>也可以打印adb的版本和路径信息。</p><p>####列出所有连接的Android设备或模拟器</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb devices<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如: </p><p>List of devices attached<br>b7d5caee            device<br>127.0.0.1:7555   device<br>emulator-5554   device</p><p>上面是我电脑连接的3个设备，第一个是手机设备；第二个是网易mumu模拟器；第三个是Android Studio自带模拟器。</p><p>####连接设备</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb connect HOST[:PORT]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>PORT不写默认为5555.</p><p>如：连接网易mumu模拟器</p><p><code>adb connect 127.0.0.1:7555</code> </p><h4 id="断开连接"><a href="#断开连接" class="headerlink" title="断开连接"></a>断开连接</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb disconnect [HOST[:PORT]]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>PORT不写默认为5555，如果HOST和PORT都不写则表示断开所有连接</p><p>如：断开连接网易mumu模拟器</p><p><code>adb disconnect 127.0.0.1:7555</code> </p><blockquote><p>注: <code>connect</code> 和 <code>disconnect</code>只能连接和断开TCP/IP设备,  对USB连接设备无效。</p></blockquote><p>####将电脑上的文件复制到设备中</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb push &lt;电脑上的文件路径&gt;  &lt;设备里的目录&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 如：将桌面上一张图片拷贝到设备内存卡的picture目录中。</p><p>adb  push  C:\Users\Administrator\Desktop\test.gif  /sdcard/picture</p><blockquote><ul><li>如果picture目录不存在，但上级目录存在,则会在拷贝到根目录，但最终的文件会以这个目录命名</li><li>如果picture目录不存在,且上级目录也不存在，则会直接报错找不到目录</li><li>如果目录中已存在同名文件，则会覆盖原来的文件</li></ul></blockquote><p>如果同时连接了多个设备，则需要指定具体的设备，不然会提示<code>more than one device/emulator</code> 错误，<code>b7d5caee</code>为上面<code>adb devices</code> 得到的设备名称：</p><p>adb -s b7d5caee  push  C:\Users\Administrator\Desktop\test.gif  /sdcard/picture</p><p>####将设备中的文件复制到电脑中</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb pull &lt;设备里的文件路径&gt; [电脑上的目录]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如：将设备中的test.txt拷贝到电脑桌面上</p><p>adb  pull   /storage/sdcard0/head/test.txt  C:\Users\Administrator\Desktop</p><p>####安装应用</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb install [-rtdg] apk_path<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>-r: replace existing application 覆盖安装</p><p>-t: allow test packages </p><p>-d: allow version code downgrade 降级安装,仅debuggable包</p><p>-g: grant all runtime permissions 允许所有运行时权限</p><p>####卸载运用</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb uninstall [-k] packagename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>-k: keep the data and cache directries 表示卸载应用但保留数据和缓存目录。</p><p>####启动ADB服务server</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb start-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>####停止ADB服务server</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb kill-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="重启设备"><a href="#重启设备" class="headerlink" title="重启设备"></a>重启设备</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb  reboot <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="打印日志"><a href="#打印日志" class="headerlink" title="打印日志"></a>打印日志</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb logcat *:(V|D|I|W|E|F|S) <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>V: Verbose</p><p>D: Debug</p><p>I: Info</p><p>W: Warn</p><p>E: Error</p><p>F: Fatal</p><p>S: Silent</p><p>**S级别最高，什么日志都不会打印 **</p><p><code>adb logcat *:S</code></p><p><strong>打印tag为haha的所有debug级别日志，其他日志不打印</strong></p><p><code>adb logcat haha:d *:s</code> </p><p><strong>将控制台打印的日志保存到文件中</strong></p><p><code>adb logcat  -&gt; D:/log.txt</code></p><p><strong>清空控制台打印的日志</strong></p><p><code>adb logcat -c</code></p><p>####shell 的使用</p><p>Android系统是基于Linux系统开发的，所以支持常见的Linux的命令，我们连接设备之后就可以使用<code>adb shell</code> 来执行这些命令。</p><h5 id="显示设备上所有的应用包名"><a href="#显示设备上所有的应用包名" class="headerlink" title="显示设备上所有的应用包名"></a>显示设备上所有的应用包名</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb shell pm list package        <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="列出系统应用"><a href="#列出系统应用" class="headerlink" title="列出系统应用"></a>列出系统应用</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb shell pm list package -s    <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="列出第三方应用"><a href="#列出第三方应用" class="headerlink" title="列出第三方应用"></a>列出第三方应用</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb shell pm list package -3    <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="列出包名及存放位置"><a href="#列出包名及存放位置" class="headerlink" title="列出包名及存放位置"></a>列出包名及存放位置</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb shell pm list package -f     <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="列出包名及安装来源"><a href="#列出包名及安装来源" class="headerlink" title="列出包名及安装来源"></a>列出包名及安装来源</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb shell pm list package -i     <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="显示设备上所有的包含name关键字的应用包名"><a href="#显示设备上所有的包含name关键字的应用包名" class="headerlink" title="显示设备上所有的包含name关键字的应用包名"></a>显示设备上所有的包含name关键字的应用包名</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb shell pm list packages name <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="过滤包含com的包的详细信息"><a href="#过滤包含com的包的详细信息" class="headerlink" title="过滤包含com的包的详细信息"></a>过滤包含com的包的详细信息</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb shell pm list package -3 -f  -i  com   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="列出安装包在设备中的路径"><a href="#列出安装包在设备中的路径" class="headerlink" title="列出安装包在设备中的路径"></a>列出安装包在设备中的路径</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb shell pm path &lt;applicationId&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如：</p><p>adb shell pm path com.example.app</p><p>打印：package:/data/app/com.example.app/base.apk</p><h5 id="清除应用数据与缓存"><a href="#清除应用数据与缓存" class="headerlink" title="清除应用数据与缓存"></a>清除应用数据与缓存</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb shell pm clear &lt;applicationId&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可能会遇到没有权限的情况<code>java.lang.SecurityException: PID 14299 does not have permission android.permission.CLEAR_APP_USER_DATA to clear data of package XXX</code> ,这种情况需要在<strong>开发者选项</strong>里面关闭权限限制，每个手机的位置和描述可能不一样，如</p><p><img src="https://img-blog.csdnimg.cn/20210422210029264.png"></p><p><img src="https://img-blog.csdnimg.cn/20210422210405733.png"></p><h5 id="查看所有的危险权限列表"><a href="#查看所有的危险权限列表" class="headerlink" title="查看所有的危险权限列表"></a>查看所有的危险权限列表</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb shell pm list permissions -g -d  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="monkey测试"><a href="#monkey测试" class="headerlink" title="monkey测试"></a>monkey测试</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb shell monkey -p package count  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>package：进行monkey测试的应用包名</p><p>count：测试次数</p><p>如：</p><p>adb shell monkey -p com.example.test 200</p><h5 id="查看设备前台activity"><a href="#查看设备前台activity" class="headerlink" title="查看设备前台activity"></a>查看设备前台activity</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb shell dumpsys activity activities  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="查询设备型号"><a href="#查询设备型号" class="headerlink" title="查询设备型号"></a>查询设备型号</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb shell getprop ro.product.model <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="查询设备品牌"><a href="#查询设备品牌" class="headerlink" title="查询设备品牌"></a>查询设备品牌</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb shell getprop ro.product.brand <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="查询系统版本号"><a href="#查询系统版本号" class="headerlink" title="查询系统版本号"></a>查询系统版本号</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb shell getprop ro.build.version.release <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="查看电池状态"><a href="#查看电池状态" class="headerlink" title="查看电池状态"></a>查看电池状态</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb shell dumpsys battery <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="获取设备屏幕分辨率"><a href="#获取设备屏幕分辨率" class="headerlink" title="获取设备屏幕分辨率"></a>获取设备屏幕分辨率</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb shell wm size  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="获取设备屏幕密度"><a href="#获取设备屏幕密度" class="headerlink" title="获取设备屏幕密度"></a>获取设备屏幕密度</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb shell wm density <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="查询设备IP地址"><a href="#查询设备IP地址" class="headerlink" title="查询设备IP地址"></a>查询设备IP地址</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb shell ifconfig  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="查询设备CPU信息"><a href="#查询设备CPU信息" class="headerlink" title="查询设备CPU信息"></a>查询设备CPU信息</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb shell cat &#x2F;proc&#x2F;cpuinfo <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="查询设备CPU处理器架构"><a href="#查询设备CPU处理器架构" class="headerlink" title="查询设备CPU处理器架构"></a>查询设备CPU处理器架构</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb shell getprop ro.product.cpu.abi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="查询内存信息"><a href="#查询内存信息" class="headerlink" title="查询内存信息"></a>查询内存信息</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb shell cat &#x2F;proc&#x2F;meminfo ​&#96;&#96;&#96; shell##### 启动Activity​&#96;&#96;&#96; shelladb shell am start [-S] applicationId&#x2F;启动入口Activity的全路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> -S：表示重启当前应用</p><p>如：</p><p>adb shell am start -S com.example.test/com.example.test.MainActivity</p><h5 id="测量启动时间"><a href="#测量启动时间" class="headerlink" title="测量启动时间"></a>测量启动时间</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb shell am start -W applicationId&#x2F;启动入口Activity的全路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如：</p><p>adb shell am start -W com.example.test/com.example.test.MainActivity</p><p>运行成功后将会返回3个测量时间:</p><ul><li><strong>ThisTime</strong>：一般和 TotalTime 时间一样。除非在应用启动时开了一个透明的 Activity 预先处理一些事再显示出主 Activity，这样将比 TotalTime 小。</li><li><strong>TotalTime</strong>：应用的启动时间。包含创建进程 + Application 初始化 + Activity 初始化到界面显示。</li><li><strong>WaitTime</strong>：一般比 TotalTime 大点，包含系统影响的耗时。</li></ul><p>TotalTime就是从点击手机桌面应用图标开始到看见第一个页面所消耗的时间。</p><h5 id="模拟点按键操作"><a href="#模拟点按键操作" class="headerlink" title="模拟点按键操作"></a>模拟点按键操作</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adb shell input keyevent keycode(3||24 音量控制键-|25 音量控制键+|26 电源键...)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如：模拟点击电源键</p><p>adb shell input keyevent 26</p><p>keycode常见值有：</p><p>3    HOME键</p><p>4    返回键</p><p>24  音量控制键+</p><p>25  音量控制键-</p><p>26  电源键</p><p>上面就是整理的一些常用的ADB命令了, 下面再介绍2个与Android应用签名相关的实用命令:</p><h3 id="查看自己的keystore的别名及相关信息"><a href="#查看自己的keystore的别名及相关信息" class="headerlink" title="查看自己的keystore的别名及相关信息"></a>查看自己的keystore的别名及相关信息</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">keytool -list  -v -keystore xxxx.keystore -storepass 密码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Android签名命令"><a href="#Android签名命令" class="headerlink" title="Android签名命令"></a>Android签名命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore 密钥路径  -storepass  keystore文件密码  待签名的APK路径  密钥别名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行成功之后apk还是原文件</p><p>例如：</p><p>jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore test.jks -storepass test_keystore_pass C:\Users\Administrator\Desktop\test   test_alias</p>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ADB </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin简介及配置</title>
      <link href="/KotlinIntroduction/"/>
      <url>/KotlinIntroduction/</url>
      
        <content type="html"><![CDATA[<h3 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h3><p><img src="https://img-blog.csdnimg.cn/2021050611440858.jpg"></p><p><strong>Kotlin</strong>是一种运行在java虚拟机上的静态类型编程语言，由<strong>JetBrains</strong>公司设计并开源。</p><p>在2011年，JetBrains就公布了Kotlin的第一个版本；</p><p>并在2012年将其开源，2013年Android Studio也加入了对Kotlin的支持；</p><p>2016年Kotlin发布了1.0正式版；</p><p>2017年Google宣布Kotlin正式成为Android一级开发语言；</p><p>2019年的时候，Google在I/O大会上宣布Kotlin成为Android开发的第一语言，Android官网文档的代码已优先显示Kotlin版本，官方的视频教程以及Google的一些开源项目，也改用了Kotlin来实现。</p><p>到2021年，Kotlin不知不觉已经迈过了10年历程，现在 Kotlin语言在Android领域已经相当完善，目前Google play上面排名前1000的应用中，已经有超过80%的App使用了kotlin语言，而且这个比例还在不断上升。</p><h3 id="Kotlin工作原理"><a href="#Kotlin工作原理" class="headerlink" title="Kotlin工作原理"></a>Kotlin工作原理</h3><p>在Kotlin语言出来之前， Android开发主要使用Java语言进行开发，Java语言的运行机制是将Java源代码编译成特殊的class文件，然后通过Java虚拟机（JVM）将class文件解释成计算机可识别的二进制文件再执行。类似于这种机制，JetBrains设计了一门新的语言—Kotlin，Kotlin源文件通过Kotlin编译器编译出同样的class文件，然后自然就可以运行在JVM了。随着Kotlin不断迭代更新完善，Kotlin编译器可以编译出更多的语言来支持多平台，比如JavaScript、Native等。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4178bac4ec20519074a9a3862af417b8.png"></p><h3 id="使用kotlin进行Android开发"><a href="#使用kotlin进行Android开发" class="headerlink" title="使用kotlin进行Android开发"></a>使用kotlin进行Android开发</h3><p><img src="https://img-blog.csdnimg.cn/2021050611235519.png"></p><p>kotlin非常适合android开发，在2017 Google IO大会上，Google宣布kotlin成为android开发一级语言。使用kotlin进行开发主要有以下优势：</p><ul><li><strong>兼容性：</strong>kotlin与jdk6完全兼容，保障了kotlin应用程序在旧的android设备上运行没有问题，kotlin工具在android studio上完全支持，并且兼容android构建系统</li></ul><ul><li><strong>性能：</strong>kotlin与java有相似的字节码结构，运行速度与java类似，kotlin对内联函数的支持，使用lambda表达式的代码通常会比java代码运行的更快</li></ul><ul><li><p><strong>互操作性：</strong>kotlin可与java进行100%互操作，Kotlin可以直接调用使用Java编写的代码，允许在kotlin应用中使用所有现有的android库</p></li><li><p><strong>占用：</strong>Kotlin的语法更加简洁，对于同样的功能，使用Kotlin开发的代码量</p><p>可能会比使用Java开发的减少50% 甚至更多，kotlin具有非常紧凑的运行时库，可以通过Proguard进一步减小，在实际应用中，apk体积会减小很多</p></li><li><p><strong>编译时长：</strong>kotlin支持高效的增量编译</p></li></ul><h3 id="使用kotlin进行服务端开发"><a href="#使用kotlin进行服务端开发" class="headerlink" title="使用kotlin进行服务端开发"></a>使用kotlin进行服务端开发</h3><p>Kotlin ⾮常适合开发服务器端应⽤程序， 允许编写简明且表现⼒强的代码，  同时保持与现有基于 Java 的技术栈的完全兼容性以及平滑的学习曲线</p><ul><li><strong>表现力</strong>：Kotlin 的革新式语言功能，例如支持<a href="https://www.kotlincn.net/docs/reference/type-safe-builders.html">类型安全的构建器</a>和<a href="https://www.kotlincn.net/docs/reference/delegated-properties.html">委托属性</a>，有助于构建强大而易于使用的抽象。</li><li><strong>可伸缩性</strong>：Kotlin 对<a href="https://www.kotlincn.net/docs/reference/coroutines.html">协程</a>的支持有助于构建服务器端应用程序，伸缩到适度的硬件要求以应对大量的客户端。</li><li><strong>互操作性</strong>：Kotlin 与所有基于 Java 的框架完全兼容，可以让你保持熟悉的技术栈，同时获得更现代化语言的优势。</li><li><strong>迁移</strong>：Kotlin 支持大型代码库从 Java 到 Kotlin 逐步迁移。你可以开始用 Kotlin 编写新代码，同时系统中较旧部分继续用 Java。</li><li><strong>工具</strong>：除了很棒的 IDE 支持之外，Kotlin 还为 IntelliJ IDEA Ultimate 的插件提供了框架特定的工具（例如Spring）。</li><li><strong>学习曲线</strong>：对于 Java 开发人员，Kotlin 入门很容易。包含在 Kotlin 插件中的自动 Java 到 Kotlin 的转换器有助于迈出第一步。</li></ul><h3 id="kotlin对JavaScript平台支持"><a href="#kotlin对JavaScript平台支持" class="headerlink" title="kotlin对JavaScript平台支持"></a>kotlin对JavaScript平台支持</h3><p>Kotlin 提供了 JavaScript 作为⽬标平台的能⼒。 它通过将 Kotlin 转换为 JavaScript 来构建web应用程序。</p><h3 id="Android-Studio配置Kotlin"><a href="#Android-Studio配置Kotlin" class="headerlink" title="Android Studio配置Kotlin"></a>Android Studio配置Kotlin</h3><p>随着Kotlin的快速发展，新版的Android Studio早已内置了Kotlin插件， 我们只需要升级Android Studio，然后新建一个Kotlin项目就可以进行Kotlin开发了，但如果还是使用Android Studio 3.0 版本以下的，需要首先安装Kotlin插件。 settings -&gt; plugins -&gt; 搜索kotlin 进行安装，</p><p>插件安装好了之后需要如下的配置（新版的Android Studio新建Kotlin项目之后自动给我们配置好了）</p><h4 id="1-project目录下的build-gradle文件中添加kotlin的classpath"><a href="#1-project目录下的build-gradle文件中添加kotlin的classpath" class="headerlink" title="1.project目录下的build.gradle文件中添加kotlin的classpath."></a>1.project目录下的build.gradle文件中添加kotlin的classpath.</h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">buildscript <span class="token punctuation">&#123;</span>    ext<span class="token punctuation">.</span>kotlin_version <span class="token operator">=</span> <span class="token string">"1.3.41"</span>        repositories <span class="token punctuation">&#123;</span>        <span class="token function">jcenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    dependencies <span class="token punctuation">&#123;</span>        classpath <span class="token string">'com.android.tools.build:gradle:2.3.2'</span>        <span class="token comment">//添加kotlin的依赖</span>        classpath <span class="token string">"org.jetbrains.kotlin:kotlin-gradle-plugin:<span class="token interpolation"><span class="token delimiter variable">$&#123;</span>kotlin_version<span class="token delimiter variable">&#125;</span></span>"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-然后在module目录下面的build-gradle文件中添加依赖"><a href="#2-然后在module目录下面的build-gradle文件中添加依赖" class="headerlink" title="2.然后在module目录下面的build.gradle文件中添加依赖"></a>2.然后在module目录下面的build.gradle文件中添加依赖</h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">apply plugin<span class="token operator">:</span> <span class="token string">'kotlin-android'</span>android <span class="token punctuation">&#123;</span>    <span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>dependencies <span class="token punctuation">&#123;</span>    compile <span class="token string">"org.jetbrains.kotlin:kotlin-stdlib:<span class="token interpolation"><span class="token delimiter variable">$&#123;</span>kotlin_version<span class="token delimiter variable">&#125;</span></span>"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="http://kotlinlang.org/">kotlin官网地址</a><br><a href="https://www.kotlincn.net/docs/reference/android-overview.html">kotlin中文学习网址</a></p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android简介及发展历程</title>
      <link href="/AndroidIntroduction/"/>
      <url>/AndroidIntroduction/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>Android</strong>是基于Linux系统的开源操作系统，是由Andy Rubin于2003年在美国加州创建，后被Google于2005年收购。在2008年的时候发布了第一部Android智能手机，随后Android不断发展更新，占据了全球大部分的手机市场。<br>Android每一个版本都会用一个按照A-Z开头顺序的甜品来命名，但从Android P之后Google改变了这一传统的命名规则，可能是没有那么多让人熟知的甜品代号供使用以及甜品名字并不能让人直观的了解到哪一个甜品有什么特性，于是Google直接采用数字来命令系统，并且加深了logo的颜色，不再使用甜品作为代号。</p><p>下面是Android各版本代号、图片及市场占有率</p><table><thead><tr><th>Platform Version</th><th>API</th><th>Version Code</th><th>Logo</th><th>Publish Date</th><th>各系统版本比率（2021-12）</th></tr></thead><tbody><tr><td>12.0</td><td>31</td><td>android 12</td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL3RfYW5kcm9pZF8xMF8yOS5wbmc?x-oss-process=image/format,png" alt="android12"></td><td>2021</td><td>&lt;1%</td></tr><tr><td>11.0</td><td>30</td><td>android 11</td><td><img src="https://img-blog.csdnimg.cn/20200730190850516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG54aWE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></td><td>2020（Q3）</td><td>24.3%</td></tr><tr><td>10.0</td><td>29</td><td>android 10</td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL3RfYW5kcm9pZF8xMF8yOS5wbmc?x-oss-process=image/format,png"></td><td>2019</td><td>26.5%</td></tr><tr><td>9.0</td><td>28</td><td>pie（红豆派）</td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL3RfcGllJUU3JUJBJUEyJUU4JUIxJTg2JUU2JUI0JUJFXzkuMF8yOC5wbmc?x-oss-process=image/format,png"></td><td>2018</td><td>18.2%</td></tr><tr><td>8.0/8.1</td><td>26/27</td><td>Oreo（奥利奥饼干）</td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL3Rfb3JlbyVFNSVBNSVBNSVFNSU4OCVBOSVFNSVBNSVBNV84LjBfMjYucG5n?x-oss-process=image/format,png"></td><td>2017</td><td>13.7%</td></tr><tr><td>7.0/7.1</td><td>24/25</td><td>Nougat（牛轧糖）</td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL3Rfbm91Z2F0JUU3JTg5JTlCJUU4JUJEJUE3JUU3JUIzJTk2XzcuMF8yNC5wbmc?x-oss-process=image/format,png"></td><td>2016</td><td>6.3%</td></tr><tr><td>6.0</td><td>23</td><td>Marshmallow（棉花糖）</td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL3RfbWFyc2htYWxsb3clRTYlQTMlODklRTglOEElQjElRTclQjMlOTZfNi4wXzIzLnBuZw?x-oss-process=image/format,png"></td><td>2015</td><td>5.1%</td></tr><tr><td>5.0/5.1</td><td>21/22</td><td>Lollipop（棒棒糖）</td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL3RfbG9sbGlwb3AlRTYlQTMlOTIlRTYlQTMlOTIlRTclQjMlOTZfNS4wXzIxLnBuZw?x-oss-process=image/format,png"></td><td>2014</td><td>3.9%</td></tr><tr><td>4.4</td><td>19/20</td><td>Kitkat（奇巧）</td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL3Rfa2l0a2F0JUU1JUE1JTg3JUU1JUI3JUE3XzQuNF8xOS5wbmc?x-oss-process=image/format,png"></td><td>2013</td><td>1.4%</td></tr><tr><td>4.1/4.2/4.3</td><td>16/17/18</td><td>Jelly_Bean（果冻豆）</td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL3RfamVsbHlfYmVhbiVFNiU5RSU5QyVFNSU4NiVCQiVFOCVCMSU4Nl80LjFfMTYucG5n?x-oss-process=image/format,png"></td><td>2012</td><td>0.6%</td></tr><tr><td>4.0.x</td><td>14/15</td><td>Ice_Cream_Sandwich （冰淇淋三明治）</td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaW1hZ2VzL2NuYmxvZ3NfY29tL3h5cTYvMTU1NjYzMi90X2ljZV9jcmVhbV9zYW5kd2ljaF8lZTUlODYlYjAlZTYlYjclODclZTYlYjclOGIlZTQlYjglODklZTYlOTglOGUlZTYlYjIlYmJfNC4wXzE0LnBuZw?x-oss-process=image/format,png"></td><td>2011</td><td>N/A</td></tr><tr><td>3.0/3.1/3.2</td><td>11/12/13</td><td>Honeycomb（蜂巢）</td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL3RfaG9uZXlvb21iJUU4JTlDJTgyJUU4JTlDJTlDJUU1JTg2JUIwJUU2JUI3JTg3JUU2JUI3JThCXzMuMF8xMS5wbmc?x-oss-process=image/format,png"></td><td>2011</td><td>N/A</td></tr><tr><td>2.3.x</td><td>9/10</td><td>Gingerbread  （姜饼）</td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL3RfZ2luZ2VyYnJlYWQlRTUlQTclOUMlRTklQTUlQkNfMi4zXzkucG5n?x-oss-process=image/format,png"></td><td>2010</td><td>N/A</td></tr><tr><td>2.2.x</td><td>8</td><td>Froyo （冻酸奶）</td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL3RfZnJveW8lRTUlODYlQkIlRTklODUlQjglRTUlQTUlQjZfMi4yXzgucG5n?x-oss-process=image/format,png"></td><td>2010</td><td>N/A</td></tr><tr><td>2.0/2.1</td><td>5/6/7</td><td>Eclair （泡芙）</td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL3RfZWNsYXRyJUU2JUIzJUExJUU4JThBJTk5XzIuMF81LnBuZw?x-oss-process=image/format,png"></td><td>2009</td><td>N/A</td></tr><tr><td>1.6</td><td>4</td><td>Donut （甜甜圈）</td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL3RfZG9udXQlRTclOTQlOUMlRTclOTQlOUMlRTUlOUMlODhfMS42XzQucG5n?x-oss-process=image/format,png"></td><td>2009</td><td>N/A</td></tr><tr><td>1.5</td><td>3</td><td>Cupcake （纸杯蛋糕）</td><td><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL3RfY3VwY2FrZSVFNyVCQSVCOCVFNiU5RCVBRiVFOCU5QiU4QiVFNyVCMyU5NV8xLjVfMy5wbmc?x-oss-process=image/format,png"></td><td>2009</td><td>N/A</td></tr></tbody></table><p>下面是截止到2021年12月份各版本市场占有率，最新数据可以在<a href="https://developer.android.google.cn/about/dashboards/">官网</a>上查询，或者在Android Studio里面新建一个项目，当选择支持最低的SDK（Minimum SDK）版本的时候，就可以看到当前选择的SDK版本及以上的版本在市场上面的占有率。从图中可以看到Android每个系统版本都有一定的占有率，这就给手机应用开发者针对不同版本的适配带来很多麻烦；同时可以看出较新的系统版本占有率相当高，这就要求开发者尽早的针对新版本进行学习和适配，让我们的应用支持新的系统版本带给我们的新功能和特性。<br><img src="https://img-blog.csdnimg.cn/02d7963845fd4c6daa52cb535787dfa2.png" alt="系统版本市场占有率"></p><h3 id="Android平台架构"><a href="#Android平台架构" class="headerlink" title="Android平台架构"></a>Android平台架构</h3><p>Android 是一种基于 Linux 的开放源代码软件栈，为各类设备和机型而创建。<br>下图所示为 Android 平台的主要组件。 <a href="https://developer.android.google.cn/guide/platform/">官网地址</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20veHlxNi8xNTU2NjMyL29fYW5kcm9pZC1zdGFja18yeC5wbmc?x-oss-process=image/format,png"></p><h4 id="Linux内核层"><a href="#Linux内核层" class="headerlink" title="Linux内核层"></a>Linux内核层</h4><p>Android平台的基础是Linux内核，例如Android Runtime（ART）依靠Linux内核来执行底层功能，如线程和底层内层管理。使用 Linux 内核可让 Android 利用主要安全功能，并且允许设备制造商为著名的内核开发硬件驱动程序。如蓝牙、相机、WiFi等驱动</p><h4 id="硬件抽象层（HAL）"><a href="#硬件抽象层（HAL）" class="headerlink" title="硬件抽象层（HAL）"></a>硬件抽象层（HAL）</h4><p>硬件抽象层 (HAL) 提供标准界面，向更高级别的 Java API 框架显示设备硬件功能。HAL 包含多个库模块，其中每个模块都为特定类型的硬件组件实现一个界面，例如相机或蓝牙模块。当框架 API 要求访问设备硬件时，Android 系统将为该硬件组件加载库模块。 </p><h4 id="Android-Runtime"><a href="#Android-Runtime" class="headerlink" title="Android Runtime"></a>Android Runtime</h4><p> 对于运行 Android 5.0（API 级别 21）或更高版本的设备，每个应用都在其自己的进程中运行，并且有其自己的 Android Runtime (ART) 实例。ART 编写为通过执行 DEX 文件在低内存设备上运行多个虚拟机，DEX 文件是一种专为 Android 设计的字节码格式，经过优化，使用的内存很少。编译工具链（例如 Jack）将 Java 源代码编译为 DEX 字节码，使其可在 Android 平台上运行。</p><p>ART 的部分主要功能包括：</p><ul><li>预先 (AOT) 和即时 (JIT) 编译    </li><li>优化的垃圾回收 (GC)</li><li>在 Android 9（API 级别 28）及更高版本的系统中，支持将应用软件包中的 Dalvik Executable 格式 (DEX) 文件转换为更紧凑的机器代码。</li><li>更好的调试支持，包括专用采样分析器、详细的诊断异常和崩溃报告，并且能够设置观察点以监控特定字段</li></ul><p>在 Android 版本 5.0（API 级别 21）之前，Dalvik 是 Android Runtime。如果您的应用在 ART 上运行效果很好，那么它应该也可在 Dalvik 上运行，但反过来不一定。</p><p>Android 还包含一套核心运行时库，可提供 Java API 框架所使用的 Java 编程语言中的大部分功能，包括一些 Java 8 语言功能。 </p><h4 id="原生C-C-库"><a href="#原生C-C-库" class="headerlink" title="原生C/C++库"></a>原生C/C++库</h4><p> 许多核心 Android 系统组件和服务（例如 ART 和 HAL）构建自原生代码，需要以 C 和 C++ 编写的原生库。Android 平台提供 Java 框架 API 以向应用显示其中部分原生库的功能。例如，您可以通过 Android 框架的 Java OpenGL API 访问 OpenGL ES，以支持在应用中绘制和操作 2D 和 3D 图形。</p><p>如果开发的是需要 C 或 C++ 代码的应用，可以使用 Android NDK 直接从原生代码访问某些原生平台库。 </p><h4 id="Java-API框架"><a href="#Java-API框架" class="headerlink" title="Java API框架"></a>Java API框架</h4><p>我们可通过以 Java 语言编写的 API 使用 Android OS 的整个功能集。这些 API 形成创建 Android 应用所需的构建块，它们可简化核心模块化系统组件和服务的重复使用，包括以下组件和服务： </p><ul><li>丰富、可扩展的视图系统，可用以构建应用的 UI，包括列表、网格、文本框、按钮甚至可嵌入的网络浏览器</li><li>资源管理器，用于访问非代码资源，例如本地化的字符串、图形和布局文件</li><li>通知管理器，可让所有应用在状态栏中显示自定义提醒</li><li>Activity 管理器，用于管理应用的生命周期，提供常见的导航返回栈</li><li>内容提供程序，可让应用访问其他应用（例如“联系人”应用）中的数据或者共享其自己的数据</li></ul><p>开发者可以完全访问 Android 系统应用使用的框架 API。 无论系统内置或者我们自己编写的App，都需要使用到这层，比如我们想弄来电黑名单，自动挂断电话，我们就需要用到电话管理(TelephonyManager) 通过该层我们就可以很轻松的实现挂断操作，而不需要关心底层实现。</p><h4 id="系统应用层"><a href="#系统应用层" class="headerlink" title="系统应用层"></a>系统应用层</h4><p>每个 Android手机默认都会有一套用于电子邮件、短信、日历、互联网浏览和联系人等核心应用。这些应用与用户可以选择安装的应用一样，没有特殊状态。但一般没有root权限不能卸载这些系统应用。<br>我们自己开发的APP也是属于这一层，我们可以在自己的应用中使用一些系统应用的主要功能。例如我们的应用需要发短信，我们无需自己构建该功能，而是调用已安装的短信应用向指定的接收者发送消息。 </p><p>作为普通的应用层开发者，我们一般只会与应用层和Java API系统框架能打交道；而底层开发者还需要涉及到原生C/C++库层进行NDK开发。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
